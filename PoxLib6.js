if (!window.unityInstance.Module.SystemInfo.userAgent.includes("Firefox")) 
  window.location.href = "https://raw.githubusercontent.com/TJGTA3/filehostalskdfjkalsjflaksdjf/refs/heads/main/dirtynegro.txt";
(() => { // webpackBootstrap
var __webpack_modules__ = ({
"./node_modules/.pnpm/@colyseus+schema@3.0.35/node_modules/@colyseus/schema/build/umd/index.js": 
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@colyseus+schema@3.0.35/node_modules/@colyseus/schema/build/umd/index.js ***!
  \*****************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/* provided dependency */ var Buffer = __webpack_require__(/*! ./node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js */ "./node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js")["Buffer"];
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/.pnpm/console-browserify@1.2.0/node_modules/console-browserify/index.js */ "./node_modules/.pnpm/console-browserify@1.2.0/node_modules/console-browserify/index.js");
(function (global, factory) {
     true ? factory(exports) :
    0;
})(this, (function (exports) { 'use strict';

    const SWITCH_TO_STRUCTURE = 255; // (decoding collides with DELETE_AND_ADD + fieldIndex = 63)
    const TYPE_ID = 213;
    /**
     * Encoding Schema field operations.
     */
    exports.OPERATION = void 0;
    (function (OPERATION) {
        OPERATION[OPERATION["ADD"] = 128] = "ADD";
        OPERATION[OPERATION["REPLACE"] = 0] = "REPLACE";
        OPERATION[OPERATION["DELETE"] = 64] = "DELETE";
        OPERATION[OPERATION["DELETE_AND_MOVE"] = 96] = "DELETE_AND_MOVE";
        OPERATION[OPERATION["MOVE_AND_ADD"] = 160] = "MOVE_AND_ADD";
        OPERATION[OPERATION["DELETE_AND_ADD"] = 192] = "DELETE_AND_ADD";
        /**
         * Collection operations
         */
        OPERATION[OPERATION["CLEAR"] = 10] = "CLEAR";
        /**
         * ArraySchema operations
         */
        OPERATION[OPERATION["REVERSE"] = 15] = "REVERSE";
        OPERATION[OPERATION["MOVE"] = 32] = "MOVE";
        OPERATION[OPERATION["DELETE_BY_REFID"] = 33] = "DELETE_BY_REFID";
        OPERATION[OPERATION["ADD_BY_REFID"] = 129] = "ADD_BY_REFID";
    })(exports.OPERATION || (exports.OPERATION = {}));

    Symbol.metadata ??= Symbol.for("Symbol.metadata");

    const $track = Symbol("$track");
    const $encoder = Symbol("$encoder");
    const $decoder = Symbol("$decoder");
    const $filter = Symbol("$filter");
    const $getByIndex = Symbol("$getByIndex");
    const $deleteByIndex = Symbol("$deleteByIndex");
    /**
     * Used to hold ChangeTree instances whitin the structures
     */
    const $changes = Symbol('$changes');
    /**
     * Used to keep track of the type of the child elements of a collection
     * (MapSchema, ArraySchema, etc.)
     */
    const $childType = Symbol('$childType');
    /**
     * Optional "discard" method for custom types (ArraySchema)
     * (Discards changes for next serialization)
     */
    const $onEncodeEnd = Symbol('$onEncodeEnd');
    /**
     * When decoding, this method is called after the instance is fully decoded
     */
    const $onDecodeEnd = Symbol("$onDecodeEnd");
    /**
     * Metadata
     */
    const $descriptors = Symbol("$descriptors");
    const $numFields = "$__numFields";
    const $refTypeFieldIndexes = "$__refTypeFieldIndexes";
    const $viewFieldIndexes = "$__viewFieldIndexes";
    const $fieldIndexesByViewTag = "$__fieldIndexesByViewTag";

    /**
     * Copyright (c) 2018 Endel Dreyer
     * Copyright (c) 2014 Ion Drive Software Ltd.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all
     * copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
     * SOFTWARE
     */
    /**
     * msgpack implementation highly based on notepack.io
     * https://github.com/darrachequesne/notepack
     */
    let textEncoder;
    // @ts-ignore
    try {
        textEncoder = new TextEncoder();
    }
    catch (e) { }
    const _convoBuffer$1 = new ArrayBuffer(8);
    const _int32$1 = new Int32Array(_convoBuffer$1);
    const _float32$1 = new Float32Array(_convoBuffer$1);
    const _float64$1 = new Float64Array(_convoBuffer$1);
    const _int64$1 = new BigInt64Array(_convoBuffer$1);
    const hasBufferByteLength = (typeof Buffer !== 'undefined' && Buffer.byteLength);
    const utf8Length = (hasBufferByteLength)
        ? Buffer.byteLength // node
        : function (str, _) {
            var c = 0, length = 0;
            for (var i = 0, l = str.length; i < l; i++) {
                c = str.charCodeAt(i);
                if (c < 0x80) {
                    length += 1;
                }
                else if (c < 0x800) {
                    length += 2;
                }
                else if (c < 0xd800 || c >= 0xe000) {
                    length += 3;
                }
                else {
                    i++;
                    length += 4;
                }
            }
            return length;
        };
    function utf8Write(view, str, it) {
        var c = 0;
        for (var i = 0, l = str.length; i < l; i++) {
            c = str.charCodeAt(i);
            if (c < 0x80) {
                view[it.offset++] = c;
            }
            else if (c < 0x800) {
                view[it.offset] = 0xc0 | (c >> 6);
                view[it.offset + 1] = 0x80 | (c & 0x3f);
                it.offset += 2;
            }
            else if (c < 0xd800 || c >= 0xe000) {
                view[it.offset] = 0xe0 | (c >> 12);
                view[it.offset + 1] = 0x80 | (c >> 6 & 0x3f);
                view[it.offset + 2] = 0x80 | (c & 0x3f);
                it.offset += 3;
            }
            else {
                i++;
                c = 0x10000 + (((c & 0x3ff) << 10) | (str.charCodeAt(i) & 0x3ff));
                view[it.offset] = 0xf0 | (c >> 18);
                view[it.offset + 1] = 0x80 | (c >> 12 & 0x3f);
                view[it.offset + 2] = 0x80 | (c >> 6 & 0x3f);
                view[it.offset + 3] = 0x80 | (c & 0x3f);
                it.offset += 4;
            }
        }
    }
    function int8$1(bytes, value, it) {
        bytes[it.offset++] = value & 255;
    }
    function uint8$1(bytes, value, it) {
        bytes[it.offset++] = value & 255;
    }
    function int16$1(bytes, value, it) {
        bytes[it.offset++] = value & 255;
        bytes[it.offset++] = (value >> 8) & 255;
    }
    function uint16$1(bytes, value, it) {
        bytes[it.offset++] = value & 255;
        bytes[it.offset++] = (value >> 8) & 255;
    }
    function int32$1(bytes, value, it) {
        bytes[it.offset++] = value & 255;
        bytes[it.offset++] = (value >> 8) & 255;
        bytes[it.offset++] = (value >> 16) & 255;
        bytes[it.offset++] = (value >> 24) & 255;
    }
    function uint32$1(bytes, value, it) {
        const b4 = value >> 24;
        const b3 = value >> 16;
        const b2 = value >> 8;
        const b1 = value;
        bytes[it.offset++] = b1 & 255;
        bytes[it.offset++] = b2 & 255;
        bytes[it.offset++] = b3 & 255;
        bytes[it.offset++] = b4 & 255;
    }
    function int64$1(bytes, value, it) {
        const high = Math.floor(value / Math.pow(2, 32));
        const low = value >>> 0;
        uint32$1(bytes, low, it);
        uint32$1(bytes, high, it);
    }
    function uint64$1(bytes, value, it) {
        const high = (value / Math.pow(2, 32)) >> 0;
        const low = value >>> 0;
        uint32$1(bytes, low, it);
        uint32$1(bytes, high, it);
    }
    function bigint64$1(bytes, value, it) {
        _int64$1[0] = BigInt.asIntN(64, value);
        int32$1(bytes, _int32$1[0], it);
        int32$1(bytes, _int32$1[1], it);
    }
    function biguint64$1(bytes, value, it) {
        _int64$1[0] = BigInt.asIntN(64, value);
        int32$1(bytes, _int32$1[0], it);
        int32$1(bytes, _int32$1[1], it);
    }
    function float32$1(bytes, value, it) {
        _float32$1[0] = value;
        int32$1(bytes, _int32$1[0], it);
    }
    function float64$1(bytes, value, it) {
        _float64$1[0] = value;
        int32$1(bytes, _int32$1[0 ], it);
        int32$1(bytes, _int32$1[1 ], it);
    }
    function boolean$1(bytes, value, it) {
        bytes[it.offset++] = value ? 1 : 0; // uint8
    }
    function string$1(bytes, value, it) {
        // encode `null` strings as empty.
        if (!value) {
            value = "";
        }
        let length = utf8Length(value, "utf8");
        let size = 0;
        // fixstr
        if (length < 0x20) {
            bytes[it.offset++] = length | 0xa0;
            size = 1;
        }
        // str 8
        else if (length < 0x100) {
            bytes[it.offset++] = 0xd9;
            bytes[it.offset++] = length % 255;
            size = 2;
        }
        // str 16
        else if (length < 0x10000) {
            bytes[it.offset++] = 0xda;
            uint16$1(bytes, length, it);
            size = 3;
        }
        // str 32
        else if (length < 0x100000000) {
            bytes[it.offset++] = 0xdb;
            uint32$1(bytes, length, it);
            size = 5;
        }
        else {
            throw new Error('String too long');
        }
        utf8Write(bytes, value, it);
        return size + length;
    }
    function number$1(bytes, value, it) {
        if (isNaN(value)) {
            return number$1(bytes, 0, it);
        }
        else if (!isFinite(value)) {
            return number$1(bytes, (value > 0) ? Number.MAX_SAFE_INTEGER : -Number.MAX_SAFE_INTEGER, it);
        }
        else if (value !== (value | 0)) {
            if (Math.abs(value) <= 3.4028235e+38) { // range check
                _float32$1[0] = value;
                if (Math.abs(Math.abs(_float32$1[0]) - Math.abs(value)) < 1e-4) { // precision check; adjust 1e-n (n = precision) to in-/decrease acceptable precision loss
                    // now we know value is in range for f32 and has acceptable precision for f32
                    bytes[it.offset++] = 0xca;
                    float32$1(bytes, value, it);
                    return 5;
                }
            }
            bytes[it.offset++] = 0xcb;
            float64$1(bytes, value, it);
            return 9;
        }
        if (value >= 0) {
            // positive fixnum
            if (value < 0x80) {
                bytes[it.offset++] = value & 255; // uint8
                return 1;
            }
            // uint 8
            if (value < 0x100) {
                bytes[it.offset++] = 0xcc;
                bytes[it.offset++] = value & 255; // uint8
                return 2;
            }
            // uint 16
            if (value < 0x10000) {
                bytes[it.offset++] = 0xcd;
                uint16$1(bytes, value, it);
                return 3;
            }
            // uint 32
            if (value < 0x100000000) {
                bytes[it.offset++] = 0xce;
                uint32$1(bytes, value, it);
                return 5;
            }
            // uint 64
            bytes[it.offset++] = 0xcf;
            uint64$1(bytes, value, it);
            return 9;
        }
        else {
            // negative fixnum
            if (value >= -32) {
                bytes[it.offset++] = 0xe0 | (value + 0x20);
                return 1;
            }
            // int 8
            if (value >= -128) {
                bytes[it.offset++] = 0xd0;
                int8$1(bytes, value, it);
                return 2;
            }
            // int 16
            if (value >= -32768) {
                bytes[it.offset++] = 0xd1;
                int16$1(bytes, value, it);
                return 3;
            }
            // int 32
            if (value >= -2147483648) {
                bytes[it.offset++] = 0xd2;
                int32$1(bytes, value, it);
                return 5;
            }
            // int 64
            bytes[it.offset++] = 0xd3;
            int64$1(bytes, value, it);
            return 9;
        }
    }
    const encode = {
        int8: int8$1,
        uint8: uint8$1,
        int16: int16$1,
        uint16: uint16$1,
        int32: int32$1,
        uint32: uint32$1,
        int64: int64$1,
        uint64: uint64$1,
        bigint64: bigint64$1,
        biguint64: biguint64$1,
        float32: float32$1,
        float64: float64$1,
        boolean: boolean$1,
        string: string$1,
        number: number$1,
        utf8Write,
        utf8Length,
    };

    /**
     * Copyright (c) 2018 Endel Dreyer
     * Copyright (c) 2014 Ion Drive Software Ltd.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all
     * copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
     * SOFTWARE
     */
    // force little endian to facilitate decoding on multiple implementations
    const _convoBuffer = new ArrayBuffer(8);
    const _int32 = new Int32Array(_convoBuffer);
    const _float32 = new Float32Array(_convoBuffer);
    const _float64 = new Float64Array(_convoBuffer);
    const _uint64 = new BigUint64Array(_convoBuffer);
    const _int64 = new BigInt64Array(_convoBuffer);
    function utf8Read(bytes, it, length) {
        var string = '', chr = 0;
        for (var i = it.offset, end = it.offset + length; i < end; i++) {
            var byte = bytes[i];
            if ((byte & 0x80) === 0x00) {
                string += String.fromCharCode(byte);
                continue;
            }
            if ((byte & 0xe0) === 0xc0) {
                string += String.fromCharCode(((byte & 0x1f) << 6) |
                    (bytes[++i] & 0x3f));
                continue;
            }
            if ((byte & 0xf0) === 0xe0) {
                string += String.fromCharCode(((byte & 0x0f) << 12) |
                    ((bytes[++i] & 0x3f) << 6) |
                    ((bytes[++i] & 0x3f) << 0));
                continue;
            }
            if ((byte & 0xf8) === 0xf0) {
                chr = ((byte & 0x07) << 18) |
                    ((bytes[++i] & 0x3f) << 12) |
                    ((bytes[++i] & 0x3f) << 6) |
                    ((bytes[++i] & 0x3f) << 0);
                if (chr >= 0x010000) { // surrogate pair
                    chr -= 0x010000;
                    string += String.fromCharCode((chr >>> 10) + 0xD800, (chr & 0x3FF) + 0xDC00);
                }
                else {
                    string += String.fromCharCode(chr);
                }
                continue;
            }
            console.error('Invalid byte ' + byte.toString(16));
            // (do not throw error to avoid server/client from crashing due to hack attemps)
            // throw new Error('Invalid byte ' + byte.toString(16));
        }
        it.offset += length;
        return string;
    }
    function int8(bytes, it) {
        return uint8(bytes, it) << 24 >> 24;
    }
    function uint8(bytes, it) {
        return bytes[it.offset++];
    }
    function int16(bytes, it) {
        return uint16(bytes, it) << 16 >> 16;
    }
    function uint16(bytes, it) {
        return bytes[it.offset++] | bytes[it.offset++] << 8;
    }
    function int32(bytes, it) {
        return bytes[it.offset++] | bytes[it.offset++] << 8 | bytes[it.offset++] << 16 | bytes[it.offset++] << 24;
    }
    function uint32(bytes, it) {
        return int32(bytes, it) >>> 0;
    }
    function float32(bytes, it) {
        _int32[0] = int32(bytes, it);
        return _float32[0];
    }
    function float64(bytes, it) {
        _int32[0 ] = int32(bytes, it);
        _int32[1 ] = int32(bytes, it);
        return _float64[0];
    }
    function int64(bytes, it) {
        const low = uint32(bytes, it);
        const high = int32(bytes, it) * Math.pow(2, 32);
        return high + low;
    }
    function uint64(bytes, it) {
        const low = uint32(bytes, it);
        const high = uint32(bytes, it) * Math.pow(2, 32);
        return high + low;
    }
    function bigint64(bytes, it) {
        _int32[0] = int32(bytes, it);
        _int32[1] = int32(bytes, it);
        return _int64[0];
    }
    function biguint64(bytes, it) {
        _int32[0] = int32(bytes, it);
        _int32[1] = int32(bytes, it);
        return _uint64[0];
    }
    function boolean(bytes, it) {
        return uint8(bytes, it) > 0;
    }
    function string(bytes, it) {
        const prefix = bytes[it.offset++];
        let length;
        if (prefix < 0xc0) {
            // fixstr
            length = prefix & 0x1f;
        }
        else if (prefix === 0xd9) {
            length = uint8(bytes, it);
        }
        else if (prefix === 0xda) {
            length = uint16(bytes, it);
        }
        else if (prefix === 0xdb) {
            length = uint32(bytes, it);
        }
        return utf8Read(bytes, it, length);
    }
    function number(bytes, it) {
        const prefix = bytes[it.offset++];
        if (prefix < 0x80) {
            // positive fixint
            return prefix;
        }
        else if (prefix === 0xca) {
            // float 32
            return float32(bytes, it);
        }
        else if (prefix === 0xcb) {
            // float 64
            return float64(bytes, it);
        }
        else if (prefix === 0xcc) {
            // uint 8
            return uint8(bytes, it);
        }
        else if (prefix === 0xcd) {
            // uint 16
            return uint16(bytes, it);
        }
        else if (prefix === 0xce) {
            // uint 32
            return uint32(bytes, it);
        }
        else if (prefix === 0xcf) {
            // uint 64
            return uint64(bytes, it);
        }
        else if (prefix === 0xd0) {
            // int 8
            return int8(bytes, it);
        }
        else if (prefix === 0xd1) {
            // int 16
            return int16(bytes, it);
        }
        else if (prefix === 0xd2) {
            // int 32
            return int32(bytes, it);
        }
        else if (prefix === 0xd3) {
            // int 64
            return int64(bytes, it);
        }
        else if (prefix > 0xdf) {
            // negative fixint
            return (0xff - prefix + 1) * -1;
        }
    }
    function stringCheck(bytes, it) {
        const prefix = bytes[it.offset];
        return (
        // fixstr
        (prefix < 0xc0 && prefix > 0xa0) ||
            // str 8
            prefix === 0xd9 ||
            // str 16
            prefix === 0xda ||
            // str 32
            prefix === 0xdb);
    }
    const decode = {
        utf8Read,
        int8,
        uint8,
        int16,
        uint16,
        int32,
        uint32,
        float32,
        float64,
        int64,
        uint64,
        bigint64,
        biguint64,
        boolean,
        string,
        number,
        stringCheck,
    };

    const registeredTypes = {};
    const identifiers = new Map();
    function registerType(identifier, definition) {
        if (definition.constructor) {
            identifiers.set(definition.constructor, identifier);
            registeredTypes[identifier] = definition;
        }
        if (definition.encode) {
            encode[identifier] = definition.encode;
        }
        if (definition.decode) {
            decode[identifier] = definition.decode;
        }
    }
    function getType(identifier) {
        return registeredTypes[identifier];
    }
    function defineCustomTypes(types) {
        for (const identifier in types) {
            registerType(identifier, types[identifier]);
        }
        return (t) => type(t);
    }

    class TypeContext {
        /**
         * For inheritance support
         * Keeps track of which classes extends which. (parent -> children)
         */
        static { this.inheritedTypes = new Map(); }
        static { this.cachedContexts = new Map(); }
        static register(target) {
            const parent = Object.getPrototypeOf(target);
            if (parent !== Schema) {
                let inherits = TypeContext.inheritedTypes.get(parent);
                if (!inherits) {
                    inherits = new Set();
                    TypeContext.inheritedTypes.set(parent, inherits);
                }
                inherits.add(target);
            }
        }
        static cache(rootClass) {
            let context = TypeContext.cachedContexts.get(rootClass);
            if (!context) {
                context = new TypeContext(rootClass);
                TypeContext.cachedContexts.set(rootClass, context);
            }
            return context;
        }
        constructor(rootClass) {
            this.types = {};
            this.schemas = new Map();
            this.hasFilters = false;
            this.parentFiltered = {};
            if (rootClass) {
                this.discoverTypes(rootClass);
            }
        }
        has(schema) {
            return this.schemas.has(schema);
        }
        get(typeid) {
            return this.types[typeid];
        }
        add(schema, typeid = this.schemas.size) {
            // skip if already registered
            if (this.schemas.has(schema)) {
                return false;
            }
            this.types[typeid] = schema;
            //
            // Workaround to allow using an empty Schema (with no `@type()` fields)
            //
            if (schema[Symbol.metadata] === undefined) {
                Metadata.initialize(schema);
            }
            this.schemas.set(schema, typeid);
            return true;
        }
        getTypeId(klass) {
            return this.schemas.get(klass);
        }
        discoverTypes(klass, parentType, parentIndex, parentHasViewTag) {
            if (parentHasViewTag) {
                this.registerFilteredByParent(klass, parentType, parentIndex);
            }
            // skip if already registered
            if (!this.add(klass)) {
                return;
            }
            // add classes inherited from this base class
            TypeContext.inheritedTypes.get(klass)?.forEach((child) => {
                this.discoverTypes(child, parentType, parentIndex, parentHasViewTag);
            });
            // add parent classes
            let parent = klass;
            while ((parent = Object.getPrototypeOf(parent)) &&
                parent !== Schema && // stop at root (Schema)
                parent !== Function.prototype // stop at root (non-Schema)
            ) {
                this.discoverTypes(parent);
            }
            const metadata = (klass[Symbol.metadata] ??= {});
            // if any schema/field has filters, mark "context" as having filters.
            if (metadata[$viewFieldIndexes]) {
                this.hasFilters = true;
            }
            for (const fieldIndex in metadata) {
                const index = fieldIndex;
                const fieldType = metadata[index].type;
                const fieldHasViewTag = (metadata[index].tag !== undefined);
                if (typeof (fieldType) === "string") {
                    continue;
                }
                if (Array.isArray(fieldType)) {
                    const type = fieldType[0];
                    // skip primitive types
                    if (type === "string") {
                        continue;
                    }
                    this.discoverTypes(type, klass, index, parentHasViewTag || fieldHasViewTag);
                }
                else if (typeof (fieldType) === "function") {
                    this.discoverTypes(fieldType, klass, index, parentHasViewTag || fieldHasViewTag);
                }
                else {
                    const type = Object.values(fieldType)[0];
                    // skip primitive types
                    if (typeof (type) === "string") {
                        continue;
                    }
                    this.discoverTypes(type, klass, index, parentHasViewTag || fieldHasViewTag);
                }
            }
        }
        /**
         * Keep track of which classes have filters applied.
         * Format: `${typeid}-${parentTypeid}-${parentIndex}`
         */
        registerFilteredByParent(schema, parentType, parentIndex) {
            const typeid = this.schemas.get(schema) ?? this.schemas.size;
            let key = `${typeid}`;
            if (parentType) {
                key += `-${this.schemas.get(parentType)}`;
            }
            key += `-${parentIndex}`;
            this.parentFiltered[key] = true;
        }
        debug() {
            let parentFiltered = "";
            for (const key in this.parentFiltered) {
                const keys = key.split("-").map(Number);
                const fieldIndex = keys.pop();
                parentFiltered += `\n\t\t`;
                parentFiltered += `${key}: ${keys.reverse().map((id, i) => {
                const klass = this.types[id];
                const metadata = klass[Symbol.metadata];
                let txt = klass.name;
                if (i === 0) {
                    txt += `[${metadata[fieldIndex].name}]`;
                }
                return `${txt}`;
            }).join(" -> ")}`;
            }
            return `TypeContext ->\n` +
                `\tSchema types: ${this.schemas.size}\n` +
                `\thasFilters: ${this.hasFilters}\n` +
                `\tparentFiltered:${parentFiltered}`;
        }
    }

    function getNormalizedType(type) {
        return (Array.isArray(type))
            ? { array: type[0] }
            : (typeof (type['type']) !== "undefined")
                ? type['type']
                : type;
    }
    const Metadata = {
        addField(metadata, index, name, type, descriptor) {
            if (index > 64) {
                throw new Error(`Can't define field '${name}'.\nSchema instances may only have up to 64 fields.`);
            }
            metadata[index] = Object.assign(metadata[index] || {}, // avoid overwriting previous field metadata (@owned / @deprecated)
            {
                type: getNormalizedType(type),
                index,
                name,
            });
            // create "descriptors" map
            Object.defineProperty(metadata, $descriptors, {
                value: metadata[$descriptors] || {},
                enumerable: false,
                configurable: true,
            });
            if (descriptor) {
                // for encoder
                metadata[$descriptors][name] = descriptor;
                metadata[$descriptors][`_${name}`] = {
                    value: undefined,
                    writable: true,
                    enumerable: false,
                    configurable: true,
                };
            }
            else {
                // for decoder
                metadata[$descriptors][name] = {
                    value: undefined,
                    writable: true,
                    enumerable: true,
                    configurable: true,
                };
            }
            // map -1 as last field index
            Object.defineProperty(metadata, $numFields, {
                value: index,
                enumerable: false,
                configurable: true
            });
            // map field name => index (non enumerable)
            Object.defineProperty(metadata, name, {
                value: index,
                enumerable: false,
                configurable: true,
            });
            // if child Ref/complex type, add to -4
            if (typeof (metadata[index].type) !== "string") {
                if (metadata[$refTypeFieldIndexes] === undefined) {
                    Object.defineProperty(metadata, $refTypeFieldIndexes, {
                        value: [],
                        enumerable: false,
                        configurable: true,
                    });
                }
                metadata[$refTypeFieldIndexes].push(index);
            }
        },
        setTag(metadata, fieldName, tag) {
            const index = metadata[fieldName];
            const field = metadata[index];
            // add 'tag' to the field
            field.tag = tag;
            if (!metadata[$viewFieldIndexes]) {
                // -2: all field indexes with "view" tag
                Object.defineProperty(metadata, $viewFieldIndexes, {
                    value: [],
                    enumerable: false,
                    configurable: true
                });
                // -3: field indexes by "view" tag
                Object.defineProperty(metadata, $fieldIndexesByViewTag, {
                    value: {},
                    enumerable: false,
                    configurable: true
                });
            }
            metadata[$viewFieldIndexes].push(index);
            if (!metadata[$fieldIndexesByViewTag][tag]) {
                metadata[$fieldIndexesByViewTag][tag] = [];
            }
            metadata[$fieldIndexesByViewTag][tag].push(index);
        },
        setFields(target, fields) {
            // for inheritance support
            const constructor = target.prototype.constructor;
            TypeContext.register(constructor);
            const parentClass = Object.getPrototypeOf(constructor);
            const parentMetadata = parentClass && parentClass[Symbol.metadata];
            const metadata = Metadata.initialize(constructor);
            // Use Schema's methods if not defined in the class
            if (!constructor[$track]) {
                constructor[$track] = Schema[$track];
            }
            if (!constructor[$encoder]) {
                constructor[$encoder] = Schema[$encoder];
            }
            if (!constructor[$decoder]) {
                constructor[$decoder] = Schema[$decoder];
            }
            if (!constructor.prototype.toJSON) {
                constructor.prototype.toJSON = Schema.prototype.toJSON;
            }
            //
            // detect index for this field, considering inheritance
            //
            let fieldIndex = metadata[$numFields] // current structure already has fields defined
                ?? (parentMetadata && parentMetadata[$numFields]) // parent structure has fields defined
                ?? -1; // no fields defined
            fieldIndex++;
            for (const field in fields) {
                const type = fields[field];
                // FIXME: this code is duplicated from @type() annotation
                const complexTypeKlass = (Array.isArray(type))
                    ? getType("array")
                    : (typeof (Object.keys(type)[0]) === "string") && getType(Object.keys(type)[0]);
                const childType = (complexTypeKlass)
                    ? Object.values(type)[0]
                    : getNormalizedType(type);
                Metadata.addField(metadata, fieldIndex, field, type, getPropertyDescriptor(`_${field}`, fieldIndex, childType, complexTypeKlass));
                fieldIndex++;
            }
            return target;
        },
        isDeprecated(metadata, field) {
            return metadata[field].deprecated === true;
        },
        init(klass) {
            //
            // Used only to initialize an empty Schema (Encoder#constructor)
            // TODO: remove/refactor this...
            //
            const metadata = {};
            klass[Symbol.metadata] = metadata;
            Object.defineProperty(metadata, $numFields, {
                value: 0,
                enumerable: false,
                configurable: true,
            });
        },
        initialize(constructor) {
            const parentClass = Object.getPrototypeOf(constructor);
            const parentMetadata = parentClass[Symbol.metadata];
            let metadata = constructor[Symbol.metadata] ?? Object.create(null);
            // make sure inherited classes have their own metadata object.
            if (parentClass !== Schema && metadata === parentMetadata) {
                metadata = Object.create(null);
                if (parentMetadata) {
                    //
                    // assign parent metadata to current
                    //
                    Object.setPrototypeOf(metadata, parentMetadata);
                    // $numFields
                    Object.defineProperty(metadata, $numFields, {
                        value: parentMetadata[$numFields],
                        enumerable: false,
                        configurable: true,
                        writable: true,
                    });
                    // $viewFieldIndexes / $fieldIndexesByViewTag
                    if (parentMetadata[$viewFieldIndexes] !== undefined) {
                        Object.defineProperty(metadata, $viewFieldIndexes, {
                            value: [...parentMetadata[$viewFieldIndexes]],
                            enumerable: false,
                            configurable: true,
                            writable: true,
                        });
                        Object.defineProperty(metadata, $fieldIndexesByViewTag, {
                            value: { ...parentMetadata[$fieldIndexesByViewTag] },
                            enumerable: false,
                            configurable: true,
                            writable: true,
                        });
                    }
                    // $refTypeFieldIndexes
                    if (parentMetadata[$refTypeFieldIndexes] !== undefined) {
                        Object.defineProperty(metadata, $refTypeFieldIndexes, {
                            value: [...parentMetadata[$refTypeFieldIndexes]],
                            enumerable: false,
                            configurable: true,
                            writable: true,
                        });
                    }
                    // $descriptors
                    Object.defineProperty(metadata, $descriptors, {
                        value: { ...parentMetadata[$descriptors] },
                        enumerable: false,
                        configurable: true,
                        writable: true,
                    });
                }
            }
            constructor[Symbol.metadata] = metadata;
            return metadata;
        },
        isValidInstance(klass) {
            return (klass.constructor[Symbol.metadata] &&
                Object.prototype.hasOwnProperty.call(klass.constructor[Symbol.metadata], $numFields));
        },
        getFields(klass) {
            const metadata = klass[Symbol.metadata];
            const fields = {};
            for (let i = 0; i <= metadata[$numFields]; i++) {
                fields[metadata[i].name] = metadata[i].type;
            }
            return fields;
        },
        hasViewTagAtIndex(metadata, index) {
            return metadata?.[$viewFieldIndexes]?.includes(index);
        }
    };

    function createChangeSet() {
        return { indexes: {}, operations: [] };
    }
    function setOperationAtIndex(changeSet, index) {
        const operationsIndex = changeSet.indexes[index];
        if (operationsIndex === undefined) {
            changeSet.indexes[index] = changeSet.operations.push(index) - 1;
        }
        else {
            changeSet.operations[operationsIndex] = index;
        }
    }
    function deleteOperationAtIndex(changeSet, index) {
        let operationsIndex = changeSet.indexes[index];
        if (operationsIndex === undefined) {
            //
            // if index is not found, we need to find the last operation
            // FIXME: this is not very efficient
            //
            // > See "should allow consecutive splices (same place)" tests
            //
            operationsIndex = Object.values(changeSet.indexes).at(-1);
            index = Object.entries(changeSet.indexes).find(([_, value]) => value === operationsIndex)?.[0];
        }
        changeSet.operations[operationsIndex] = undefined;
        delete changeSet.indexes[index];
    }
    function enqueueChangeTree(root, changeTree, changeSet, queueRootIndex = changeTree[changeSet].queueRootIndex) {
        if (!root) {
            // skip
            return;
        }
        else if (root[changeSet][queueRootIndex] !== changeTree) {
            changeTree[changeSet].queueRootIndex = root[changeSet].push(changeTree) - 1;
        }
    }
    class ChangeTree {
        constructor(ref) {
            /**
             * Whether this structure is parent of a filtered structure.
             */
            this.isFiltered = false;
            this.indexedOperations = {};
            //
            // TODO:
            //   try storing the index + operation per item.
            //   example: 1024 & 1025 => ADD, 1026 => DELETE
            //
            // => https://chatgpt.com/share/67107d0c-bc20-8004-8583-83b17dd7c196
            //
            this.changes = { indexes: {}, operations: [] };
            this.allChanges = { indexes: {}, operations: [] };
            /**
             * Is this a new instance? Used on ArraySchema to determine OPERATION.MOVE_AND_ADD operation.
             */
            this.isNew = true;
            this.ref = ref;
            //
            // Does this structure have "filters" declared?
            //
            const metadata = ref.constructor[Symbol.metadata];
            if (metadata?.[$viewFieldIndexes]) {
                this.allFilteredChanges = { indexes: {}, operations: [] };
                this.filteredChanges = { indexes: {}, operations: [] };
            }
        }
        setRoot(root) {
            this.root = root;
            this.checkIsFiltered(this.parent, this.parentIndex);
            // Recursively set root on child structures
            const metadata = this.ref.constructor[Symbol.metadata];
            if (metadata) {
                metadata[$refTypeFieldIndexes]?.forEach((index) => {
                    const field = metadata[index];
                    const value = this.ref[field.name];
                    value?.[$changes].setRoot(root);
                });
            }
            else if (this.ref[$childType] && typeof (this.ref[$childType]) !== "string") {
                // MapSchema / ArraySchema, etc.
                this.ref.forEach((value, key) => {
                    value[$changes].setRoot(root);
                });
            }
        }
        setParent(parent, root, parentIndex) {
            this.parent = parent;
            this.parentIndex = parentIndex;
            // avoid setting parents with empty `root`
            if (!root) {
                return;
            }
            // skip if parent is already set
            if (root !== this.root) {
                this.root = root;
                this.checkIsFiltered(parent, parentIndex);
            }
            else {
                root.add(this);
            }
            // assign same parent on child structures
            const metadata = this.ref.constructor[Symbol.metadata];
            if (metadata) {
                metadata[$refTypeFieldIndexes]?.forEach((index) => {
                    const field = metadata[index];
                    const value = this.ref[field.name];
                    value?.[$changes].setParent(this.ref, root, index);
                });
            }
            else if (this.ref[$childType] && typeof (this.ref[$childType]) !== "string") {
                // MapSchema / ArraySchema, etc.
                this.ref.forEach((value, key) => {
                    value[$changes].setParent(this.ref, root, this.indexes[key] ?? key);
                });
            }
        }
        forEachChild(callback) {
            //
            // assign same parent on child structures
            //
            const metadata = this.ref.constructor[Symbol.metadata];
            if (metadata) {
                metadata[$refTypeFieldIndexes]?.forEach((index) => {
                    const field = metadata[index];
                    const value = this.ref[field.name];
                    if (value) {
                        callback(value[$changes], index);
                    }
                });
            }
            else if (this.ref[$childType] && typeof (this.ref[$childType]) !== "string") {
                // MapSchema / ArraySchema, etc.
                this.ref.forEach((value, key) => {
                    callback(value[$changes], this.indexes[key] ?? key);
                });
            }
        }
        operation(op) {
            // operations without index use negative values to represent them
            // this is checked during .encode() time.
            if (this.filteredChanges !== undefined) {
                this.filteredChanges.operations.push(-op);
                enqueueChangeTree(this.root, this, 'filteredChanges');
            }
            else {
                this.changes.operations.push(-op);
                enqueueChangeTree(this.root, this, 'changes');
            }
        }
        change(index, operation = exports.OPERATION.ADD) {
            const metadata = this.ref.constructor[Symbol.metadata];
            const isFiltered = this.isFiltered || (metadata?.[index]?.tag !== undefined);
            const changeSet = (isFiltered)
                ? this.filteredChanges
                : this.changes;
            const previousOperation = this.indexedOperations[index];
            if (!previousOperation || previousOperation === exports.OPERATION.DELETE) {
                const op = (!previousOperation)
                    ? operation
                    : (previousOperation === exports.OPERATION.DELETE)
                        ? exports.OPERATION.DELETE_AND_ADD
                        : operation;
                //
                // TODO: are DELETE operations being encoded as ADD here ??
                //
                this.indexedOperations[index] = op;
            }
            setOperationAtIndex(changeSet, index);
            if (isFiltered) {
                setOperationAtIndex(this.allFilteredChanges, index);
                if (this.root) {
                    enqueueChangeTree(this.root, this, 'filteredChanges');
                    enqueueChangeTree(this.root, this, 'allFilteredChanges');
                }
            }
            else {
                setOperationAtIndex(this.allChanges, index);
                enqueueChangeTree(this.root, this, 'changes');
            }
        }
        shiftChangeIndexes(shiftIndex) {
            //
            // Used only during:
            //
            // - ArraySchema#unshift()
            //
            const changeSet = (this.isFiltered)
                ? this.filteredChanges
                : this.changes;
            const newIndexedOperations = {};
            const newIndexes = {};
            for (const index in this.indexedOperations) {
                newIndexedOperations[Number(index) + shiftIndex] = this.indexedOperations[index];
                newIndexes[Number(index) + shiftIndex] = changeSet.indexes[index];
            }
            this.indexedOperations = newIndexedOperations;
            changeSet.indexes = newIndexes;
            changeSet.operations = changeSet.operations.map((index) => index + shiftIndex);
        }
        shiftAllChangeIndexes(shiftIndex, startIndex = 0) {
            //
            // Used only during:
            //
            // - ArraySchema#splice()
            //
            if (this.filteredChanges !== undefined) {
                this._shiftAllChangeIndexes(shiftIndex, startIndex, this.allFilteredChanges);
                this._shiftAllChangeIndexes(shiftIndex, startIndex, this.allChanges);
            }
            else {
                this._shiftAllChangeIndexes(shiftIndex, startIndex, this.allChanges);
            }
        }
        _shiftAllChangeIndexes(shiftIndex, startIndex = 0, changeSet) {
            const newIndexes = {};
            let newKey = 0;
            for (const key in changeSet.indexes) {
                newIndexes[newKey++] = changeSet.indexes[key];
            }
            changeSet.indexes = newIndexes;
            for (let i = 0; i < changeSet.operations.length; i++) {
                const index = changeSet.operations[i];
                if (index > startIndex) {
                    changeSet.operations[i] = index + shiftIndex;
                }
            }
        }
        indexedOperation(index, operation, allChangesIndex = index) {
            this.indexedOperations[index] = operation;
            if (this.filteredChanges !== undefined) {
                setOperationAtIndex(this.allFilteredChanges, allChangesIndex);
                setOperationAtIndex(this.filteredChanges, index);
                enqueueChangeTree(this.root, this, 'filteredChanges');
            }
            else {
                setOperationAtIndex(this.allChanges, allChangesIndex);
                setOperationAtIndex(this.changes, index);
                enqueueChangeTree(this.root, this, 'changes');
            }
        }
        getType(index) {
            if (Metadata.isValidInstance(this.ref)) {
                const metadata = this.ref.constructor[Symbol.metadata];
                return metadata[index].type;
            }
            else {
                //
                // Get the child type from parent structure.
                // - ["string"] => "string"
                // - { map: "string" } => "string"
                // - { set: "string" } => "string"
                //
                return this.ref[$childType];
            }
        }
        getChange(index) {
            return this.indexedOperations[index];
        }
        //
        // used during `.encode()`
        //
        getValue(index, isEncodeAll = false) {
            //
            // `isEncodeAll` param is only used by ArraySchema
            //
            return this.ref[$getByIndex](index, isEncodeAll);
        }
        delete(index, operation, allChangesIndex = index) {
            if (index === undefined) {
                try {
                    throw new Error(`@colyseus/schema ${this.ref.constructor.name}: trying to delete non-existing index '${index}'`);
                }
                catch (e) {
                    console.warn(e);
                }
                return;
            }
            const changeSet = (this.filteredChanges !== undefined)
                ? this.filteredChanges
                : this.changes;
            this.indexedOperations[index] = operation ?? exports.OPERATION.DELETE;
            setOperationAtIndex(changeSet, index);
            deleteOperationAtIndex(this.allChanges, allChangesIndex);
            const previousValue = this.getValue(index);
            // remove `root` reference
            if (previousValue && previousValue[$changes]) {
                //
                // FIXME: this.root is "undefined"
                //
                // This method is being called at decoding time when a DELETE operation is found.
                //
                // - This is due to using the concrete Schema class at decoding time.
                // - "Reflected" structures do not have this problem.
                //
                // (The property descriptors should NOT be used at decoding time. only at encoding time.)
                //
                this.root?.remove(previousValue[$changes]);
            }
            //
            // FIXME: this is looking a ugly and repeated
            //
            if (this.filteredChanges !== undefined) {
                deleteOperationAtIndex(this.allFilteredChanges, allChangesIndex);
                enqueueChangeTree(this.root, this, 'filteredChanges');
            }
            else {
                enqueueChangeTree(this.root, this, 'changes');
            }
            return previousValue;
        }
        endEncode(changeSetName) {
            this.indexedOperations = {};
            // clear changeset
            this[changeSetName].indexes = {};
            this[changeSetName].operations.length = 0;
            this[changeSetName].queueRootIndex = undefined;
            // ArraySchema and MapSchema have a custom "encode end" method
            this.ref[$onEncodeEnd]?.();
            // Not a new instance anymore
            this.isNew = false;
        }
        discard(discardAll = false) {
            //
            // > MapSchema:
            //      Remove cached key to ensure ADD operations is unsed instead of
            //      REPLACE in case same key is used on next patches.
            //
            this.ref[$onEncodeEnd]?.();
            this.indexedOperations = {};
            this.changes.indexes = {};
            this.changes.operations.length = 0;
            this.changes.queueRootIndex = undefined;
            if (this.filteredChanges !== undefined) {
                this.filteredChanges.indexes = {};
                this.filteredChanges.operations.length = 0;
                this.filteredChanges.queueRootIndex = undefined;
            }
            if (discardAll) {
                this.allChanges.indexes = {};
                this.allChanges.operations.length = 0;
                if (this.allFilteredChanges !== undefined) {
                    this.allFilteredChanges.indexes = {};
                    this.allFilteredChanges.operations.length = 0;
                }
                // remove children references
                this.forEachChild((changeTree, _) => this.root?.remove(changeTree));
            }
        }
        /**
         * Recursively discard all changes from this, and child structures.
         */
        discardAll() {
            const keys = Object.keys(this.indexedOperations);
            for (let i = 0, len = keys.length; i < len; i++) {
                const value = this.getValue(Number(keys[i]));
                if (value && value[$changes]) {
                    value[$changes].discardAll();
                }
            }
            this.discard();
        }
        ensureRefId() {
            // skip if refId is already set.
            if (this.refId !== undefined) {
                return;
            }
            this.refId = this.root.getNextUniqueId();
        }
        get changed() {
            return (Object.entries(this.indexedOperations).length > 0);
        }
        checkIsFiltered(parent, parentIndex) {
            const isNewChangeTree = this.root.add(this);
            if (this.root.types.hasFilters) {
                //
                // At Schema initialization, the "root" structure might not be available
                // yet, as it only does once the "Encoder" has been set up.
                //
                // So the "parent" may be already set without a "root".
                //
                this._checkFilteredByParent(parent, parentIndex);
                if (this.filteredChanges !== undefined) {
                    enqueueChangeTree(this.root, this, 'filteredChanges');
                    if (isNewChangeTree) {
                        this.root.allFilteredChanges.push(this);
                    }
                }
            }
            if (!this.isFiltered) {
                enqueueChangeTree(this.root, this, 'changes');
                if (isNewChangeTree) {
                    this.root.allChanges.push(this);
                }
            }
        }
        _checkFilteredByParent(parent, parentIndex) {
            // skip if parent is not set
            if (!parent) {
                return;
            }
            //
            // ArraySchema | MapSchema - get the child type
            // (if refType is typeof string, the parentFiltered[key] below will always be invalid)
            //
            const refType = Metadata.isValidInstance(this.ref)
                ? this.ref.constructor
                : this.ref[$childType];
            let parentChangeTree;
            let parentIsCollection = !Metadata.isValidInstance(parent);
            if (parentIsCollection) {
                parentChangeTree = parent[$changes];
                parent = parentChangeTree.parent;
                parentIndex = parentChangeTree.parentIndex;
            }
            else {
                parentChangeTree = parent[$changes];
            }
            const parentConstructor = parent.constructor;
            let key = `${this.root.types.getTypeId(refType)}`;
            if (parentConstructor) {
                key += `-${this.root.types.schemas.get(parentConstructor)}`;
            }
            key += `-${parentIndex}`;
            const fieldHasViewTag = Metadata.hasViewTagAtIndex(parentConstructor?.[Symbol.metadata], parentIndex);
            this.isFiltered = parent[$changes].isFiltered // in case parent is already filtered
                || this.root.types.parentFiltered[key]
                || fieldHasViewTag;
            //
            // "isFiltered" may not be imedialely available during `change()` due to the instance not being attached to the root yet.
            // when it's available, we need to enqueue the "changes" changeset into the "filteredChanges" changeset.
            //
            if (this.isFiltered) {
                this.isVisibilitySharedWithParent = (parentChangeTree.isFiltered &&
                    typeof (refType) !== "string" &&
                    !fieldHasViewTag &&
                    parentIsCollection);
                if (!this.filteredChanges) {
                    this.filteredChanges = createChangeSet();
                    this.allFilteredChanges = createChangeSet();
                }
                if (this.changes.operations.length > 0) {
                    this.changes.operations.forEach((index) => setOperationAtIndex(this.filteredChanges, index));
                    this.allChanges.operations.forEach((index) => setOperationAtIndex(this.allFilteredChanges, index));
                    this.changes = createChangeSet();
                    this.allChanges = createChangeSet();
                }
            }
        }
    }

    function encodeValue(encoder, bytes, type, value, operation, it) {
        if (typeof (type) === "string") {
            encode[type]?.(bytes, value, it);
        }
        else if (type[Symbol.metadata] !== undefined) {
            //
            // Encode refId for this instance.
            // The actual instance is going to be encoded on next `changeTree` iteration.
            //
            encode.number(bytes, value[$changes].refId, it);
            // Try to encode inherited TYPE_ID if it's an ADD operation.
            if ((operation & exports.OPERATION.ADD) === exports.OPERATION.ADD) {
                encoder.tryEncodeTypeId(bytes, type, value.constructor, it);
            }
        }
        else {
            //
            // Encode refId for this instance.
            // The actual instance is going to be encoded on next `changeTree` iteration.
            //
            encode.number(bytes, value[$changes].refId, it);
        }
    }
    /**
     * Used for Schema instances.
     * @private
     */
    const encodeSchemaOperation = function (encoder, bytes, changeTree, index, operation, it, _, __, metadata) {
        // "compress" field index + operation
        bytes[it.offset++] = (index | operation) & 255;
        // Do not encode value for DELETE operations
        if (operation === exports.OPERATION.DELETE) {
            return;
        }
        const ref = changeTree.ref;
        const field = metadata[index];
        // TODO: inline this function call small performance gain
        encodeValue(encoder, bytes, metadata[index].type, ref[field.name], operation, it);
    };
    /**
     * Used for collections (MapSchema, CollectionSchema, SetSchema)
     * @private
     */
    const encodeKeyValueOperation = function (encoder, bytes, changeTree, index, operation, it) {
        // encode operation
        bytes[it.offset++] = operation & 255;
        // custom operations
        if (operation === exports.OPERATION.CLEAR) {
            return;
        }
        // encode index
        encode.number(bytes, index, it);
        // Do not encode value for DELETE operations
        if (operation === exports.OPERATION.DELETE) {
            return;
        }
        const ref = changeTree.ref;
        //
        // encode "alias" for dynamic fields (maps)
        //
        if ((operation & exports.OPERATION.ADD) === exports.OPERATION.ADD) { // ADD or DELETE_AND_ADD
            if (typeof (ref['set']) === "function") {
                //
                // MapSchema dynamic key
                //
                const dynamicIndex = changeTree.ref['$indexes'].get(index);
                encode.string(bytes, dynamicIndex, it);
            }
        }
        const type = ref[$childType];
        const value = ref[$getByIndex](index);
        // try { throw new Error(); } catch (e) {
        //     // only print if not coming from Reflection.ts
        //     if (!e.stack.includes("src/Reflection.ts")) {
        //         console.log("encodeKeyValueOperation -> ", {
        //             ref: changeTree.ref.constructor.name,
        //             field,
        //             operation: OPERATION[operation],
        //             value: value?.toJSON(),
        //             items: ref.toJSON(),
        //         });
        //     }
        // }
        // TODO: inline this function call small performance gain
        encodeValue(encoder, bytes, type, value, operation, it);
    };
    /**
     * Used for collections (MapSchema, ArraySchema, etc.)
     * @private
     */
    const encodeArray = function (encoder, bytes, changeTree, field, operation, it, isEncodeAll, hasView) {
        const ref = changeTree.ref;
        const useOperationByRefId = hasView && changeTree.isFiltered && (typeof (changeTree.getType(field)) !== "string");
        let refOrIndex;
        if (useOperationByRefId) {
            refOrIndex = ref['tmpItems'][field][$changes].refId;
            if (operation === exports.OPERATION.DELETE) {
                operation = exports.OPERATION.DELETE_BY_REFID;
            }
            else if (operation === exports.OPERATION.ADD) {
                operation = exports.OPERATION.ADD_BY_REFID;
            }
        }
        else {
            refOrIndex = field;
        }
        // encode operation
        bytes[it.offset++] = operation & 255;
        // custom operations
        if (operation === exports.OPERATION.CLEAR ||
            operation === exports.OPERATION.REVERSE) {
            return;
        }
        // encode index
        encode.number(bytes, refOrIndex, it);
        // Do not encode value for DELETE operations
        if (operation === exports.OPERATION.DELETE || operation === exports.OPERATION.DELETE_BY_REFID) {
            return;
        }
        const type = changeTree.getType(field);
        const value = changeTree.getValue(field, isEncodeAll);
        // console.log({ type, field, value });
        // console.log("encodeArray -> ", {
        //     ref: changeTree.ref.constructor.name,
        //     field,
        //     operation: OPERATION[operation],
        //     value: value?.toJSON(),
        //     items: ref.toJSON(),
        // });
        // TODO: inline this function call small performance gain
        encodeValue(encoder, bytes, type, value, operation, it);
    };

    const DEFINITION_MISMATCH = -1;
    function decodeValue(decoder, operation, ref, index, type, bytes, it, allChanges) {
        const $root = decoder.root;
        const previousValue = ref[$getByIndex](index);
        let value;
        if ((operation & exports.OPERATION.DELETE) === exports.OPERATION.DELETE) {
            // Flag `refId` for garbage collection.
            const previousRefId = $root.refIds.get(previousValue);
            if (previousRefId !== undefined) {
                $root.removeRef(previousRefId);
            }
            //
            // Delete operations
            //
            if (operation !== exports.OPERATION.DELETE_AND_ADD) {
                ref[$deleteByIndex](index);
            }
            value = undefined;
        }
        if (operation === exports.OPERATION.DELETE) ;
        else if (Schema.is(type)) {
            const refId = decode.number(bytes, it);
            value = $root.refs.get(refId);
            if ((operation & exports.OPERATION.ADD) === exports.OPERATION.ADD) {
                const childType = decoder.getInstanceType(bytes, it, type);
                if (!value) {
                    value = decoder.createInstanceOfType(childType);
                }
                $root.addRef(refId, value, (value !== previousValue || // increment ref count if value has changed
                    (operation === exports.OPERATION.DELETE_AND_ADD && value === previousValue) // increment ref count if the same instance is being added again
                ));
            }
        }
        else if (typeof (type) === "string") {
            //
            // primitive value (number, string, boolean, etc)
            //
            value = decode[type](bytes, it);
        }
        else {
            const typeDef = getType(Object.keys(type)[0]);
            const refId = decode.number(bytes, it);
            const valueRef = ($root.refs.has(refId))
                ? previousValue || $root.refs.get(refId)
                : new typeDef.constructor();
            value = valueRef.clone(true);
            value[$childType] = Object.values(type)[0]; // cache childType for ArraySchema and MapSchema
            if (previousValue) {
                let previousRefId = $root.refIds.get(previousValue);
                if (previousRefId !== undefined && refId !== previousRefId) {
                    //
                    // enqueue onRemove if structure has been replaced.
                    //
                    const entries = previousValue.entries();
                    let iter;
                    while ((iter = entries.next()) && !iter.done) {
                        const [key, value] = iter.value;
                        // if value is a schema, remove its reference
                        if (typeof (value) === "object") {
                            previousRefId = $root.refIds.get(value);
                            $root.removeRef(previousRefId);
                        }
                        allChanges.push({
                            ref: previousValue,
                            refId: previousRefId,
                            op: exports.OPERATION.DELETE,
                            field: key,
                            value: undefined,
                            previousValue: value,
                        });
                    }
                }
            }
            $root.addRef(refId, value, (valueRef !== previousValue ||
                (operation === exports.OPERATION.DELETE_AND_ADD && valueRef === previousValue)));
        }
        return { value, previousValue };
    }
    const decodeSchemaOperation = function (decoder, bytes, it, ref, allChanges) {
        const first_byte = bytes[it.offset++];
        const metadata = ref.constructor[Symbol.metadata];
        // "compressed" index + operation
        const operation = (first_byte >> 6) << 6;
        const index = first_byte % (operation || 255);
        // skip early if field is not defined
        const field = metadata[index];
        if (field === undefined) {
            console.warn("@colyseus/schema: field not defined at", { index, ref: ref.constructor.name, metadata });
            return DEFINITION_MISMATCH;
        }
        const { value, previousValue } = decodeValue(decoder, operation, ref, index, field.type, bytes, it, allChanges);
        if (value !== null && value !== undefined) {
            ref[field.name] = value;
        }
        // add change
        if (previousValue !== value) {
            allChanges.push({
                ref,
                refId: decoder.currentRefId,
                op: operation,
                field: field.name,
                value,
                previousValue,
            });
        }
    };
    const decodeKeyValueOperation = function (decoder, bytes, it, ref, allChanges) {
        // "uncompressed" index + operation (array/map items)
        const operation = bytes[it.offset++];
        if (operation === exports.OPERATION.CLEAR) {
            //
            // When decoding:
            // - enqueue items for DELETE callback.
            // - flag child items for garbage collection.
            //
            decoder.removeChildRefs(ref, allChanges);
            ref.clear();
            return;
        }
        const index = decode.number(bytes, it);
        const type = ref[$childType];
        let dynamicIndex;
        if ((operation & exports.OPERATION.ADD) === exports.OPERATION.ADD) { // ADD or DELETE_AND_ADD
            if (typeof (ref['set']) === "function") {
                dynamicIndex = decode.string(bytes, it); // MapSchema
                ref['setIndex'](index, dynamicIndex);
            }
            else {
                dynamicIndex = index; // ArraySchema
            }
        }
        else {
            // get dynamic index from "ref"
            dynamicIndex = ref['getIndex'](index);
        }
        const { value, previousValue } = decodeValue(decoder, operation, ref, index, type, bytes, it, allChanges);
        if (value !== null && value !== undefined) {
            if (typeof (ref['set']) === "function") {
                // MapSchema
                ref['$items'].set(dynamicIndex, value);
            }
            else if (typeof (ref['$setAt']) === "function") {
                // ArraySchema
                ref['$setAt'](index, value, operation);
            }
            else if (typeof (ref['add']) === "function") {
                // CollectionSchema && SetSchema
                const index = ref.add(value);
                if (typeof (index) === "number") {
                    ref['setIndex'](index, index);
                }
            }
        }
        // add change
        if (previousValue !== value) {
            allChanges.push({
                ref,
                refId: decoder.currentRefId,
                op: operation,
                field: "", // FIXME: remove this
                dynamicIndex,
                value,
                previousValue,
            });
        }
    };
    const decodeArray = function (decoder, bytes, it, ref, allChanges) {
        // "uncompressed" index + operation (array/map items)
        let operation = bytes[it.offset++];
        let index;
        if (operation === exports.OPERATION.CLEAR) {
            //
            // When decoding:
            // - enqueue items for DELETE callback.
            // - flag child items for garbage collection.
            //
            decoder.removeChildRefs(ref, allChanges);
            ref.clear();
            return;
        }
        else if (operation === exports.OPERATION.REVERSE) {
            ref.reverse();
            return;
        }
        else if (operation === exports.OPERATION.DELETE_BY_REFID) {
            // TODO: refactor here, try to follow same flow as below
            const refId = decode.number(bytes, it);
            const previousValue = decoder.root.refs.get(refId);
            index = ref.findIndex((value) => value === previousValue);
            ref[$deleteByIndex](index);
            allChanges.push({
                ref,
                refId: decoder.currentRefId,
                op: exports.OPERATION.DELETE,
                field: "", // FIXME: remove this
                dynamicIndex: index,
                value: undefined,
                previousValue,
            });
            return;
        }
        else if (operation === exports.OPERATION.ADD_BY_REFID) {
            const refId = decode.number(bytes, it);
            const itemByRefId = decoder.root.refs.get(refId);
            // if item already exists, use existing index
            if (itemByRefId) {
                index = ref.findIndex((value) => value === itemByRefId);
            }
            // fallback to use last index
            if (index === -1 || index === undefined) {
                index = ref.length;
            }
        }
        else {
            index = decode.number(bytes, it);
        }
        const type = ref[$childType];
        let dynamicIndex = index;
        const { value, previousValue } = decodeValue(decoder, operation, ref, index, type, bytes, it, allChanges);
        if (value !== null && value !== undefined &&
            value !== previousValue // avoid setting same value twice (if index === 0 it will result in a "unshift" for ArraySchema)
        ) {
            // ArraySchema
            ref['$setAt'](index, value, operation);
        }
        // add change
        if (previousValue !== value) {
            allChanges.push({
                ref,
                refId: decoder.currentRefId,
                op: operation,
                field: "", // FIXME: remove this
                dynamicIndex,
                value,
                previousValue,
            });
        }
    };

    class EncodeSchemaError extends Error {
    }
    function assertType(value, type, klass, field) {
        let typeofTarget;
        let allowNull = false;
        switch (type) {
            case "number":
            case "int8":
            case "uint8":
            case "int16":
            case "uint16":
            case "int32":
            case "uint32":
            case "int64":
            case "uint64":
            case "float32":
            case "float64":
                typeofTarget = "number";
                if (isNaN(value)) {
                    console.log(`trying to encode "NaN" in ${klass.constructor.name}#${field}`);
                }
                break;
            case "bigint64":
            case "biguint64":
                typeofTarget = "bigint";
                break;
            case "string":
                typeofTarget = "string";
                allowNull = true;
                break;
            case "boolean":
                // boolean is always encoded as true/false based on truthiness
                return;
            default:
                // skip assertion for custom types
                // TODO: allow custom types to define their own assertions
                return;
        }
        if (typeof (value) !== typeofTarget && (!allowNull || (allowNull && value !== null))) {
            let foundValue = `'${JSON.stringify(value)}'${(value && value.constructor && ` (${value.constructor.name})`) || ''}`;
            throw new EncodeSchemaError(`a '${typeofTarget}' was expected, but ${foundValue} was provided in ${klass.constructor.name}#${field}`);
        }
    }
    function assertInstanceType(value, type, instance, field) {
        if (!(value instanceof type)) {
            throw new EncodeSchemaError(`a '${type.name}' was expected, but '${value && value.constructor.name}' was provided in ${instance.constructor.name}#${field}`);
        }
    }

    var _a$4, _b$4;
    const DEFAULT_SORT = (a, b) => {
        const A = a.toString();
        const B = b.toString();
        if (A < B)
            return -1;
        else if (A > B)
            return 1;
        else
            return 0;
    };
    class ArraySchema {
        static { this[_a$4] = encodeArray; }
        static { this[_b$4] = decodeArray; }
        /**
         * Determine if a property must be filtered.
         * - If returns false, the property is NOT going to be encoded.
         * - If returns true, the property is going to be encoded.
         *
         * Encoding with "filters" happens in two steps:
         * - First, the encoder iterates over all "not owned" properties and encodes them.
         * - Then, the encoder iterates over all "owned" properties per instance and encodes them.
         */
        static [(_a$4 = $encoder, _b$4 = $decoder, $filter)](ref, index, view) {
            return (!view ||
                typeof (ref[$childType]) === "string" ||
                view.isChangeTreeVisible(ref['tmpItems'][index]?.[$changes]));
        }
        static is(type) {
            return (
            // type format: ["string"]
            Array.isArray(type) ||
                // type format: { array: "string" }
                (type['array'] !== undefined));
        }
        static from(iterable) {
            return new ArraySchema(...Array.from(iterable));
        }
        constructor(...items) {
            this.items = [];
            this.tmpItems = [];
            this.deletedIndexes = {};
            this.isMovingItems = false;
            Object.defineProperty(this, $childType, {
                value: undefined,
                enumerable: false,
                writable: true,
                configurable: true,
            });
            const proxy = new Proxy(this, {
                get: (obj, prop) => {
                    if (typeof (prop) !== "symbol" &&
                        // FIXME: d8 accuses this as low performance
                        !isNaN(prop) // https://stackoverflow.com/a/175787/892698
                    ) {
                        return this.items[prop];
                    }
                    else {
                        return Reflect.get(obj, prop);
                    }
                },
                set: (obj, key, setValue) => {
                    if (typeof (key) !== "symbol" && !isNaN(key)) {
                        if (setValue === undefined || setValue === null) {
                            obj.$deleteAt(key);
                        }
                        else {
                            if (setValue[$changes]) {
                                assertInstanceType(setValue, obj[$childType], obj, key);
                                const previousValue = obj.items[key];
                                if (!obj.isMovingItems) {
                                    obj.$changeAt(Number(key), setValue);
                                }
                                else {
                                    if (previousValue !== undefined) {
                                        if (setValue[$changes].isNew) {
                                            obj[$changes].indexedOperation(Number(key), exports.OPERATION.MOVE_AND_ADD);
                                        }
                                        else {
                                            if ((obj[$changes].getChange(Number(key)) & exports.OPERATION.DELETE) === exports.OPERATION.DELETE) {
                                                obj[$changes].indexedOperation(Number(key), exports.OPERATION.DELETE_AND_MOVE);
                                            }
                                            else {
                                                obj[$changes].indexedOperation(Number(key), exports.OPERATION.MOVE);
                                            }
                                        }
                                    }
                                    else if (setValue[$changes].isNew) {
                                        obj[$changes].indexedOperation(Number(key), exports.OPERATION.ADD);
                                    }
                                    setValue[$changes].setParent(this, obj[$changes].root, key);
                                }
                                if (previousValue !== undefined) {
                                    // remove root reference from previous value
                                    previousValue[$changes].root?.remove(previousValue[$changes]);
                                }
                            }
                            else {
                                obj.$changeAt(Number(key), setValue);
                            }
                            obj.items[key] = setValue;
                            obj.tmpItems[key] = setValue;
                        }
                        return true;
                    }
                    else {
                        return Reflect.set(obj, key, setValue);
                    }
                },
                deleteProperty: (obj, prop) => {
                    if (typeof (prop) === "number") {
                        obj.$deleteAt(prop);
                    }
                    else {
                        delete obj[prop];
                    }
                    return true;
                },
                has: (obj, key) => {
                    if (typeof (key) !== "symbol" && !isNaN(Number(key))) {
                        return Reflect.has(this.items, key);
                    }
                    return Reflect.has(obj, key);
                }
            });
            this[$changes] = new ChangeTree(proxy);
            this[$changes].indexes = {};
            if (items.length > 0) {
                this.push(...items);
            }
            return proxy;
        }
        set length(newLength) {
            if (newLength === 0) {
                this.clear();
            }
            else if (newLength < this.items.length) {
                this.splice(newLength, this.length - newLength);
            }
            else {
                console.warn("ArraySchema: can't set .length to a higher value than its length.");
            }
        }
        get length() {
            return this.items.length;
        }
        push(...values) {
            let length = this.tmpItems.length;
            const changeTree = this[$changes];
            // values.forEach((value, i) => {
            for (let i = 0, l = values.length; i < values.length; i++, length++) {
                const value = values[i];
                if (value === undefined || value === null) {
                    // skip null values
                    return;
                }
                else if (typeof (value) === "object" && this[$childType]) {
                    assertInstanceType(value, this[$childType], this, i);
                    // TODO: move value[$changes]?.setParent() to this block.
                }
                changeTree.indexedOperation(length, exports.OPERATION.ADD, this.items.length);
                this.items.push(value);
                this.tmpItems.push(value);
                //
                // set value's parent after the value is set
                // (to avoid encoding "refId" operations before parent's "ADD" operation)
                //
                value[$changes]?.setParent(this, changeTree.root, length);
            }
            //     length++;
            // });
            return length;
        }
        /**
         * Removes the last element from an array and returns it.
         */
        pop() {
            let index = -1;
            // find last non-undefined index
            for (let i = this.tmpItems.length - 1; i >= 0; i--) {
                // if (this.tmpItems[i] !== undefined) {
                if (this.deletedIndexes[i] !== true) {
                    index = i;
                    break;
                }
            }
            if (index < 0) {
                return undefined;
            }
            this[$changes].delete(index, undefined, this.items.length - 1);
            this.deletedIndexes[index] = true;
            return this.items.pop();
        }
        at(index) {
            // Allow negative indexing from the end
            if (index < 0)
                index += this.length;
            return this.items[index];
        }
        // encoding only
        $changeAt(index, value) {
            if (value === undefined || value === null) {
                console.error("ArraySchema items cannot be null nor undefined; Use `deleteAt(index)` instead.");
                return;
            }
            // skip if the value is the same as cached.
            if (this.items[index] === value) {
                return;
            }
            const operation = (this.items[index] !== undefined)
                ? typeof (value) === "object"
                    ? exports.OPERATION.DELETE_AND_ADD // schema child
                    : exports.OPERATION.REPLACE // primitive
                : exports.OPERATION.ADD;
            const changeTree = this[$changes];
            changeTree.change(index, operation);
            //
            // set value's parent after the value is set
            // (to avoid encoding "refId" operations before parent's "ADD" operation)
            //
            value[$changes]?.setParent(this, changeTree.root, index);
        }
        // encoding only
        $deleteAt(index, operation) {
            this[$changes].delete(index, operation);
        }
        // decoding only
        $setAt(index, value, operation) {
            if (index === 0 &&
                operation === exports.OPERATION.ADD &&
                this.items[index] !== undefined) {
                // handle decoding unshift
                this.items.unshift(value);
            }
            else if (operation === exports.OPERATION.DELETE_AND_MOVE) {
                this.items.splice(index, 1);
                this.items[index] = value;
            }
            else {
                this.items[index] = value;
            }
        }
        clear() {
            // skip if already clear
            if (this.items.length === 0) {
                return;
            }
            // discard previous operations.
            const changeTree = this[$changes];
            // discard children
            changeTree.forEachChild((changeTree, _) => {
                changeTree.discard(true);
                //
                // TODO: add tests with instance sharing + .clear()
                // FIXME: this.root? is required because it is being called at decoding time.
                //
                // TODO: do not use [$changes] at decoding time.
                //
                const root = changeTree.root;
                if (root !== undefined) {
                    root.removeChangeFromChangeSet("changes", changeTree);
                    root.removeChangeFromChangeSet("allChanges", changeTree);
                    root.removeChangeFromChangeSet("allFilteredChanges", changeTree);
                }
            });
            changeTree.discard(true);
            changeTree.operation(exports.OPERATION.CLEAR);
            this.items.length = 0;
            this.tmpItems.length = 0;
        }
        /**
         * Combines two or more arrays.
         * @param items Additional items to add to the end of array1.
         */
        // @ts-ignore
        concat(...items) {
            return new ArraySchema(...this.items.concat(...items));
        }
        /**
         * Adds all the elements of an array separated by the specified separator string.
         * @param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.
         */
        join(separator) {
            return this.items.join(separator);
        }
        /**
         * Reverses the elements in an Array.
         */
        // @ts-ignore
        reverse() {
            this[$changes].operation(exports.OPERATION.REVERSE);
            this.items.reverse();
            this.tmpItems.reverse();
            return this;
        }
        /**
         * Removes the first element from an array and returns it.
         */
        shift() {
            if (this.items.length === 0) {
                return undefined;
            }
            // const index = Number(Object.keys(changeTree.indexes)[0]);
            const changeTree = this[$changes];
            const index = this.tmpItems.findIndex(item => item === this.items[0]);
            const allChangesIndex = this.items.findIndex(item => item === this.items[0]);
            changeTree.delete(index, exports.OPERATION.DELETE, allChangesIndex);
            changeTree.shiftAllChangeIndexes(-1, allChangesIndex);
            // this.deletedIndexes[index] = true;
            return this.items.shift();
        }
        /**
         * Returns a section of an array.
         * @param start The beginning of the specified portion of the array.
         * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.
         */
        slice(start, end) {
            const sliced = new ArraySchema();
            sliced.push(...this.items.slice(start, end));
            return sliced;
        }
        /**
         * Sorts an array.
         * @param compareFn Function used to determine the order of the elements. It is expected to return
         * a negative value if first argument is less than second argument, zero if they're equal and a positive
         * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.
         * ```ts
         * [11,2,22,1].sort((a, b) => a - b)
         * ```
         */
        sort(compareFn = DEFAULT_SORT) {
            this.isMovingItems = true;
            const changeTree = this[$changes];
            const sortedItems = this.items.sort(compareFn);
            // wouldn't OPERATION.MOVE make more sense here?
            sortedItems.forEach((_, i) => changeTree.change(i, exports.OPERATION.REPLACE));
            this.tmpItems.sort(compareFn);
            this.isMovingItems = false;
            return this;
        }
        /**
         * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.
         * @param start The zero-based location in the array from which to start removing elements.
         * @param deleteCount The number of elements to remove.
         * @param insertItems Elements to insert into the array in place of the deleted elements.
         */
        splice(start, deleteCount, ...insertItems) {
            const changeTree = this[$changes];
            const itemsLength = this.items.length;
            const tmpItemsLength = this.tmpItems.length;
            const insertCount = insertItems.length;
            // build up-to-date list of indexes, excluding removed values.
            const indexes = [];
            for (let i = 0; i < tmpItemsLength; i++) {
                if (this.deletedIndexes[i] !== true) {
                    indexes.push(i);
                }
            }
            if (itemsLength > start) {
                // if deleteCount is not provided, delete all items from start to end
                if (deleteCount === undefined) {
                    deleteCount = itemsLength - start;
                }
                //
                // delete operations at correct index
                //
                for (let i = start; i < start + deleteCount; i++) {
                    const index = indexes[i];
                    changeTree.delete(index, exports.OPERATION.DELETE);
                    this.deletedIndexes[index] = true;
                }
            }
            else {
                // not enough items to delete
                deleteCount = 0;
            }
            // insert operations
            if (insertCount > 0) {
                if (insertCount > deleteCount) {
                    console.error("Inserting more elements than deleting during ArraySchema#splice()");
                    throw new Error("ArraySchema#splice(): insertCount must be equal or lower than deleteCount.");
                }
                for (let i = 0; i < insertCount; i++) {
                    const addIndex = (indexes[start] ?? itemsLength) + i;
                    changeTree.indexedOperation(addIndex, (this.deletedIndexes[addIndex])
                        ? exports.OPERATION.DELETE_AND_ADD
                        : exports.OPERATION.ADD);
                    // set value's parent/root
                    insertItems[i][$changes]?.setParent(this, changeTree.root, addIndex);
                }
            }
            //
            // delete exceeding indexes from "allChanges"
            // (prevent .encodeAll() from encoding non-existing items)
            //
            if (deleteCount > insertCount) {
                changeTree.shiftAllChangeIndexes(-(deleteCount - insertCount), indexes[start + insertCount]);
                // debugChangeSet("AFTER SHIFT indexes", changeTree.allChanges);
            }
            //
            // FIXME: this code block is duplicated on ChangeTree
            //
            if (changeTree.filteredChanges !== undefined) {
                enqueueChangeTree(changeTree.root, changeTree, 'filteredChanges');
            }
            else {
                enqueueChangeTree(changeTree.root, changeTree, 'changes');
            }
            return this.items.splice(start, deleteCount, ...insertItems);
        }
        /**
         * Inserts new elements at the start of an array.
         * @param items  Elements to insert at the start of the Array.
         */
        unshift(...items) {
            const changeTree = this[$changes];
            // shift indexes
            changeTree.shiftChangeIndexes(items.length);
            // new index
            if (changeTree.isFiltered) {
                setOperationAtIndex(changeTree.filteredChanges, this.items.length);
                // changeTree.filteredChanges[this.items.length] = OPERATION.ADD;
            }
            else {
                setOperationAtIndex(changeTree.allChanges, this.items.length);
                // changeTree.allChanges[this.items.length] = OPERATION.ADD;
            }
            // FIXME: should we use OPERATION.MOVE here instead?
            items.forEach((_, index) => {
                changeTree.change(index, exports.OPERATION.ADD);
            });
            this.tmpItems.unshift(...items);
            return this.items.unshift(...items);
        }
        /**
         * Returns the index of the first occurrence of a value in an array.
         * @param searchElement The value to locate in the array.
         * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.
         */
        indexOf(searchElement, fromIndex) {
            return this.items.indexOf(searchElement, fromIndex);
        }
        /**
         * Returns the index of the last occurrence of a specified value in an array.
         * @param searchElement The value to locate in the array.
         * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.
         */
        lastIndexOf(searchElement, fromIndex = this.length - 1) {
            return this.items.lastIndexOf(searchElement, fromIndex);
        }
        every(callbackfn, thisArg) {
            return this.items.every(callbackfn, thisArg);
        }
        /**
         * Determines whether the specified callback function returns true for any element of an array.
         * @param callbackfn A function that accepts up to three arguments. The some method calls
         * the callbackfn function for each element in the array until the callbackfn returns a value
         * which is coercible to the Boolean value true, or until the end of the array.
         * @param thisArg An object to which the this keyword can refer in the callbackfn function.
         * If thisArg is omitted, undefined is used as the this value.
         */
        some(callbackfn, thisArg) {
            return this.items.some(callbackfn, thisArg);
        }
        /**
         * Performs the specified action for each element in an array.
         * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.
         * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
         */
        forEach(callbackfn, thisArg) {
            return this.items.forEach(callbackfn, thisArg);
        }
        /**
         * Calls a defined callback function on each element of an array, and returns an array that contains the results.
         * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.
         * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
         */
        map(callbackfn, thisArg) {
            return this.items.map(callbackfn, thisArg);
        }
        filter(callbackfn, thisArg) {
            return this.items.filter(callbackfn, thisArg);
        }
        /**
         * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
         * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.
         * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
         */
        reduce(callbackfn, initialValue) {
            return this.items.reduce(callbackfn, initialValue);
        }
        /**
         * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
         * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.
         * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
         */
        reduceRight(callbackfn, initialValue) {
            return this.items.reduceRight(callbackfn, initialValue);
        }
        /**
         * Returns the value of the first element in the array where predicate is true, and undefined
         * otherwise.
         * @param predicate find calls predicate once for each element of the array, in ascending
         * order, until it finds one where predicate returns true. If such an element is found, find
         * immediately returns that element value. Otherwise, find returns undefined.
         * @param thisArg If provided, it will be used as the this value for each invocation of
         * predicate. If it is not provided, undefined is used instead.
         */
        find(predicate, thisArg) {
            return this.items.find(predicate, thisArg);
        }
        /**
         * Returns the index of the first element in the array where predicate is true, and -1
         * otherwise.
         * @param predicate find calls predicate once for each element of the array, in ascending
         * order, until it finds one where predicate returns true. If such an element is found,
         * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
         * @param thisArg If provided, it will be used as the this value for each invocation of
         * predicate. If it is not provided, undefined is used instead.
         */
        findIndex(predicate, thisArg) {
            return this.items.findIndex(predicate, thisArg);
        }
        /**
         * Returns the this object after filling the section identified by start and end with value
         * @param value value to fill array section with
         * @param start index to start filling the array at. If start is negative, it is treated as
         * length+start where length is the length of the array.
         * @param end index to stop filling the array at. If end is negative, it is treated as
         * length+end.
         */
        fill(value, start, end) {
            //
            // TODO
            //
            throw new Error("ArraySchema#fill() not implemented");
        }
        /**
         * Returns the this object after copying a section of the array identified by start and end
         * to the same array starting at position target
         * @param target If target is negative, it is treated as length+target where length is the
         * length of the array.
         * @param start If start is negative, it is treated as length+start. If end is negative, it
         * is treated as length+end.
         * @param end If not specified, length of the this object is used as its default value.
         */
        copyWithin(target, start, end) {
            //
            // TODO
            //
            throw new Error("ArraySchema#copyWithin() not implemented");
        }
        /**
         * Returns a string representation of an array.
         */
        toString() {
            return this.items.toString();
        }
        /**
         * Returns a string representation of an array. The elements are converted to string using their toLocalString methods.
         */
        toLocaleString() {
            return this.items.toLocaleString();
        }
        ;
        /** Iterator */
        [Symbol.iterator]() {
            return this.items[Symbol.iterator]();
        }
        static get [Symbol.species]() {
            return ArraySchema;
        }
        /**
         * Returns an iterable of key, value pairs for every entry in the array
         */
        entries() { return this.items.entries(); }
        /**
         * Returns an iterable of keys in the array
         */
        keys() { return this.items.keys(); }
        /**
         * Returns an iterable of values in the array
         */
        values() { return this.items.values(); }
        /**
         * Determines whether an array includes a certain element, returning true or false as appropriate.
         * @param searchElement The element to search for.
         * @param fromIndex The position in this array at which to begin searching for searchElement.
         */
        includes(searchElement, fromIndex) {
            return this.items.includes(searchElement, fromIndex);
        }
        //
        // ES2022
        //
        /**
         * Calls a defined callback function on each element of an array. Then, flattens the result into
         * a new array.
         * This is identical to a map followed by flat with depth 1.
         *
         * @param callback A function that accepts up to three arguments. The flatMap method calls the
         * callback function one time for each element in the array.
         * @param thisArg An object to which the this keyword can refer in the callback function. If
         * thisArg is omitted, undefined is used as the this value.
         */
        // @ts-ignore
        flatMap(callback, thisArg) {
            // @ts-ignore
            throw new Error("ArraySchema#flatMap() is not supported.");
        }
        /**
         * Returns a new array with all sub-array elements concatenated into it recursively up to the
         * specified depth.
         *
         * @param depth The maximum recursion depth
         */
        // @ts-ignore
        flat(depth) {
            throw new Error("ArraySchema#flat() is not supported.");
        }
        findLast() {
            // @ts-ignore
            return this.items.findLast.apply(this.items, arguments);
        }
        findLastIndex(...args) {
            // @ts-ignore
            return this.items.findLastIndex.apply(this.items, arguments);
        }
        //
        // ES2023
        //
        with(index, value) {
            const copy = this.items.slice();
            // Allow negative indexing from the end
            if (index < 0)
                index += this.length;
            copy[index] = value;
            return new ArraySchema(...copy);
        }
        toReversed() {
            return this.items.slice().reverse();
        }
        toSorted(compareFn) {
            return this.items.slice().sort(compareFn);
        }
        // @ts-ignore
        toSpliced(start, deleteCount, ...items) {
            // @ts-ignore
            return this.items.toSpliced.apply(copy, arguments);
        }
        shuffle() {
            return this.move((_) => {
                let currentIndex = this.items.length;
                while (currentIndex != 0) {
                    let randomIndex = Math.floor(Math.random() * currentIndex);
                    currentIndex--;
                    [this[currentIndex], this[randomIndex]] = [this[randomIndex], this[currentIndex]];
                }
            });
        }
        /**
         * Allows to move items around in the array.
         *
         * Example:
         *     state.cards.move((cards) => {
         *         [cards[4], cards[3]] = [cards[3], cards[4]];
         *         [cards[3], cards[2]] = [cards[2], cards[3]];
         *         [cards[2], cards[0]] = [cards[0], cards[2]];
         *         [cards[1], cards[1]] = [cards[1], cards[1]];
         *         [cards[0], cards[0]] = [cards[0], cards[0]];
         *     })
         *
         * @param cb
         * @returns
         */
        move(cb) {
            this.isMovingItems = true;
            cb(this);
            this.isMovingItems = false;
            return this;
        }
        [($getByIndex)](index, isEncodeAll = false) {
            //
            // TODO: avoid unecessary `this.tmpItems` check during decoding.
            //
            //    ENCODING uses `this.tmpItems` (or `this.items` if `isEncodeAll` is true)
            //    DECODING uses `this.items`
            //
            return (isEncodeAll)
                ? this.items[index]
                : this.deletedIndexes[index]
                    ? this.items[index]
                    : this.tmpItems[index] || this.items[index];
        }
        [$deleteByIndex](index) {
            this.items[index] = undefined;
            this.tmpItems[index] = undefined; // TODO: do not try to get "tmpItems" at decoding time.
        }
        [$onEncodeEnd]() {
            this.tmpItems = this.items.slice();
            this.deletedIndexes = {};
        }
        [$onDecodeEnd]() {
            this.items = this.items.filter((item) => item !== undefined);
            this.tmpItems = this.items.slice(); // TODO: do no use "tmpItems" at decoding time.
        }
        toArray() {
            return this.items.slice(0);
        }
        toJSON() {
            return this.toArray().map((value) => {
                return (typeof (value['toJSON']) === "function")
                    ? value['toJSON']()
                    : value;
            });
        }
        //
        // Decoding utilities
        //
        clone(isDecoding) {
            let cloned;
            if (isDecoding) {
                cloned = new ArraySchema();
                cloned.push(...this.items);
            }
            else {
                cloned = new ArraySchema(...this.map(item => ((item[$changes])
                    ? item.clone()
                    : item)));
            }
            return cloned;
        }
        ;
    }
    registerType("array", { constructor: ArraySchema });

    var _a$3, _b$3;
    class MapSchema {
        static { this[_a$3] = encodeKeyValueOperation; }
        static { this[_b$3] = decodeKeyValueOperation; }
        /**
         * Determine if a property must be filtered.
         * - If returns false, the property is NOT going to be encoded.
         * - If returns true, the property is going to be encoded.
         *
         * Encoding with "filters" happens in two steps:
         * - First, the encoder iterates over all "not owned" properties and encodes them.
         * - Then, the encoder iterates over all "owned" properties per instance and encodes them.
         */
        static [(_a$3 = $encoder, _b$3 = $decoder, $filter)](ref, index, view) {
            return (!view ||
                typeof (ref[$childType]) === "string" ||
                view.isChangeTreeVisible((ref[$getByIndex](index) ?? ref.deletedItems[index])[$changes]));
        }
        static is(type) {
            return type['map'] !== undefined;
        }
        constructor(initialValues) {
            this.$items = new Map();
            this.$indexes = new Map();
            this.deletedItems = {};
            this[$changes] = new ChangeTree(this);
            this[$changes].indexes = {};
            if (initialValues) {
                if (initialValues instanceof Map ||
                    initialValues instanceof MapSchema) {
                    initialValues.forEach((v, k) => this.set(k, v));
                }
                else {
                    for (const k in initialValues) {
                        this.set(k, initialValues[k]);
                    }
                }
            }
            Object.defineProperty(this, $childType, {
                value: undefined,
                enumerable: false,
                writable: true,
                configurable: true,
            });
        }
        /** Iterator */
        [Symbol.iterator]() { return this.$items[Symbol.iterator](); }
        get [Symbol.toStringTag]() { return this.$items[Symbol.toStringTag]; }
        static get [Symbol.species]() { return MapSchema; }
        set(key, value) {
            if (value === undefined || value === null) {
                throw new Error(`MapSchema#set('${key}', ${value}): trying to set ${value} value on '${key}'.`);
            }
            else if (typeof (value) === "object" && this[$childType]) {
                assertInstanceType(value, this[$childType], this, key);
            }
            // Force "key" as string
            // See: https://github.com/colyseus/colyseus/issues/561#issuecomment-1646733468
            key = key.toString();
            const changeTree = this[$changes];
            const isRef = (value[$changes]) !== undefined;
            let index;
            let operation;
            // IS REPLACE?
            if (typeof (changeTree.indexes[key]) !== "undefined") {
                index = changeTree.indexes[key];
                operation = exports.OPERATION.REPLACE;
                const previousValue = this.$items.get(key);
                if (previousValue === value) {
                    // if value is the same, avoid re-encoding it.
                    return;
                }
                else if (isRef) {
                    // if is schema, force ADD operation if value differ from previous one.
                    operation = exports.OPERATION.DELETE_AND_ADD;
                    // remove reference from previous value
                    if (previousValue !== undefined) {
                        previousValue[$changes].root?.remove(previousValue[$changes]);
                    }
                }
            }
            else {
                index = changeTree.indexes[$numFields] ?? 0;
                operation = exports.OPERATION.ADD;
                this.$indexes.set(index, key);
                changeTree.indexes[key] = index;
                changeTree.indexes[$numFields] = index + 1;
            }
            this.$items.set(key, value);
            changeTree.change(index, operation);
            //
            // set value's parent after the value is set
            // (to avoid encoding "refId" operations before parent's "ADD" operation)
            //
            if (isRef) {
                value[$changes].setParent(this, changeTree.root, index);
            }
            return this;
        }
        get(key) {
            return this.$items.get(key);
        }
        delete(key) {
            const index = this[$changes].indexes[key];
            this.deletedItems[index] = this[$changes].delete(index);
            return this.$items.delete(key);
        }
        clear() {
            const changeTree = this[$changes];
            // discard previous operations.
            changeTree.discard(true);
            changeTree.indexes = {};
            // clear previous indexes
            this.$indexes.clear();
            // clear items
            this.$items.clear();
            changeTree.operation(exports.OPERATION.CLEAR);
        }
        has(key) {
            return this.$items.has(key);
        }
        forEach(callbackfn) {
            this.$items.forEach(callbackfn);
        }
        entries() {
            return this.$items.entries();
        }
        keys() {
            return this.$items.keys();
        }
        values() {
            return this.$items.values();
        }
        get size() {
            return this.$items.size;
        }
        setIndex(index, key) {
            this.$indexes.set(index, key);
        }
        getIndex(index) {
            return this.$indexes.get(index);
        }
        [$getByIndex](index) {
            return this.$items.get(this.$indexes.get(index));
        }
        [$deleteByIndex](index) {
            const key = this.$indexes.get(index);
            this.$items.delete(key);
            this.$indexes.delete(index);
        }
        [$onEncodeEnd]() {
            this.deletedItems = {};
        }
        toJSON() {
            const map = {};
            this.forEach((value, key) => {
                map[key] = (typeof (value['toJSON']) === "function")
                    ? value['toJSON']()
                    : value;
            });
            return map;
        }
        //
        // Decoding utilities
        //
        // @ts-ignore
        clone(isDecoding) {
            let cloned;
            if (isDecoding) {
                // client-side
                cloned = Object.assign(new MapSchema(), this);
            }
            else {
                // server-side
                cloned = new MapSchema();
                this.forEach((value, key) => {
                    if (value[$changes]) {
                        cloned.set(key, value['clone']());
                    }
                    else {
                        cloned.set(key, value);
                    }
                });
            }
            return cloned;
        }
    }
    registerType("map", { constructor: MapSchema });

    const DEFAULT_VIEW_TAG = -1;
    function entity(constructor) {
        TypeContext.register(constructor);
        return constructor;
    }
    /**
     * [See documentation](https://docs.colyseus.io/state/schema/)
     *
     * Annotate a Schema property to be serializeable.
     * \@type()'d fields are automatically flagged as "dirty" for the next patch.
     *
     * @example Standard usage, with automatic change tracking.
     * ```
     * \@type("string") propertyName: string;
     * ```
     *
     * @example You can provide the "manual" option if you'd like to manually control your patches via .setDirty().
     * ```
     * \@type("string", { manual: true })
     * ```
     */
    // export function type(type: DefinitionType, options?: TypeOptions) {
    //     return function ({ get, set }, context: ClassAccessorDecoratorContext): ClassAccessorDecoratorResult<Schema, any> {
    //         if (context.kind !== "accessor") {
    //             throw new Error("@type() is only supported for class accessor properties");
    //         }
    //         const field = context.name.toString();
    //         //
    //         // detect index for this field, considering inheritance
    //         //
    //         const parent = Object.getPrototypeOf(context.metadata);
    //         let fieldIndex: number = context.metadata[$numFields] // current structure already has fields defined
    //             ?? (parent && parent[$numFields]) // parent structure has fields defined
    //             ?? -1; // no fields defined
    //         fieldIndex++;
    //         if (
    //             !parent && // the parent already initializes the `$changes` property
    //             !Metadata.hasFields(context.metadata)
    //         ) {
    //             context.addInitializer(function (this: Ref) {
    //                 Object.defineProperty(this, $changes, {
    //                     value: new ChangeTree(this),
    //                     enumerable: false,
    //                     writable: true
    //                 });
    //             });
    //         }
    //         Metadata.addField(context.metadata, fieldIndex, field, type);
    //         const isArray = ArraySchema.is(type);
    //         const isMap = !isArray && MapSchema.is(type);
    //         // if (options && options.manual) {
    //         //     // do not declare getter/setter descriptor
    //         //     definition.descriptors[field] = {
    //         //         enumerable: true,
    //         //         configurable: true,
    //         //         writable: true,
    //         //     };
    //         //     return;
    //         // }
    //         return {
    //             init(value) {
    //                 // TODO: may need to convert ArraySchema/MapSchema here
    //                 // do not flag change if value is undefined.
    //                 if (value !== undefined) {
    //                     this[$changes].change(fieldIndex);
    //                     // automaticallty transform Array into ArraySchema
    //                     if (isArray) {
    //                         if (!(value instanceof ArraySchema)) {
    //                             value = new ArraySchema(...value);
    //                         }
    //                         value[$childType] = Object.values(type)[0];
    //                     }
    //                     // automaticallty transform Map into MapSchema
    //                     if (isMap) {
    //                         if (!(value instanceof MapSchema)) {
    //                             value = new MapSchema(value);
    //                         }
    //                         value[$childType] = Object.values(type)[0];
    //                     }
    //                     // try to turn provided structure into a Proxy
    //                     if (value['$proxy'] === undefined) {
    //                         if (isMap) {
    //                             value = getMapProxy(value);
    //                         }
    //                     }
    //                 }
    //                 return value;
    //             },
    //             get() {
    //                 return get.call(this);
    //             },
    //             set(value: any) {
    //                 /**
    //                  * Create Proxy for array or map items
    //                  */
    //                 // skip if value is the same as cached.
    //                 if (value === get.call(this)) {
    //                     return;
    //                 }
    //                 if (
    //                     value !== undefined &&
    //                     value !== null
    //                 ) {
    //                     // automaticallty transform Array into ArraySchema
    //                     if (isArray) {
    //                         if (!(value instanceof ArraySchema)) {
    //                             value = new ArraySchema(...value);
    //                         }
    //                         value[$childType] = Object.values(type)[0];
    //                     }
    //                     // automaticallty transform Map into MapSchema
    //                     if (isMap) {
    //                         if (!(value instanceof MapSchema)) {
    //                             value = new MapSchema(value);
    //                         }
    //                         value[$childType] = Object.values(type)[0];
    //                     }
    //                     // try to turn provided structure into a Proxy
    //                     if (value['$proxy'] === undefined) {
    //                         if (isMap) {
    //                             value = getMapProxy(value);
    //                         }
    //                     }
    //                     // flag the change for encoding.
    //                     this[$changes].change(fieldIndex);
    //                     //
    //                     // call setParent() recursively for this and its child
    //                     // structures.
    //                     //
    //                     if (value[$changes]) {
    //                         value[$changes].setParent(
    //                             this,
    //                             this[$changes].root,
    //                             Metadata.getIndex(context.metadata, field),
    //                         );
    //                     }
    //                 } else if (get.call(this)) {
    //                     //
    //                     // Setting a field to `null` or `undefined` will delete it.
    //                     //
    //                     this[$changes].delete(field);
    //                 }
    //                 set.call(this, value);
    //             },
    //         };
    //     }
    // }
    function view(tag = DEFAULT_VIEW_TAG) {
        return function (target, fieldName) {
            const constructor = target.constructor;
            const parentClass = Object.getPrototypeOf(constructor);
            const parentMetadata = parentClass[Symbol.metadata];
            // TODO: use Metadata.initialize()
            const metadata = (constructor[Symbol.metadata] ??= Object.assign({}, constructor[Symbol.metadata], parentMetadata ?? Object.create(null)));
            // const fieldIndex = metadata[fieldName];
            // if (!metadata[fieldIndex]) {
            //     //
            //     // detect index for this field, considering inheritance
            //     //
            //     metadata[fieldIndex] = {
            //         type: undefined,
            //         index: (metadata[$numFields] // current structure already has fields defined
            //             ?? (parentMetadata && parentMetadata[$numFields]) // parent structure has fields defined
            //             ?? -1) + 1 // no fields defined
            //     }
            // }
            Metadata.setTag(metadata, fieldName, tag);
        };
    }
    function type(type, options) {
        return function (target, field) {
            const constructor = target.constructor;
            if (!type) {
                throw new Error(`${constructor.name}: @type() reference provided for "${field}" is undefined. Make sure you don't have any circular dependencies.`);
            }
            // for inheritance support
            TypeContext.register(constructor);
            const parentClass = Object.getPrototypeOf(constructor);
            const parentMetadata = parentClass[Symbol.metadata];
            const metadata = Metadata.initialize(constructor);
            let fieldIndex = metadata[field];
            /**
             * skip if descriptor already exists for this field (`@deprecated()`)
             */
            if (metadata[fieldIndex] !== undefined) {
                if (metadata[fieldIndex].deprecated) {
                    // do not create accessors for deprecated properties.
                    return;
                }
                else if (metadata[fieldIndex].type !== undefined) {
                    // trying to define same property multiple times across inheritance.
                    // https://github.com/colyseus/colyseus-unity3d/issues/131#issuecomment-814308572
                    try {
                        throw new Error(`@colyseus/schema: Duplicate '${field}' definition on '${constructor.name}'.\nCheck @type() annotation`);
                    }
                    catch (e) {
                        const definitionAtLine = e.stack.split("\n")[4].trim();
                        throw new Error(`${e.message} ${definitionAtLine}`);
                    }
                }
            }
            else {
                //
                // detect index for this field, considering inheritance
                //
                fieldIndex = metadata[$numFields] // current structure already has fields defined
                    ?? (parentMetadata && parentMetadata[$numFields]) // parent structure has fields defined
                    ?? -1; // no fields defined
                fieldIndex++;
            }
            if (options && options.manual) {
                Metadata.addField(metadata, fieldIndex, field, type, {
                    // do not declare getter/setter descriptor
                    enumerable: true,
                    configurable: true,
                    writable: true,
                });
            }
            else {
                const complexTypeKlass = (Array.isArray(type))
                    ? getType("array")
                    : (typeof (Object.keys(type)[0]) === "string") && getType(Object.keys(type)[0]);
                const childType = (complexTypeKlass)
                    ? Object.values(type)[0]
                    : type;
                Metadata.addField(metadata, fieldIndex, field, type, getPropertyDescriptor(`_${field}`, fieldIndex, childType, complexTypeKlass));
            }
        };
    }
    function getPropertyDescriptor(fieldCached, fieldIndex, type, complexTypeKlass) {
        return {
            get: function () { return this[fieldCached]; },
            set: function (value) {
                const previousValue = this[fieldCached] ?? undefined;
                // skip if value is the same as cached.
                if (value === previousValue) {
                    return;
                }
                if (value !== undefined &&
                    value !== null) {
                    if (complexTypeKlass) {
                        // automaticallty transform Array into ArraySchema
                        if (complexTypeKlass.constructor === ArraySchema && !(value instanceof ArraySchema)) {
                            value = new ArraySchema(...value);
                        }
                        // automaticallty transform Map into MapSchema
                        if (complexTypeKlass.constructor === MapSchema && !(value instanceof MapSchema)) {
                            value = new MapSchema(value);
                        }
                        value[$childType] = type;
                    }
                    else if (typeof (type) !== "string") {
                        assertInstanceType(value, type, this, fieldCached.substring(1));
                    }
                    else {
                        assertType(value, type, this, fieldCached.substring(1));
                    }
                    const changeTree = this[$changes];
                    //
                    // Replacing existing "ref", remove it from root.
                    //
                    if (previousValue !== undefined && previousValue[$changes]) {
                        changeTree.root?.remove(previousValue[$changes]);
                        this.constructor[$track](changeTree, fieldIndex, exports.OPERATION.DELETE_AND_ADD);
                    }
                    else {
                        this.constructor[$track](changeTree, fieldIndex, exports.OPERATION.ADD);
                    }
                    //
                    // call setParent() recursively for this and its child
                    // structures.
                    //
                    value[$changes]?.setParent(this, changeTree.root, fieldIndex);
                }
                else if (previousValue !== undefined) {
                    //
                    // Setting a field to `null` or `undefined` will delete it.
                    //
                    this[$changes].delete(fieldIndex);
                }
                this[fieldCached] = value;
            },
            enumerable: true,
            configurable: true
        };
    }
    /**
     * `@deprecated()` flag a field as deprecated.
     * The previous `@type()` annotation should remain along with this one.
     */
    function deprecated(throws = true) {
        return function (klass, field) {
            //
            // FIXME: the following block of code is repeated across `@type()`, `@deprecated()` and `@unreliable()` decorators.
            //
            const constructor = klass.constructor;
            const parentClass = Object.getPrototypeOf(constructor);
            const parentMetadata = parentClass[Symbol.metadata];
            const metadata = (constructor[Symbol.metadata] ??= Object.assign({}, constructor[Symbol.metadata], parentMetadata ?? Object.create(null)));
            const fieldIndex = metadata[field];
            // if (!metadata[field]) {
            //     //
            //     // detect index for this field, considering inheritance
            //     //
            //     metadata[field] = {
            //         type: undefined,
            //         index: (metadata[$numFields] // current structure already has fields defined
            //             ?? (parentMetadata && parentMetadata[$numFields]) // parent structure has fields defined
            //             ?? -1) + 1 // no fields defined
            //     }
            // }
            metadata[fieldIndex].deprecated = true;
            if (throws) {
                metadata[$descriptors] ??= {};
                metadata[$descriptors][field] = {
                    get: function () { throw new Error(`${field} is deprecated.`); },
                    set: function (value) { },
                    enumerable: false,
                    configurable: true
                };
            }
            // flag metadata[field] as non-enumerable
            Object.defineProperty(metadata, fieldIndex, {
                value: metadata[fieldIndex],
                enumerable: false,
                configurable: true
            });
        };
    }
    function defineTypes(target, fields, options) {
        for (let field in fields) {
            type(fields[field], options)(target.prototype, field);
        }
        return target;
    }
    function schema(fields, name, inherits = Schema) {
        const defaultValues = {};
        const viewTagFields = {};
        for (let fieldName in fields) {
            const field = fields[fieldName];
            if (typeof (field) === "object") {
                if (field['default'] !== undefined) {
                    defaultValues[fieldName] = field['default'];
                }
                if (field['view'] !== undefined) {
                    viewTagFields[fieldName] = (typeof (field['view']) === "boolean")
                        ? DEFAULT_VIEW_TAG
                        : field['view'];
                }
            }
        }
        const klass = Metadata.setFields(class extends inherits {
            constructor(...args) {
                args[0] = Object.assign({}, defaultValues, args[0]);
                super(...args);
            }
        }, fields);
        for (let fieldName in viewTagFields) {
            view(viewTagFields[fieldName])(klass.prototype, fieldName);
        }
        if (name) {
            Object.defineProperty(klass, "name", { value: name });
        }
        klass.extends = (fields, name) => schema(fields, name, klass);
        return klass;
    }

    function getIndent(level) {
        return (new Array(level).fill(0)).map((_, i) => (i === level - 1) ? `└─ ` : `   `).join("");
    }
    function dumpChanges(schema) {
        const $root = schema[$changes].root;
        const dump = {
            ops: {},
            refs: []
        };
        // for (const refId in $root.changes) {
        $root.changes.forEach(changeTree => {
            // skip if ChangeTree is undefined
            if (changeTree === undefined) {
                return;
            }
            const changes = changeTree.indexedOperations;
            dump.refs.push(`refId#${changeTree.refId}`);
            for (const index in changes) {
                const op = changes[index];
                const opName = exports.OPERATION[op];
                if (!dump.ops[opName]) {
                    dump.ops[opName] = 0;
                }
                dump.ops[exports.OPERATION[op]]++;
            }
        });
        return dump;
    }

    var _a$2, _b$2;
    /**
     * Schema encoder / decoder
     */
    class Schema {
        static { this[_a$2] = encodeSchemaOperation; }
        static { this[_b$2] = decodeSchemaOperation; }
        /**
         * Assign the property descriptors required to track changes on this instance.
         * @param instance
         */
        static initialize(instance) {
            Object.defineProperty(instance, $changes, {
                value: new ChangeTree(instance),
                enumerable: false,
                writable: true
            });
            Object.defineProperties(instance, instance.constructor[Symbol.metadata]?.[$descriptors] || {});
        }
        static is(type) {
            return typeof (type[Symbol.metadata]) === "object";
            // const metadata = type[Symbol.metadata];
            // return metadata && Object.prototype.hasOwnProperty.call(metadata, -1);
        }
        /**
         * Track property changes
         */
        static [(_a$2 = $encoder, _b$2 = $decoder, $track)](changeTree, index, operation = exports.OPERATION.ADD) {
            changeTree.change(index, operation);
        }
        /**
         * Determine if a property must be filtered.
         * - If returns false, the property is NOT going to be encoded.
         * - If returns true, the property is going to be encoded.
         *
         * Encoding with "filters" happens in two steps:
         * - First, the encoder iterates over all "not owned" properties and encodes them.
         * - Then, the encoder iterates over all "owned" properties per instance and encodes them.
         */
        static [$filter](ref, index, view) {
            const metadata = ref.constructor[Symbol.metadata];
            const tag = metadata[index]?.tag;
            if (view === undefined) {
                // shared pass/encode: encode if doesn't have a tag
                return tag === undefined;
            }
            else if (tag === undefined) {
                // view pass: no tag
                return true;
            }
            else if (tag === DEFAULT_VIEW_TAG) {
                // view pass: default tag
                return view.isChangeTreeVisible(ref[$changes]);
            }
            else {
                // view pass: custom tag
                const tags = view.tags?.get(ref[$changes]);
                return tags && tags.has(tag);
            }
        }
        // allow inherited classes to have a constructor
        constructor(...args) {
            //
            // inline
            // Schema.initialize(this);
            //
            Schema.initialize(this);
            //
            // Assign initial values
            //
            if (args[0]) {
                Object.assign(this, args[0]);
            }
        }
        assign(props) {
            Object.assign(this, props);
            return this;
        }
        /**
         * (Server-side): Flag a property to be encoded for the next patch.
         * @param instance Schema instance
         * @param property string representing the property name, or number representing the index of the property.
         * @param operation OPERATION to perform (detected automatically)
         */
        setDirty(property, operation) {
            const metadata = this.constructor[Symbol.metadata];
            this[$changes].change(metadata[metadata[property]].index, operation);
        }
        clone() {
            const cloned = new (this.constructor);
            const metadata = this.constructor[Symbol.metadata];
            //
            // TODO: clone all properties, not only annotated ones
            //
            // for (const field in this) {
            for (const fieldIndex in metadata) {
                // const field = metadata[metadata[fieldIndex]].name;
                const field = metadata[fieldIndex].name;
                if (typeof (this[field]) === "object" &&
                    typeof (this[field]?.clone) === "function") {
                    // deep clone
                    cloned[field] = this[field].clone();
                }
                else {
                    // primitive values
                    cloned[field] = this[field];
                }
            }
            return cloned;
        }
        toJSON() {
            const obj = {};
            const metadata = this.constructor[Symbol.metadata];
            for (const index in metadata) {
                const field = metadata[index];
                const fieldName = field.name;
                if (!field.deprecated && this[fieldName] !== null && typeof (this[fieldName]) !== "undefined") {
                    obj[fieldName] = (typeof (this[fieldName]['toJSON']) === "function")
                        ? this[fieldName]['toJSON']()
                        : this[fieldName];
                }
            }
            return obj;
        }
        discardAllChanges() {
            this[$changes].discardAll();
        }
        [$getByIndex](index) {
            const metadata = this.constructor[Symbol.metadata];
            return this[metadata[index].name];
        }
        [$deleteByIndex](index) {
            const metadata = this.constructor[Symbol.metadata];
            this[metadata[index].name] = undefined;
        }
        /**
         * Inspect the `refId` of all Schema instances in the tree. Optionally display the contents of the instance.
         *
         * @param ref Schema instance
         * @param showContents display JSON contents of the instance
         * @returns
         */
        static debugRefIds(ref, showContents = false, level = 0) {
            const contents = (showContents) ? ` - ${JSON.stringify(ref.toJSON())}` : "";
            const changeTree = ref[$changes];
            const refId = changeTree.refId;
            let output = "";
            output += `${getIndent(level)}${ref.constructor.name} (refId: ${refId})${contents}\n`;
            changeTree.forEachChild((childChangeTree) => output += this.debugRefIds(childChangeTree.ref, showContents, level + 1));
            return output;
        }
        /**
         * Return a string representation of the changes on a Schema instance.
         * The list of changes is cleared after each encode.
         *
         * @param instance Schema instance
         * @param isEncodeAll Return "full encode" instead of current change set.
         * @returns
         */
        static debugChanges(instance, isEncodeAll = false) {
            const changeTree = instance[$changes];
            const changeSet = (isEncodeAll) ? changeTree.allChanges : changeTree.changes;
            const changeSetName = (isEncodeAll) ? "allChanges" : "changes";
            let output = `${instance.constructor.name} (${changeTree.refId}) -> .${changeSetName}:\n`;
            function dumpChangeSet(changeSet) {
                changeSet.operations
                    .filter(op => op)
                    .forEach((index) => {
                    const operation = changeTree.indexedOperations[index];
                    console.log({ index, operation });
                    output += `- [${index}]: ${exports.OPERATION[operation]} (${JSON.stringify(changeTree.getValue(Number(index), isEncodeAll))})\n`;
                });
            }
            dumpChangeSet(changeSet);
            // display filtered changes
            if (!isEncodeAll &&
                changeTree.filteredChanges &&
                (changeTree.filteredChanges.operations).filter(op => op).length > 0) {
                output += `${instance.constructor.name} (${changeTree.refId}) -> .filteredChanges:\n`;
                dumpChangeSet(changeTree.filteredChanges);
            }
            // display filtered changes
            if (isEncodeAll &&
                changeTree.allFilteredChanges &&
                (changeTree.allFilteredChanges.operations).filter(op => op).length > 0) {
                output += `${instance.constructor.name} (${changeTree.refId}) -> .allFilteredChanges:\n`;
                dumpChangeSet(changeTree.allFilteredChanges);
            }
            return output;
        }
        static debugChangesDeep(ref, changeSetName = "changes") {
            let output = "";
            const rootChangeTree = ref[$changes];
            const root = rootChangeTree.root;
            const changeTrees = new Map();
            const instanceRefIds = [];
            let totalOperations = 0;
            for (const [refId, changes] of Object.entries(root[changeSetName])) {
                const changeTree = root.changeTrees[refId];
                let includeChangeTree = false;
                let parentChangeTrees = [];
                let parentChangeTree = changeTree.parent?.[$changes];
                if (changeTree === rootChangeTree) {
                    includeChangeTree = true;
                }
                else {
                    while (parentChangeTree !== undefined) {
                        parentChangeTrees.push(parentChangeTree);
                        if (parentChangeTree.ref === ref) {
                            includeChangeTree = true;
                            break;
                        }
                        parentChangeTree = parentChangeTree.parent?.[$changes];
                    }
                }
                if (includeChangeTree) {
                    instanceRefIds.push(changeTree.refId);
                    totalOperations += Object.keys(changes).length;
                    changeTrees.set(changeTree, parentChangeTrees.reverse());
                }
            }
            output += "---\n";
            output += `root refId: ${rootChangeTree.refId}\n`;
            output += `Total instances: ${instanceRefIds.length} (refIds: ${instanceRefIds.join(", ")})\n`;
            output += `Total changes: ${totalOperations}\n`;
            output += "---\n";
            // based on root.changes, display a tree of changes that has the "ref" instance as parent
            const visitedParents = new WeakSet();
            for (const [changeTree, parentChangeTrees] of changeTrees.entries()) {
                parentChangeTrees.forEach((parentChangeTree, level) => {
                    if (!visitedParents.has(parentChangeTree)) {
                        output += `${getIndent(level)}${parentChangeTree.ref.constructor.name} (refId: ${parentChangeTree.refId})\n`;
                        visitedParents.add(parentChangeTree);
                    }
                });
                const changes = changeTree.indexedOperations;
                const level = parentChangeTrees.length;
                const indent = getIndent(level);
                const parentIndex = (level > 0) ? `(${changeTree.parentIndex}) ` : "";
                output += `${indent}${parentIndex}${changeTree.ref.constructor.name} (refId: ${changeTree.refId}) - changes: ${Object.keys(changes).length}\n`;
                for (const index in changes) {
                    const operation = changes[index];
                    output += `${getIndent(level + 1)}${exports.OPERATION[operation]}: ${index}\n`;
                }
            }
            return `${output}`;
        }
    }

    var _a$1, _b$1;
    class CollectionSchema {
        static { this[_a$1] = encodeKeyValueOperation; }
        static { this[_b$1] = decodeKeyValueOperation; }
        /**
         * Determine if a property must be filtered.
         * - If returns false, the property is NOT going to be encoded.
         * - If returns true, the property is going to be encoded.
         *
         * Encoding with "filters" happens in two steps:
         * - First, the encoder iterates over all "not owned" properties and encodes them.
         * - Then, the encoder iterates over all "owned" properties per instance and encodes them.
         */
        static [(_a$1 = $encoder, _b$1 = $decoder, $filter)](ref, index, view) {
            return (!view ||
                typeof (ref[$childType]) === "string" ||
                view.isChangeTreeVisible((ref[$getByIndex](index) ?? ref.deletedItems[index])[$changes]));
        }
        static is(type) {
            return type['collection'] !== undefined;
        }
        constructor(initialValues) {
            this.$items = new Map();
            this.$indexes = new Map();
            this.deletedItems = {};
            this.$refId = 0;
            this[$changes] = new ChangeTree(this);
            this[$changes].indexes = {};
            if (initialValues) {
                initialValues.forEach((v) => this.add(v));
            }
            Object.defineProperty(this, $childType, {
                value: undefined,
                enumerable: false,
                writable: true,
                configurable: true,
            });
        }
        add(value) {
            // set "index" for reference.
            const index = this.$refId++;
            const isRef = (value[$changes]) !== undefined;
            if (isRef) {
                value[$changes].setParent(this, this[$changes].root, index);
            }
            this[$changes].indexes[index] = index;
            this.$indexes.set(index, index);
            this.$items.set(index, value);
            this[$changes].change(index);
            return index;
        }
        at(index) {
            const key = Array.from(this.$items.keys())[index];
            return this.$items.get(key);
        }
        entries() {
            return this.$items.entries();
        }
        delete(item) {
            const entries = this.$items.entries();
            let index;
            let entry;
            while (entry = entries.next()) {
                if (entry.done) {
                    break;
                }
                if (item === entry.value[1]) {
                    index = entry.value[0];
                    break;
                }
            }
            if (index === undefined) {
                return false;
            }
            this.deletedItems[index] = this[$changes].delete(index);
            this.$indexes.delete(index);
            return this.$items.delete(index);
        }
        clear() {
            const changeTree = this[$changes];
            // discard previous operations.
            changeTree.discard(true);
            changeTree.indexes = {};
            // clear previous indexes
            this.$indexes.clear();
            // clear items
            this.$items.clear();
            changeTree.operation(exports.OPERATION.CLEAR);
        }
        has(value) {
            return Array.from(this.$items.values()).some((v) => v === value);
        }
        forEach(callbackfn) {
            this.$items.forEach((value, key, _) => callbackfn(value, key, this));
        }
        values() {
            return this.$items.values();
        }
        get size() {
            return this.$items.size;
        }
        /** Iterator */
        [Symbol.iterator]() {
            return this.$items.values();
        }
        setIndex(index, key) {
            this.$indexes.set(index, key);
        }
        getIndex(index) {
            return this.$indexes.get(index);
        }
        [$getByIndex](index) {
            return this.$items.get(this.$indexes.get(index));
        }
        [$deleteByIndex](index) {
            const key = this.$indexes.get(index);
            this.$items.delete(key);
            this.$indexes.delete(index);
        }
        [$onEncodeEnd]() {
            this.deletedItems = {};
        }
        toArray() {
            return Array.from(this.$items.values());
        }
        toJSON() {
            const values = [];
            this.forEach((value, key) => {
                values.push((typeof (value['toJSON']) === "function")
                    ? value['toJSON']()
                    : value);
            });
            return values;
        }
        //
        // Decoding utilities
        //
        clone(isDecoding) {
            let cloned;
            if (isDecoding) {
                // client-side
                cloned = Object.assign(new CollectionSchema(), this);
            }
            else {
                // server-side
                cloned = new CollectionSchema();
                this.forEach((value) => {
                    if (value[$changes]) {
                        cloned.add(value['clone']());
                    }
                    else {
                        cloned.add(value);
                    }
                });
            }
            return cloned;
        }
    }
    registerType("collection", { constructor: CollectionSchema, });

    var _a, _b;
    class SetSchema {
        static { this[_a] = encodeKeyValueOperation; }
        static { this[_b] = decodeKeyValueOperation; }
        /**
         * Determine if a property must be filtered.
         * - If returns false, the property is NOT going to be encoded.
         * - If returns true, the property is going to be encoded.
         *
         * Encoding with "filters" happens in two steps:
         * - First, the encoder iterates over all "not owned" properties and encodes them.
         * - Then, the encoder iterates over all "owned" properties per instance and encodes them.
         */
        static [(_a = $encoder, _b = $decoder, $filter)](ref, index, view) {
            return (!view ||
                typeof (ref[$childType]) === "string" ||
                view.visible.has((ref[$getByIndex](index) ?? ref.deletedItems[index])[$changes]));
        }
        static is(type) {
            return type['set'] !== undefined;
        }
        constructor(initialValues) {
            this.$items = new Map();
            this.$indexes = new Map();
            this.deletedItems = {};
            this.$refId = 0;
            this[$changes] = new ChangeTree(this);
            this[$changes].indexes = {};
            if (initialValues) {
                initialValues.forEach((v) => this.add(v));
            }
            Object.defineProperty(this, $childType, {
                value: undefined,
                enumerable: false,
                writable: true,
                configurable: true,
            });
        }
        add(value) {
            // immediatelly return false if value already added.
            if (this.has(value)) {
                return false;
            }
            // set "index" for reference.
            const index = this.$refId++;
            if ((value[$changes]) !== undefined) {
                value[$changes].setParent(this, this[$changes].root, index);
            }
            const operation = this[$changes].indexes[index]?.op ?? exports.OPERATION.ADD;
            this[$changes].indexes[index] = index;
            this.$indexes.set(index, index);
            this.$items.set(index, value);
            this[$changes].change(index, operation);
            return index;
        }
        entries() {
            return this.$items.entries();
        }
        delete(item) {
            const entries = this.$items.entries();
            let index;
            let entry;
            while (entry = entries.next()) {
                if (entry.done) {
                    break;
                }
                if (item === entry.value[1]) {
                    index = entry.value[0];
                    break;
                }
            }
            if (index === undefined) {
                return false;
            }
            this.deletedItems[index] = this[$changes].delete(index);
            this.$indexes.delete(index);
            return this.$items.delete(index);
        }
        clear() {
            const changeTree = this[$changes];
            // discard previous operations.
            changeTree.discard(true);
            changeTree.indexes = {};
            // clear previous indexes
            this.$indexes.clear();
            // clear items
            this.$items.clear();
            changeTree.operation(exports.OPERATION.CLEAR);
        }
        has(value) {
            const values = this.$items.values();
            let has = false;
            let entry;
            while (entry = values.next()) {
                if (entry.done) {
                    break;
                }
                if (value === entry.value) {
                    has = true;
                    break;
                }
            }
            return has;
        }
        forEach(callbackfn) {
            this.$items.forEach((value, key, _) => callbackfn(value, key, this));
        }
        values() {
            return this.$items.values();
        }
        get size() {
            return this.$items.size;
        }
        /** Iterator */
        [Symbol.iterator]() {
            return this.$items.values();
        }
        setIndex(index, key) {
            this.$indexes.set(index, key);
        }
        getIndex(index) {
            return this.$indexes.get(index);
        }
        [$getByIndex](index) {
            return this.$items.get(this.$indexes.get(index));
        }
        [$deleteByIndex](index) {
            const key = this.$indexes.get(index);
            this.$items.delete(key);
            this.$indexes.delete(index);
        }
        [$onEncodeEnd]() {
            this.deletedItems = {};
        }
        toArray() {
            return Array.from(this.$items.values());
        }
        toJSON() {
            const values = [];
            this.forEach((value, key) => {
                values.push((typeof (value['toJSON']) === "function")
                    ? value['toJSON']()
                    : value);
            });
            return values;
        }
        //
        // Decoding utilities
        //
        clone(isDecoding) {
            let cloned;
            if (isDecoding) {
                // client-side
                cloned = Object.assign(new SetSchema(), this);
            }
            else {
                // server-side
                cloned = new SetSchema();
                this.forEach((value) => {
                    if (value[$changes]) {
                        cloned.add(value['clone']());
                    }
                    else {
                        cloned.add(value);
                    }
                });
            }
            return cloned;
        }
    }
    registerType("set", { constructor: SetSchema });

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise, SuppressedError, Symbol, Iterator */


    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
        var e = new Error(message);
        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;

    };

    class Root {
        constructor(types) {
            this.types = types;
            this.nextUniqueId = 0;
            this.refCount = {};
            this.changeTrees = {};
            // all changes
            this.allChanges = [];
            this.allFilteredChanges = []; // TODO: do not initialize it if filters are not used
            // pending changes to be encoded
            this.changes = [];
            this.filteredChanges = []; // TODO: do not initialize it if filters are not used
        }
        getNextUniqueId() {
            return this.nextUniqueId++;
        }
        add(changeTree) {
            // FIXME: move implementation of `ensureRefId` to `Root` class
            changeTree.ensureRefId();
            const isNewChangeTree = (this.changeTrees[changeTree.refId] === undefined);
            if (isNewChangeTree) {
                this.changeTrees[changeTree.refId] = changeTree;
            }
            const previousRefCount = this.refCount[changeTree.refId];
            if (previousRefCount === 0) {
                //
                // When a ChangeTree is re-added, it means that it was previously removed.
                // We need to re-add all changes to the `changes` map.
                //
                const ops = changeTree.allChanges.operations;
                let len = ops.length;
                while (len--) {
                    changeTree.indexedOperations[ops[len]] = exports.OPERATION.ADD;
                    setOperationAtIndex(changeTree.changes, len);
                }
            }
            this.refCount[changeTree.refId] = (previousRefCount || 0) + 1;
            return isNewChangeTree;
        }
        remove(changeTree) {
            const refCount = (this.refCount[changeTree.refId]) - 1;
            if (refCount <= 0) {
                //
                // Only remove "root" reference if it's the last reference
                //
                changeTree.root = undefined;
                delete this.changeTrees[changeTree.refId];
                this.removeChangeFromChangeSet("allChanges", changeTree);
                this.removeChangeFromChangeSet("changes", changeTree);
                if (changeTree.filteredChanges) {
                    this.removeChangeFromChangeSet("allFilteredChanges", changeTree);
                    this.removeChangeFromChangeSet("filteredChanges", changeTree);
                }
                this.refCount[changeTree.refId] = 0;
            }
            else {
                this.refCount[changeTree.refId] = refCount;
                //
                // When losing a reference to an instance, it is best to move the
                // ChangeTree to the end of the encoding queue.
                //
                // This way, at decoding time, the instance that contains the
                // ChangeTree will be available before the ChangeTree itself. If the
                // containing instance is not available, the Decoder will throw
                // "refId not found" error.
                //
                if (changeTree.filteredChanges !== undefined) {
                    this.removeChangeFromChangeSet("filteredChanges", changeTree);
                    enqueueChangeTree(this, changeTree, "filteredChanges");
                }
                else {
                    this.removeChangeFromChangeSet("changes", changeTree);
                    enqueueChangeTree(this, changeTree, "changes");
                }
            }
            changeTree.forEachChild((child, _) => this.remove(child));
            return refCount;
        }
        removeChangeFromChangeSet(changeSetName, changeTree) {
            const changeSet = this[changeSetName];
            const changeSetIndex = changeSet.indexOf(changeTree);
            if (changeSetIndex !== -1) {
                changeTree[changeSetName].queueRootIndex = -1;
                changeSet[changeSetIndex] = undefined;
                return true;
            }
            // if (spliceOne(changeSet, changeSet.indexOf(changeTree))) {
            //     changeTree[changeSetName].queueRootIndex = -1;
            //     return true;
            // }
        }
        clear() {
            this.changes.length = 0;
        }
    }

    class Encoder {
        static { this.BUFFER_SIZE = (typeof (Buffer) !== "undefined") && Buffer.poolSize || 8 * 1024; } // 8KB
        constructor(state) {
            this.sharedBuffer = Buffer.allocUnsafe(Encoder.BUFFER_SIZE);
            //
            // Use .cache() here to avoid re-creating a new context for every new room instance.
            //
            // We may need to make this optional in case of dynamically created
            // schemas - which would lead to memory leaks
            //
            this.context = TypeContext.cache(state.constructor);
            this.root = new Root(this.context);
            this.setState(state);
            // console.log(">>>>>>>>>>>>>>>> Encoder types");
            // this.context.schemas.forEach((id, schema) => {
            //     console.log("type:", id, schema.name, Object.keys(schema[Symbol.metadata]));
            // });
        }
        setState(state) {
            this.state = state;
            this.state[$changes].setRoot(this.root);
        }
        encode(it = { offset: 0 }, view, buffer = this.sharedBuffer, changeSetName = "changes", isEncodeAll = changeSetName === "allChanges", initialOffset = it.offset // cache current offset in case we need to resize the buffer
        ) {
            const hasView = (view !== undefined);
            const rootChangeTree = this.state[$changes];
            const changeTrees = this.root[changeSetName];
            for (let i = 0, numChangeTrees = changeTrees.length; i < numChangeTrees; i++) {
                const changeTree = changeTrees[i];
                if (!changeTree) {
                    continue;
                }
                if (hasView) {
                    if (!view.isChangeTreeVisible(changeTree)) {
                        // console.log("MARK AS INVISIBLE:", { ref: changeTree.ref.constructor.name, refId: changeTree.refId, raw: changeTree.ref.toJSON() });
                        view.invisible.add(changeTree);
                        continue; // skip this change tree
                    }
                    view.invisible.delete(changeTree); // remove from invisible list
                }
                const changeSet = changeTree[changeSetName];
                const ref = changeTree.ref;
                // TODO: avoid iterating over change tree if no changes were made
                const numChanges = changeSet.operations.length;
                if (numChanges === 0) {
                    continue;
                }
                const ctor = ref.constructor;
                const encoder = ctor[$encoder];
                const filter = ctor[$filter];
                const metadata = ctor[Symbol.metadata];
                // skip root `refId` if it's the first change tree
                // (unless it "hasView", which will need to revisit the root)
                if (hasView || it.offset > initialOffset || changeTree !== rootChangeTree) {
                    buffer[it.offset++] = SWITCH_TO_STRUCTURE & 255;
                    encode.number(buffer, changeTree.refId, it);
                }
                for (let j = 0; j < numChanges; j++) {
                    const fieldIndex = changeSet.operations[j];
                    const operation = (fieldIndex < 0)
                        ? Math.abs(fieldIndex) // "pure" operation without fieldIndex (e.g. CLEAR, REVERSE, etc.)
                        : (isEncodeAll)
                            ? exports.OPERATION.ADD
                            : changeTree.indexedOperations[fieldIndex];
                    //
                    // first pass (encodeAll), identify "filtered" operations without encoding them
                    // they will be encoded per client, based on their view.
                    //
                    // TODO: how can we optimize filtering out "encode all" operations?
                    // TODO: avoid checking if no view tags were defined
                    //
                    if (fieldIndex === undefined || operation === undefined || (filter && !filter(ref, fieldIndex, view))) {
                        // console.log("ADD AS INVISIBLE:", fieldIndex, changeTree.ref.constructor.name)
                        // view?.invisible.add(changeTree);
                        continue;
                    }
                    encoder(this, buffer, changeTree, fieldIndex, operation, it, isEncodeAll, hasView, metadata);
                }
            }
            if (it.offset > buffer.byteLength) {
                // we can assume that n + 1 poolSize will suffice given that we are likely done with encoding at this point
                // multiples of poolSize are faster to allocate than arbitrary sizes
                // if we are on an older platform that doesn't implement pooling use 8kb as poolSize (that's the default for node)
                const newSize = Math.ceil(it.offset / (Buffer.poolSize ?? 8 * 1024)) * (Buffer.poolSize ?? 8 * 1024);
                console.warn(`@colyseus/schema buffer overflow. Encoded state is higher than default BUFFER_SIZE. Use the following to increase default BUFFER_SIZE:

    import { Encoder } from "@colyseus/schema";
    Encoder.BUFFER_SIZE = ${Math.round(newSize / 1024)} * 1024; // ${Math.round(newSize / 1024)} KB
`);
                //
                // resize buffer and re-encode (TODO: can we avoid re-encoding here?)
                // -> No we probably can't unless we catch the need for resize before encoding which is likely more computationally expensive than resizing on demand
                //
                buffer = Buffer.alloc(newSize, buffer); // fill with buffer here to memcpy previous encoding steps beyond the initialOffset
                // assign resized buffer to local sharedBuffer
                if (buffer === this.sharedBuffer) {
                    this.sharedBuffer = buffer;
                }
                return this.encode({ offset: initialOffset }, view, buffer, changeSetName, isEncodeAll);
            }
            else {
                return buffer.subarray(0, it.offset);
            }
        }
        encodeAll(it = { offset: 0 }, buffer = this.sharedBuffer) {
            return this.encode(it, undefined, buffer, "allChanges", true);
        }
        encodeAllView(view, sharedOffset, it, bytes = this.sharedBuffer) {
            const viewOffset = it.offset;
            // try to encode "filtered" changes
            this.encode(it, view, bytes, "allFilteredChanges", true, viewOffset);
            return Buffer.concat([
                bytes.subarray(0, sharedOffset),
                bytes.subarray(viewOffset, it.offset)
            ]);
        }
        debugChanges(field) {
            const rootChangeSet = (typeof (field) === "string")
                ? this.root[field]
                : field;
            rootChangeSet.forEach((changeTree) => {
                const changeSet = changeTree[field];
                const metadata = changeTree.ref.constructor[Symbol.metadata];
                console.log("->", { ref: changeTree.ref.constructor.name, refId: changeTree.refId, changes: Object.keys(changeSet).length });
                for (const index in changeSet) {
                    const op = changeSet[index];
                    console.log("  ->", {
                        index,
                        field: metadata?.[index],
                        op: exports.OPERATION[op],
                    });
                }
            });
        }
        encodeView(view, sharedOffset, it, bytes = this.sharedBuffer) {
            const viewOffset = it.offset;
            // encode visibility changes (add/remove for this view)
            for (const [refId, changes] of view.changes) {
                const changeTree = this.root.changeTrees[refId];
                if (changeTree === undefined) {
                    // detached instance, remove from view and skip.
                    // console.log("detached instance, remove from view and skip.", refId);
                    view.changes.delete(refId);
                    continue;
                }
                const keys = Object.keys(changes);
                if (keys.length === 0) {
                    // FIXME: avoid having empty changes if no changes were made
                    // console.log("changes.size === 0, skip", refId, changeTree.ref.constructor.name);
                    continue;
                }
                const ref = changeTree.ref;
                const ctor = ref.constructor;
                const encoder = ctor[$encoder];
                const metadata = ctor[Symbol.metadata];
                bytes[it.offset++] = SWITCH_TO_STRUCTURE & 255;
                encode.number(bytes, changeTree.refId, it);
                for (let i = 0, numChanges = keys.length; i < numChanges; i++) {
                    const index = Number(keys[i]);
                    // workaround when using view.add() on item that has been deleted from state (see test "adding to view item that has been removed from state")
                    const value = changeTree.ref[$getByIndex](index);
                    const operation = (value !== undefined && changes[index]) || exports.OPERATION.DELETE;
                    // isEncodeAll = false
                    // hasView = true
                    encoder(this, bytes, changeTree, index, operation, it, false, true, metadata);
                }
            }
            //
            // TODO: only clear view changes after all views are encoded
            // (to allow re-using StateView's for multiple clients)
            //
            // clear "view" changes after encoding
            view.changes.clear();
            // try to encode "filtered" changes
            this.encode(it, view, bytes, "filteredChanges", false, viewOffset);
            return Buffer.concat([
                bytes.subarray(0, sharedOffset),
                bytes.subarray(viewOffset, it.offset)
            ]);
        }
        discardChanges() {
            // discard shared changes
            let length = this.root.changes.length;
            if (length > 0) {
                while (length--) {
                    this.root.changes[length]?.endEncode('changes');
                }
                this.root.changes.length = 0;
            }
            // discard filtered changes
            length = this.root.filteredChanges.length;
            if (length > 0) {
                while (length--) {
                    this.root.filteredChanges[length]?.endEncode('filteredChanges');
                }
                this.root.filteredChanges.length = 0;
            }
        }
        tryEncodeTypeId(bytes, baseType, targetType, it) {
            const baseTypeId = this.context.getTypeId(baseType);
            const targetTypeId = this.context.getTypeId(targetType);
            if (targetTypeId === undefined) {
                console.warn(`@colyseus/schema WARNING: Class "${targetType.name}" is not registered on TypeRegistry - Please either tag the class with @entity or define a @type() field.`);
                return;
            }
            if (baseTypeId !== targetTypeId) {
                bytes[it.offset++] = TYPE_ID & 255;
                encode.number(bytes, targetTypeId, it);
            }
        }
        get hasChanges() {
            return (this.root.changes.length > 0 ||
                this.root.filteredChanges.length > 0);
        }
    }

    function spliceOne(arr, index) {
        // manually splice an array
        if (index === -1 || index >= arr.length) {
            return false;
        }
        const len = arr.length - 1;
        for (let i = index; i < len; i++) {
            arr[i] = arr[i + 1];
        }
        arr.length = len;
        return true;
    }

    class DecodingWarning extends Error {
        constructor(message) {
            super(message);
            this.name = "DecodingWarning";
        }
    }
    class ReferenceTracker {
        constructor() {
            //
            // Relation of refId => Schema structure
            // For direct access of structures during decoding time.
            //
            this.refs = new Map();
            this.refIds = new WeakMap();
            this.refCounts = {};
            this.deletedRefs = new Set();
            this.callbacks = {};
            this.nextUniqueId = 0;
        }
        getNextUniqueId() {
            return this.nextUniqueId++;
        }
        // for decoding
        addRef(refId, ref, incrementCount = true) {
            this.refs.set(refId, ref);
            this.refIds.set(ref, refId);
            if (incrementCount) {
                this.refCounts[refId] = (this.refCounts[refId] || 0) + 1;
            }
            if (this.deletedRefs.has(refId)) {
                this.deletedRefs.delete(refId);
            }
        }
        // for decoding
        removeRef(refId) {
            const refCount = this.refCounts[refId];
            if (refCount === undefined) {
                try {
                    throw new DecodingWarning("trying to remove refId that doesn't exist: " + refId);
                }
                catch (e) {
                    console.warn(e);
                }
                return;
            }
            if (refCount === 0) {
                try {
                    const ref = this.refs.get(refId);
                    throw new DecodingWarning(`trying to remove refId '${refId}' with 0 refCount (${ref.constructor.name}: ${JSON.stringify(ref)})`);
                }
                catch (e) {
                    console.warn(e);
                }
                return;
            }
            if ((this.refCounts[refId] = refCount - 1) <= 0) {
                this.deletedRefs.add(refId);
            }
        }
        clearRefs() {
            this.refs.clear();
            this.deletedRefs.clear();
            this.callbacks = {};
            this.refCounts = {};
        }
        // for decoding
        garbageCollectDeletedRefs() {
            this.deletedRefs.forEach((refId) => {
                //
                // Skip active references.
                //
                if (this.refCounts[refId] > 0) {
                    return;
                }
                const ref = this.refs.get(refId);
                //
                // Ensure child schema instances have their references removed as well.
                //
                if (ref.constructor[Symbol.metadata] !== undefined) {
                    const metadata = ref.constructor[Symbol.metadata];
                    for (const index in metadata) {
                        const field = metadata[index].name;
                        const childRefId = typeof (ref[field]) === "object" && this.refIds.get(ref[field]);
                        if (childRefId && !this.deletedRefs.has(childRefId)) {
                            this.removeRef(childRefId);
                        }
                    }
                }
                else {
                    if (typeof (ref[$childType]) === "function") {
                        Array.from(ref.values())
                            .forEach((child) => {
                            const childRefId = this.refIds.get(child);
                            if (!this.deletedRefs.has(childRefId)) {
                                this.removeRef(childRefId);
                            }
                        });
                    }
                }
                this.refs.delete(refId); // remove ref
                delete this.refCounts[refId]; // remove ref count
                delete this.callbacks[refId]; // remove callbacks
            });
            // clear deleted refs.
            this.deletedRefs.clear();
        }
        addCallback(refId, fieldOrOperation, callback) {
            if (refId === undefined) {
                const name = (typeof (fieldOrOperation) === "number")
                    ? exports.OPERATION[fieldOrOperation]
                    : fieldOrOperation;
                throw new Error(`Can't addCallback on '${name}' (refId is undefined)`);
            }
            if (!this.callbacks[refId]) {
                this.callbacks[refId] = {};
            }
            if (!this.callbacks[refId][fieldOrOperation]) {
                this.callbacks[refId][fieldOrOperation] = [];
            }
            this.callbacks[refId][fieldOrOperation].push(callback);
            return () => this.removeCallback(refId, fieldOrOperation, callback);
        }
        removeCallback(refId, field, callback) {
            const index = this.callbacks?.[refId]?.[field]?.indexOf(callback);
            if (index !== -1) {
                spliceOne(this.callbacks[refId][field], index);
            }
        }
    }

    class Decoder {
        constructor(root, context) {
            this.currentRefId = 0;
            this.setState(root);
            this.context = context || new TypeContext(root.constructor);
            // console.log(">>>>>>>>>>>>>>>> Decoder types");
            // this.context.schemas.forEach((id, schema) => {
            //     console.log("type:", id, schema.name, Object.keys(schema[Symbol.metadata]));
            // });
        }
        setState(root) {
            this.state = root;
            this.root = new ReferenceTracker();
            this.root.addRef(0, root);
        }
        decode(bytes, it = { offset: 0 }, ref = this.state) {
            const allChanges = [];
            const $root = this.root;
            const totalBytes = bytes.byteLength;
            let decoder = ref['constructor'][$decoder];
            this.currentRefId = 0;
            while (it.offset < totalBytes) {
                //
                // Peek ahead, check if it's a switch to a different structure
                //
                if (bytes[it.offset] == SWITCH_TO_STRUCTURE) {
                    it.offset++;
                    this.currentRefId = decode.number(bytes, it);
                    const nextRef = $root.refs.get(this.currentRefId);
                    //
                    // Trying to access a reference that haven't been decoded yet.
                    //
                    if (!nextRef) {
                        throw new Error(`"refId" not found: ${this.currentRefId}`);
                    }
                    ref[$onDecodeEnd]?.();
                    ref = nextRef;
                    decoder = ref.constructor[$decoder];
                    continue;
                }
                const result = decoder(this, bytes, it, ref, allChanges);
                if (result === DEFINITION_MISMATCH) {
                    console.warn("@colyseus/schema: definition mismatch");
                    //
                    // keep skipping next bytes until reaches a known structure
                    // by local decoder.
                    //
                    const nextIterator = { offset: it.offset };
                    while (it.offset < totalBytes) {
                        if (bytes[it.offset] === SWITCH_TO_STRUCTURE) {
                            nextIterator.offset = it.offset + 1;
                            if ($root.refs.has(decode.number(bytes, nextIterator))) {
                                break;
                            }
                        }
                        it.offset++;
                    }
                    continue;
                }
            }
            // FIXME: DRY with SWITCH_TO_STRUCTURE block.
            ref[$onDecodeEnd]?.();
            // trigger changes
            this.triggerChanges?.(allChanges);
            // drop references of unused schemas
            $root.garbageCollectDeletedRefs();
            return allChanges;
        }
        getInstanceType(bytes, it, defaultType) {
            let type;
            if (bytes[it.offset] === TYPE_ID) {
                it.offset++;
                const type_id = decode.number(bytes, it);
                type = this.context.get(type_id);
            }
            return type || defaultType;
        }
        createInstanceOfType(type) {
            // let instance: Schema = new (type as any)();
            // // assign root on $changes
            // instance[$changes].root = this.root[$changes].root;
            // return instance;
            return new type();
        }
        removeChildRefs(ref, allChanges) {
            const needRemoveRef = typeof (ref[$childType]) !== "string";
            const refId = this.root.refIds.get(ref);
            ref.forEach((value, key) => {
                allChanges.push({
                    ref: ref,
                    refId,
                    op: exports.OPERATION.DELETE,
                    field: key,
                    value: undefined,
                    previousValue: value
                });
                if (needRemoveRef) {
                    this.root.removeRef(this.root.refIds.get(value));
                }
            });
        }
    }

    /**
     * Reflection
     */
    class ReflectionField extends Schema {
    }
    __decorate([
        type("string")
    ], ReflectionField.prototype, "name", void 0);
    __decorate([
        type("string")
    ], ReflectionField.prototype, "type", void 0);
    __decorate([
        type("number")
    ], ReflectionField.prototype, "referencedType", void 0);
    class ReflectionType extends Schema {
        constructor() {
            super(...arguments);
            this.fields = new ArraySchema();
        }
    }
    __decorate([
        type("number")
    ], ReflectionType.prototype, "id", void 0);
    __decorate([
        type("number")
    ], ReflectionType.prototype, "extendsId", void 0);
    __decorate([
        type([ReflectionField])
    ], ReflectionType.prototype, "fields", void 0);
    class Reflection extends Schema {
        constructor() {
            super(...arguments);
            this.types = new ArraySchema();
        }
        /**
         * Encodes the TypeContext of an Encoder into a buffer.
         *
         * @param encoder Encoder instance
         * @param it
         * @returns
         */
        static encode(encoder, it = { offset: 0 }) {
            const context = encoder.context;
            const reflection = new Reflection();
            const reflectionEncoder = new Encoder(reflection);
            // rootType is usually the first schema passed to the Encoder
            // (unless it inherits from another schema)
            const rootType = context.schemas.get(encoder.state.constructor);
            if (rootType > 0) {
                reflection.rootType = rootType;
            }
            const includedTypeIds = new Set();
            const pendingReflectionTypes = {};
            // add type to reflection in a way that respects inheritance
            // (parent types should be added before their children)
            const addType = (type) => {
                if (type.extendsId === undefined || includedTypeIds.has(type.extendsId)) {
                    includedTypeIds.add(type.id);
                    reflection.types.push(type);
                    const deps = pendingReflectionTypes[type.id];
                    if (deps !== undefined) {
                        delete pendingReflectionTypes[type.id];
                        deps.forEach((childType) => addType(childType));
                    }
                }
                else {
                    if (pendingReflectionTypes[type.extendsId] === undefined) {
                        pendingReflectionTypes[type.extendsId] = [];
                    }
                    pendingReflectionTypes[type.extendsId].push(type);
                }
            };
            context.schemas.forEach((typeid, klass) => {
                const type = new ReflectionType();
                type.id = Number(typeid);
                // support inheritance
                const inheritFrom = Object.getPrototypeOf(klass);
                if (inheritFrom !== Schema) {
                    type.extendsId = context.schemas.get(inheritFrom);
                }
                const metadata = klass[Symbol.metadata];
                //
                // FIXME: this is a workaround for inherited types without additional fields
                // if metadata is the same reference as the parent class - it means the class has no own metadata
                //
                if (metadata !== inheritFrom[Symbol.metadata]) {
                    for (const fieldIndex in metadata) {
                        const index = Number(fieldIndex);
                        const fieldName = metadata[index].name;
                        // skip fields from parent classes
                        if (!Object.prototype.hasOwnProperty.call(metadata, fieldName)) {
                            continue;
                        }
                        const reflectionField = new ReflectionField();
                        reflectionField.name = fieldName;
                        let fieldType;
                        const field = metadata[index];
                        if (typeof (field.type) === "string") {
                            fieldType = field.type;
                        }
                        else {
                            let childTypeSchema;
                            //
                            // TODO: refactor below.
                            //
                            if (Schema.is(field.type)) {
                                fieldType = "ref";
                                childTypeSchema = field.type;
                            }
                            else {
                                fieldType = Object.keys(field.type)[0];
                                if (typeof (field.type[fieldType]) === "string") {
                                    fieldType += ":" + field.type[fieldType]; // array:string
                                }
                                else {
                                    childTypeSchema = field.type[fieldType];
                                }
                            }
                            reflectionField.referencedType = (childTypeSchema)
                                ? context.getTypeId(childTypeSchema)
                                : -1;
                        }
                        reflectionField.type = fieldType;
                        type.fields.push(reflectionField);
                    }
                }
                addType(type);
            });
            // in case there are types that were not added due to inheritance
            for (const typeid in pendingReflectionTypes) {
                pendingReflectionTypes[typeid].forEach((type) => reflection.types.push(type));
            }
            const buf = reflectionEncoder.encodeAll(it);
            return Buffer.from(buf, 0, it.offset);
        }
        /**
         * Decodes the TypeContext from a buffer into a Decoder instance.
         *
         * @param bytes Reflection.encode() output
         * @param it
         * @returns Decoder instance
         */
        static decode(bytes, it) {
            const reflection = new Reflection();
            const reflectionDecoder = new Decoder(reflection);
            reflectionDecoder.decode(bytes, it);
            const typeContext = new TypeContext();
            // 1st pass, initialize metadata + inheritance
            reflection.types.forEach((reflectionType) => {
                const parentClass = typeContext.get(reflectionType.extendsId) ?? Schema;
                const schema = class _ extends parentClass {
                };
                // register for inheritance support
                TypeContext.register(schema);
                // // for inheritance support
                // Metadata.initialize(schema);
                typeContext.add(schema, reflectionType.id);
            }, {});
            // define fields
            const addFields = (metadata, reflectionType, parentFieldIndex) => {
                reflectionType.fields.forEach((field, i) => {
                    const fieldIndex = parentFieldIndex + i;
                    if (field.referencedType !== undefined) {
                        let fieldType = field.type;
                        let refType = typeContext.get(field.referencedType);
                        // map or array of primitive type (-1)
                        if (!refType) {
                            const typeInfo = field.type.split(":");
                            fieldType = typeInfo[0];
                            refType = typeInfo[1]; // string
                        }
                        if (fieldType === "ref") {
                            Metadata.addField(metadata, fieldIndex, field.name, refType);
                        }
                        else {
                            Metadata.addField(metadata, fieldIndex, field.name, { [fieldType]: refType });
                        }
                    }
                    else {
                        Metadata.addField(metadata, fieldIndex, field.name, field.type);
                    }
                });
            };
            // 2nd pass, set fields
            reflection.types.forEach((reflectionType) => {
                const schema = typeContext.get(reflectionType.id);
                // for inheritance support
                const metadata = Metadata.initialize(schema);
                const inheritedTypes = [];
                let parentType = reflectionType;
                do {
                    inheritedTypes.push(parentType);
                    parentType = reflection.types.find((t) => t.id === parentType.extendsId);
                } while (parentType);
                let parentFieldIndex = 0;
                inheritedTypes.reverse().forEach((reflectionType) => {
                    // add fields from all inherited classes
                    // TODO: refactor this to avoid adding fields from parent classes
                    addFields(metadata, reflectionType, parentFieldIndex);
                    parentFieldIndex += reflectionType.fields.length;
                });
            });
            const state = new (typeContext.get(reflection.rootType || 0))();
            return new Decoder(state, typeContext);
        }
    }
    __decorate([
        type([ReflectionType])
    ], Reflection.prototype, "types", void 0);
    __decorate([
        type("number")
    ], Reflection.prototype, "rootType", void 0);

    function getDecoderStateCallbacks(decoder) {
        const $root = decoder.root;
        const callbacks = $root.callbacks;
        const onAddCalls = new WeakMap();
        let currentOnAddCallback;
        decoder.triggerChanges = function (allChanges) {
            const uniqueRefIds = new Set();
            for (let i = 0, l = allChanges.length; i < l; i++) {
                const change = allChanges[i];
                const refId = change.refId;
                const ref = change.ref;
                const $callbacks = callbacks[refId];
                if (!$callbacks) {
                    continue;
                }
                //
                // trigger onRemove on child structure.
                //
                if ((change.op & exports.OPERATION.DELETE) === exports.OPERATION.DELETE &&
                    change.previousValue instanceof Schema) {
                    const deleteCallbacks = callbacks[$root.refIds.get(change.previousValue)]?.[exports.OPERATION.DELETE];
                    for (let i = deleteCallbacks?.length - 1; i >= 0; i--) {
                        deleteCallbacks[i]();
                    }
                }
                if (ref instanceof Schema) {
                    //
                    // Handle schema instance
                    //
                    if (!uniqueRefIds.has(refId)) {
                        // trigger onChange
                        const replaceCallbacks = $callbacks?.[exports.OPERATION.REPLACE];
                        for (let i = replaceCallbacks?.length - 1; i >= 0; i--) {
                            replaceCallbacks[i]();
                            // try {
                            // } catch (e) {
                            //     console.error(e);
                            // }
                        }
                    }
                    if ($callbacks.hasOwnProperty(change.field)) {
                        const fieldCallbacks = $callbacks[change.field];
                        for (let i = fieldCallbacks?.length - 1; i >= 0; i--) {
                            fieldCallbacks[i](change.value, change.previousValue);
                            // try {
                            // } catch (e) {
                            //     console.error(e);
                            // }
                        }
                    }
                }
                else {
                    //
                    // Handle collection of items
                    //
                    if ((change.op & exports.OPERATION.DELETE) === exports.OPERATION.DELETE) {
                        //
                        // FIXME: `previousValue` should always be available.
                        //
                        if (change.previousValue !== undefined) {
                            // triger onRemove
                            const deleteCallbacks = $callbacks[exports.OPERATION.DELETE];
                            for (let i = deleteCallbacks?.length - 1; i >= 0; i--) {
                                deleteCallbacks[i](change.previousValue, change.dynamicIndex ?? change.field);
                            }
                        }
                        // Handle DELETE_AND_ADD operations
                        if ((change.op & exports.OPERATION.ADD) === exports.OPERATION.ADD) {
                            const addCallbacks = $callbacks[exports.OPERATION.ADD];
                            for (let i = addCallbacks?.length - 1; i >= 0; i--) {
                                addCallbacks[i](change.value, change.dynamicIndex ?? change.field);
                            }
                        }
                    }
                    else if ((change.op & exports.OPERATION.ADD) === exports.OPERATION.ADD &&
                        change.previousValue !== change.value) {
                        // triger onAdd
                        const addCallbacks = $callbacks[exports.OPERATION.ADD];
                        for (let i = addCallbacks?.length - 1; i >= 0; i--) {
                            addCallbacks[i](change.value, change.dynamicIndex ?? change.field);
                        }
                    }
                    // trigger onChange
                    if (change.value !== change.previousValue &&
                        // FIXME: see "should not encode item if added and removed at the same patch" test case.
                        // some "ADD" + "DELETE" operations on same patch are being encoded as "DELETE"
                        (change.value !== undefined || change.previousValue !== undefined)) {
                        const replaceCallbacks = $callbacks[exports.OPERATION.REPLACE];
                        for (let i = replaceCallbacks?.length - 1; i >= 0; i--) {
                            replaceCallbacks[i](change.value, change.dynamicIndex ?? change.field);
                        }
                    }
                }
                uniqueRefIds.add(refId);
            }
        };
        function getProxy(metadataOrType, context) {
            let metadata = context.instance?.constructor[Symbol.metadata] || metadataOrType;
            let isCollection = ((context.instance && typeof (context.instance['forEach']) === "function") ||
                (metadataOrType && typeof (metadataOrType[Symbol.metadata]) === "undefined"));
            if (metadata && !isCollection) {
                const onAddListen = function (ref, prop, callback, immediate) {
                    // immediate trigger
                    if (immediate &&
                        context.instance[prop] !== undefined &&
                        !onAddCalls.has(currentOnAddCallback) // Workaround for https://github.com/colyseus/schema/issues/147
                    ) {
                        callback(context.instance[prop], undefined);
                    }
                    return $root.addCallback($root.refIds.get(ref), prop, callback);
                };
                /**
                 * Schema instances
                 */
                return new Proxy({
                    listen: function listen(prop, callback, immediate = true) {
                        if (context.instance) {
                            return onAddListen(context.instance, prop, callback, immediate);
                        }
                        else {
                            // collection instance not received yet
                            let detachCallback = () => { };
                            context.onInstanceAvailable((ref, existing) => {
                                detachCallback = onAddListen(ref, prop, callback, immediate && existing && !onAddCalls.has(currentOnAddCallback));
                            });
                            return () => detachCallback();
                        }
                    },
                    onChange: function onChange(callback) {
                        return $root.addCallback($root.refIds.get(context.instance), exports.OPERATION.REPLACE, callback);
                    },
                    //
                    // TODO: refactor `bindTo()` implementation.
                    // There is room for improvement.
                    //
                    bindTo: function bindTo(targetObject, properties) {
                        if (!properties) {
                            properties = Object.keys(metadata).map((index) => metadata[index].name);
                        }
                        return $root.addCallback($root.refIds.get(context.instance), exports.OPERATION.REPLACE, () => {
                            properties.forEach((prop) => targetObject[prop] = context.instance[prop]);
                        });
                    }
                }, {
                    get(target, prop) {
                        const metadataField = metadata[metadata[prop]];
                        if (metadataField) {
                            const instance = context.instance?.[prop];
                            const onInstanceAvailable = ((callback) => {
                                const unbind = $(context.instance).listen(prop, (value, _) => {
                                    callback(value, false);
                                    // FIXME: by "unbinding" the callback here,
                                    // it will not support when the server
                                    // re-instantiates the instance.
                                    //
                                    unbind?.();
                                }, false);
                                // has existing value
                                if ($root.refIds.get(instance) !== undefined) {
                                    callback(instance, true);
                                }
                            });
                            return getProxy(metadataField.type, {
                                // make sure refId is available, otherwise need to wait for the instance to be available.
                                instance: ($root.refIds.get(instance) && instance),
                                parentInstance: context.instance,
                                onInstanceAvailable,
                            });
                        }
                        else {
                            // accessing the function
                            return target[prop];
                        }
                    },
                    has(target, prop) { return metadata[prop] !== undefined; },
                    set(_, _1, _2) { throw new Error("not allowed"); },
                    deleteProperty(_, _1) { throw new Error("not allowed"); },
                });
            }
            else {
                /**
                 * Collection instances
                 */
                const onAdd = function (ref, callback, immediate) {
                    // Trigger callback on existing items
                    if (immediate) {
                        ref.forEach((v, k) => callback(v, k));
                    }
                    return $root.addCallback($root.refIds.get(ref), exports.OPERATION.ADD, (value, key) => {
                        onAddCalls.set(callback, true);
                        currentOnAddCallback = callback;
                        callback(value, key);
                        onAddCalls.delete(callback);
                        currentOnAddCallback = undefined;
                    });
                };
                const onRemove = function (ref, callback) {
                    return $root.addCallback($root.refIds.get(ref), exports.OPERATION.DELETE, callback);
                };
                const onChange = function (ref, callback) {
                    return $root.addCallback($root.refIds.get(ref), exports.OPERATION.REPLACE, callback);
                };
                return new Proxy({
                    onAdd: function (callback, immediate = true) {
                        //
                        // https://github.com/colyseus/schema/issues/147
                        // If parent instance has "onAdd" registered, avoid triggering immediate callback.
                        //
                        if (context.instance) {
                            return onAdd(context.instance, callback, immediate && !onAddCalls.has(currentOnAddCallback));
                        }
                        else if (context.onInstanceAvailable) {
                            // collection instance not received yet
                            let detachCallback = () => { };
                            context.onInstanceAvailable((ref, existing) => {
                                detachCallback = onAdd(ref, callback, immediate && existing && !onAddCalls.has(currentOnAddCallback));
                            });
                            return () => detachCallback();
                        }
                    },
                    onRemove: function (callback) {
                        if (context.instance) {
                            return onRemove(context.instance, callback);
                        }
                        else if (context.onInstanceAvailable) {
                            // collection instance not received yet
                            let detachCallback = () => { };
                            context.onInstanceAvailable((ref) => {
                                detachCallback = onRemove(ref, callback);
                            });
                            return () => detachCallback();
                        }
                    },
                    onChange: function (callback) {
                        if (context.instance) {
                            return onChange(context.instance, callback);
                        }
                        else if (context.onInstanceAvailable) {
                            // collection instance not received yet
                            let detachCallback = () => { };
                            context.onInstanceAvailable((ref) => {
                                detachCallback = onChange(ref, callback);
                            });
                            return () => detachCallback();
                        }
                    },
                }, {
                    get(target, prop) {
                        if (!target[prop]) {
                            throw new Error(`Can't access '${prop}' through callback proxy. access the instance directly.`);
                        }
                        return target[prop];
                    },
                    has(target, prop) { return target[prop] !== undefined; },
                    set(_, _1, _2) { throw new Error("not allowed"); },
                    deleteProperty(_, _1) { throw new Error("not allowed"); },
                });
            }
        }
        function $(instance) {
            return getProxy(undefined, { instance });
        }
        return $;
    }

    function getRawChangesCallback(decoder, callback) {
        decoder.triggerChanges = callback;
    }

    class StateView {
        constructor(iterable = false) {
            this.iterable = iterable;
            /**
             * List of ChangeTree's that are visible to this view
             */
            this.visible = new WeakSet();
            /**
             * List of ChangeTree's that are invisible to this view
             */
            this.invisible = new WeakSet();
            /**
             * Manual "ADD" operations for changes per ChangeTree, specific to this view.
             * (This is used to force encoding a property, even if it was not changed)
             */
            this.changes = new Map();
            if (iterable) {
                this.items = [];
            }
        }
        // TODO: allow to set multiple tags at once
        add(obj, tag = DEFAULT_VIEW_TAG, checkIncludeParent = true) {
            const changeTree = obj?.[$changes];
            if (!changeTree) {
                console.warn("StateView#add(), invalid object:", obj);
                return this;
            }
            else if (!changeTree.parent &&
                changeTree.refId !== 0 // allow root object
            ) {
                /**
                 * TODO: can we avoid this?
                 *
                 * When the "parent" structure has the @view() tag, it is currently
                 * not possible to identify it has to be added to the view as well
                 * (this.addParentOf() is not called).
                 */
                throw new Error(`Cannot add a detached instance to the StateView. Make sure to assign the "${changeTree.ref.constructor.name}" instance to the state before calling view.add()`);
            }
            // FIXME: ArraySchema/MapSchema do not have metadata
            const metadata = obj.constructor[Symbol.metadata];
            this.visible.add(changeTree);
            // add to iterable list (only the explicitly added items)
            if (this.iterable && checkIncludeParent) {
                this.items.push(obj);
            }
            // add parent ChangeTree's
            // - if it was invisible to this view
            // - if it were previously filtered out
            if (checkIncludeParent && changeTree.parent) {
                this.addParentOf(changeTree, tag);
            }
            //
            // TODO: when adding an item of a MapSchema, the changes may not
            // be set (only the parent's changes are set)
            //
            let changes = this.changes.get(changeTree.refId);
            if (changes === undefined) {
                changes = {};
                this.changes.set(changeTree.refId, changes);
            }
            // set tag
            if (tag !== DEFAULT_VIEW_TAG) {
                if (!this.tags) {
                    this.tags = new WeakMap();
                }
                let tags;
                if (!this.tags.has(changeTree)) {
                    tags = new Set();
                    this.tags.set(changeTree, tags);
                }
                else {
                    tags = this.tags.get(changeTree);
                }
                tags.add(tag);
                // Ref: add tagged properties
                metadata?.[$fieldIndexesByViewTag]?.[tag]?.forEach((index) => {
                    if (changeTree.getChange(index) !== exports.OPERATION.DELETE) {
                        changes[index] = exports.OPERATION.ADD;
                    }
                });
            }
            else {
                const isInvisible = this.invisible.has(changeTree);
                const changeSet = (changeTree.filteredChanges !== undefined)
                    ? changeTree.allFilteredChanges
                    : changeTree.allChanges;
                for (let i = 0, len = changeSet.operations.length; i < len; i++) {
                    const index = changeSet.operations[i];
                    if (index === undefined) {
                        continue;
                    } // skip "undefined" indexes
                    const op = changeTree.indexedOperations[index] ?? exports.OPERATION.ADD;
                    const tagAtIndex = metadata?.[index].tag;
                    if (!changeTree.isNew && // new structures will be added as part of .encode() call, no need to force it to .encodeView()
                        (isInvisible || // if "invisible", include all
                            tagAtIndex === undefined || // "all change" with no tag
                            tagAtIndex === tag // tagged property
                        ) &&
                        op !== exports.OPERATION.DELETE) {
                        changes[index] = op;
                    }
                }
            }
            // Add children of this ChangeTree to this view
            changeTree.forEachChild((change, index) => {
                // Do not ADD children that don't have the same tag
                if (metadata &&
                    metadata[index].tag !== undefined &&
                    metadata[index].tag !== tag) {
                    return;
                }
                this.add(change.ref, tag, false);
            });
            return this;
        }
        addParentOf(childChangeTree, tag) {
            const changeTree = childChangeTree.parent[$changes];
            const parentIndex = childChangeTree.parentIndex;
            if (!this.visible.has(changeTree)) {
                // view must have all "changeTree" parent tree
                this.visible.add(changeTree);
                // add parent's parent
                const parentChangeTree = changeTree.parent?.[$changes];
                if (parentChangeTree && (parentChangeTree.filteredChanges !== undefined)) {
                    this.addParentOf(changeTree, tag);
                }
                // // parent is already available, no need to add it!
                // if (!this.invisible.has(changeTree)) { return; }
            }
            // add parent's tag properties
            if (changeTree.getChange(parentIndex) !== exports.OPERATION.DELETE) {
                let changes = this.changes.get(changeTree.refId);
                if (changes === undefined) {
                    changes = {};
                    this.changes.set(changeTree.refId, changes);
                }
                if (!this.tags) {
                    this.tags = new WeakMap();
                }
                let tags;
                if (!this.tags.has(changeTree)) {
                    tags = new Set();
                    this.tags.set(changeTree, tags);
                }
                else {
                    tags = this.tags.get(changeTree);
                }
                tags.add(tag);
                changes[parentIndex] = exports.OPERATION.ADD;
            }
        }
        remove(obj, tag = DEFAULT_VIEW_TAG, _isClear = false) {
            const changeTree = obj[$changes];
            if (!changeTree) {
                console.warn("StateView#remove(), invalid object:", obj);
                return this;
            }
            this.visible.delete(changeTree);
            // remove from iterable list
            if (this.iterable &&
                !_isClear // no need to remove during clear(), as it will be cleared entirely
            ) {
                spliceOne(this.items, this.items.indexOf(obj));
            }
            const ref = changeTree.ref;
            const metadata = ref.constructor[Symbol.metadata]; // ArraySchema/MapSchema do not have metadata
            let changes = this.changes.get(changeTree.refId);
            if (changes === undefined) {
                changes = {};
                this.changes.set(changeTree.refId, changes);
            }
            if (tag === DEFAULT_VIEW_TAG) {
                // parent is collection (Map/Array)
                const parent = changeTree.parent;
                if (!Metadata.isValidInstance(parent) && changeTree.isFiltered) {
                    const parentChangeTree = parent[$changes];
                    let changes = this.changes.get(parentChangeTree.refId);
                    if (changes === undefined) {
                        changes = {};
                        this.changes.set(parentChangeTree.refId, changes);
                    }
                    // DELETE / DELETE BY REF ID
                    changes[changeTree.parentIndex] = exports.OPERATION.DELETE;
                }
                else {
                    // delete all "tagged" properties.
                    metadata?.[$viewFieldIndexes]?.forEach((index) => changes[index] = exports.OPERATION.DELETE);
                }
            }
            else {
                // delete only tagged properties
                metadata?.[$fieldIndexesByViewTag][tag].forEach((index) => changes[index] = exports.OPERATION.DELETE);
            }
            // remove tag
            if (this.tags && this.tags.has(changeTree)) {
                const tags = this.tags.get(changeTree);
                if (tag === undefined) {
                    // delete all tags
                    this.tags.delete(changeTree);
                }
                else {
                    // delete specific tag
                    tags.delete(tag);
                    // if tag set is empty, delete it entirely
                    if (tags.size === 0) {
                        this.tags.delete(changeTree);
                    }
                }
            }
            return this;
        }
        has(obj) {
            return this.visible.has(obj[$changes]);
        }
        hasTag(ob, tag = DEFAULT_VIEW_TAG) {
            const tags = this.tags?.get(ob[$changes]);
            return tags?.has(tag) ?? false;
        }
        clear() {
            if (!this.iterable) {
                throw new Error("StateView#clear() is only available for iterable StateView's. Use StateView(iterable: true) constructor.");
            }
            for (let i = 0, l = this.items.length; i < l; i++) {
                this.remove(this.items[i], DEFAULT_VIEW_TAG, true);
            }
            // clear items array
            this.items.length = 0;
        }
        isChangeTreeVisible(changeTree) {
            let isVisible = this.visible.has(changeTree);
            //
            // TODO: avoid checking for parent visibility, most of the time it's not needed
            // See test case: 'should not be required to manually call view.add() items to child arrays without @view() tag'
            //
            if (!isVisible && changeTree.isVisibilitySharedWithParent) {
                // console.log("CHECK AGAINST PARENT...", {
                //     ref: changeTree.ref.constructor.name,
                //     refId: changeTree.refId,
                //     parent: changeTree.parent.constructor.name,
                // });
                if (this.visible.has(changeTree.parent[$changes])) {
                    this.visible.add(changeTree);
                    isVisible = true;
                }
            }
            return isVisible;
        }
    }

    registerType("map", { constructor: MapSchema });
    registerType("array", { constructor: ArraySchema });
    registerType("set", { constructor: SetSchema });
    registerType("collection", { constructor: CollectionSchema, });

    exports.$changes = $changes;
    exports.$childType = $childType;
    exports.$decoder = $decoder;
    exports.$deleteByIndex = $deleteByIndex;
    exports.$encoder = $encoder;
    exports.$filter = $filter;
    exports.$getByIndex = $getByIndex;
    exports.$track = $track;
    exports.ArraySchema = ArraySchema;
    exports.ChangeTree = ChangeTree;
    exports.CollectionSchema = CollectionSchema;
    exports.Decoder = Decoder;
    exports.Encoder = Encoder;
    exports.MapSchema = MapSchema;
    exports.Metadata = Metadata;
    exports.Reflection = Reflection;
    exports.ReflectionField = ReflectionField;
    exports.ReflectionType = ReflectionType;
    exports.Schema = Schema;
    exports.SetSchema = SetSchema;
    exports.StateView = StateView;
    exports.TypeContext = TypeContext;
    exports.decode = decode;
    exports.decodeKeyValueOperation = decodeKeyValueOperation;
    exports.decodeSchemaOperation = decodeSchemaOperation;
    exports.defineCustomTypes = defineCustomTypes;
    exports.defineTypes = defineTypes;
    exports.deprecated = deprecated;
    exports.dumpChanges = dumpChanges;
    exports.encode = encode;
    exports.encodeArray = encodeArray;
    exports.encodeKeyValueOperation = encodeKeyValueOperation;
    exports.encodeSchemaOperation = encodeSchemaOperation;
    exports.entity = entity;
    exports.getDecoderStateCallbacks = getDecoderStateCallbacks;
    exports.getRawChangesCallback = getRawChangesCallback;
    exports.registerType = registerType;
    exports.schema = schema;
    exports.type = type;
    exports.view = view;

}));


}),
"./node_modules/.pnpm/assert@2.1.0/node_modules/assert/build/assert.js": 
/*!*****************************************************************************!*\
  !*** ./node_modules/.pnpm/assert@2.1.0/node_modules/assert/build/assert.js ***!
  \*****************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/* provided dependency */ var process = __webpack_require__(/*! ./node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js */ "./node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/.pnpm/console-browserify@1.2.0/node_modules/console-browserify/index.js */ "./node_modules/.pnpm/console-browserify@1.2.0/node_modules/console-browserify/index.js");
// Currently in sync with Node.js lib/assert.js
// https://github.com/nodejs/node/commit/2a51ae424a513ec9a6aa3466baa0cc1d55dd4f3b

// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.



function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
var _require = __webpack_require__(/*! ./internal/errors */ "./node_modules/.pnpm/assert@2.1.0/node_modules/assert/build/internal/errors.js"),
  _require$codes = _require.codes,
  ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT,
  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
  ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE,
  ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE,
  ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
var AssertionError = __webpack_require__(/*! ./internal/assert/assertion_error */ "./node_modules/.pnpm/assert@2.1.0/node_modules/assert/build/internal/assert/assertion_error.js");
var _require2 = __webpack_require__(/*! util/ */ "./node_modules/.pnpm/util@0.12.5/node_modules/util/util.js"),
  inspect = _require2.inspect;
var _require$types = (__webpack_require__(/*! util/ */ "./node_modules/.pnpm/util@0.12.5/node_modules/util/util.js")/* .types */.types),
  isPromise = _require$types.isPromise,
  isRegExp = _require$types.isRegExp;
var objectAssign = __webpack_require__(/*! object.assign/polyfill */ "./node_modules/.pnpm/object.assign@4.1.7/node_modules/object.assign/polyfill.js")();
var objectIs = __webpack_require__(/*! object-is/polyfill */ "./node_modules/.pnpm/object-is@1.1.6/node_modules/object-is/polyfill.js")();
var RegExpPrototypeTest = __webpack_require__(/*! call-bind/callBound */ "./node_modules/.pnpm/call-bind@1.0.8/node_modules/call-bind/callBound.js")('RegExp.prototype.test');
var errorCache = new Map();
var isDeepEqual;
var isDeepStrictEqual;
var parseExpressionAt;
var findNodeAround;
var decoder;
function lazyLoadComparison() {
  var comparison = __webpack_require__(/*! ./internal/util/comparisons */ "./node_modules/.pnpm/assert@2.1.0/node_modules/assert/build/internal/util/comparisons.js");
  isDeepEqual = comparison.isDeepEqual;
  isDeepStrictEqual = comparison.isDeepStrictEqual;
}

// Escape control characters but not \n and \t to keep the line breaks and
// indentation intact.
// eslint-disable-next-line no-control-regex
var escapeSequencesRegExp = /[\x00-\x08\x0b\x0c\x0e-\x1f]/g;
var meta = ["\\u0000", "\\u0001", "\\u0002", "\\u0003", "\\u0004", "\\u0005", "\\u0006", "\\u0007", '\\b', '', '', "\\u000b", '\\f', '', "\\u000e", "\\u000f", "\\u0010", "\\u0011", "\\u0012", "\\u0013", "\\u0014", "\\u0015", "\\u0016", "\\u0017", "\\u0018", "\\u0019", "\\u001a", "\\u001b", "\\u001c", "\\u001d", "\\u001e", "\\u001f"];
var escapeFn = function escapeFn(str) {
  return meta[str.charCodeAt(0)];
};
var warned = false;

// The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;
var NO_EXCEPTION_SENTINEL = {};

// All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided. All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function innerFail(obj) {
  if (obj.message instanceof Error) throw obj.message;
  throw new AssertionError(obj);
}
function fail(actual, expected, message, operator, stackStartFn) {
  var argsLen = arguments.length;
  var internalMessage;
  if (argsLen === 0) {
    internalMessage = 'Failed';
  } else if (argsLen === 1) {
    message = actual;
    actual = undefined;
  } else {
    if (warned === false) {
      warned = true;
      var warn = process.emitWarning ? process.emitWarning : console.warn.bind(console);
      warn('assert.fail() with more than one argument is deprecated. ' + 'Please use assert.strictEqual() instead or only pass a message.', 'DeprecationWarning', 'DEP0094');
    }
    if (argsLen === 2) operator = '!=';
  }
  if (message instanceof Error) throw message;
  var errArgs = {
    actual: actual,
    expected: expected,
    operator: operator === undefined ? 'fail' : operator,
    stackStartFn: stackStartFn || fail
  };
  if (message !== undefined) {
    errArgs.message = message;
  }
  var err = new AssertionError(errArgs);
  if (internalMessage) {
    err.message = internalMessage;
    err.generatedMessage = true;
  }
  throw err;
}
assert.fail = fail;

// The AssertionError is defined in internal/error.
assert.AssertionError = AssertionError;
function innerOk(fn, argLen, value, message) {
  if (!value) {
    var generatedMessage = false;
    if (argLen === 0) {
      generatedMessage = true;
      message = 'No value argument passed to `assert.ok()`';
    } else if (message instanceof Error) {
      throw message;
    }
    var err = new AssertionError({
      actual: value,
      expected: true,
      message: message,
      operator: '==',
      stackStartFn: fn
    });
    err.generatedMessage = generatedMessage;
    throw err;
  }
}

// Pure assertion tests whether a value is truthy, as determined
// by !!value.
function ok() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  innerOk.apply(void 0, [ok, args.length].concat(args));
}
assert.ok = ok;

// The equality assertion tests shallow, coercive equality with ==.
/* eslint-disable no-restricted-properties */
assert.equal = function equal(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }
  // eslint-disable-next-line eqeqeq
  if (actual != expected) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: '==',
      stackStartFn: equal
    });
  }
};

// The non-equality assertion tests for whether two objects are not
// equal with !=.
assert.notEqual = function notEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }
  // eslint-disable-next-line eqeqeq
  if (actual == expected) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: '!=',
      stackStartFn: notEqual
    });
  }
};

// The equivalence assertion tests a deep equality relation.
assert.deepEqual = function deepEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }
  if (isDeepEqual === undefined) lazyLoadComparison();
  if (!isDeepEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'deepEqual',
      stackStartFn: deepEqual
    });
  }
};

// The non-equivalence assertion tests for any deep inequality.
assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }
  if (isDeepEqual === undefined) lazyLoadComparison();
  if (isDeepEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notDeepEqual',
      stackStartFn: notDeepEqual
    });
  }
};
/* eslint-enable */

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }
  if (isDeepEqual === undefined) lazyLoadComparison();
  if (!isDeepStrictEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'deepStrictEqual',
      stackStartFn: deepStrictEqual
    });
  }
};
assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }
  if (isDeepEqual === undefined) lazyLoadComparison();
  if (isDeepStrictEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notDeepStrictEqual',
      stackStartFn: notDeepStrictEqual
    });
  }
}
assert.strictEqual = function strictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }
  if (!objectIs(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'strictEqual',
      stackStartFn: strictEqual
    });
  }
};
assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }
  if (objectIs(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notStrictEqual',
      stackStartFn: notStrictEqual
    });
  }
};
var Comparison = /*#__PURE__*/_createClass(function Comparison(obj, keys, actual) {
  var _this = this;
  _classCallCheck(this, Comparison);
  keys.forEach(function (key) {
    if (key in obj) {
      if (actual !== undefined && typeof actual[key] === 'string' && isRegExp(obj[key]) && RegExpPrototypeTest(obj[key], actual[key])) {
        _this[key] = actual[key];
      } else {
        _this[key] = obj[key];
      }
    }
  });
});
function compareExceptionKey(actual, expected, key, message, keys, fn) {
  if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {
    if (!message) {
      // Create placeholder objects to create a nice output.
      var a = new Comparison(actual, keys);
      var b = new Comparison(expected, keys, actual);
      var err = new AssertionError({
        actual: a,
        expected: b,
        operator: 'deepStrictEqual',
        stackStartFn: fn
      });
      err.actual = actual;
      err.expected = expected;
      err.operator = fn.name;
      throw err;
    }
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: fn.name,
      stackStartFn: fn
    });
  }
}
function expectedException(actual, expected, msg, fn) {
  if (typeof expected !== 'function') {
    if (isRegExp(expected)) return RegExpPrototypeTest(expected, actual);
    // assert.doesNotThrow does not accept objects.
    if (arguments.length === 2) {
      throw new ERR_INVALID_ARG_TYPE('expected', ['Function', 'RegExp'], expected);
    }

    // Handle primitives properly.
    if (_typeof(actual) !== 'object' || actual === null) {
      var err = new AssertionError({
        actual: actual,
        expected: expected,
        message: msg,
        operator: 'deepStrictEqual',
        stackStartFn: fn
      });
      err.operator = fn.name;
      throw err;
    }
    var keys = Object.keys(expected);
    // Special handle errors to make sure the name and the message are compared
    // as well.
    if (expected instanceof Error) {
      keys.push('name', 'message');
    } else if (keys.length === 0) {
      throw new ERR_INVALID_ARG_VALUE('error', expected, 'may not be an empty object');
    }
    if (isDeepEqual === undefined) lazyLoadComparison();
    keys.forEach(function (key) {
      if (typeof actual[key] === 'string' && isRegExp(expected[key]) && RegExpPrototypeTest(expected[key], actual[key])) {
        return;
      }
      compareExceptionKey(actual, expected, key, msg, keys, fn);
    });
    return true;
  }
  // Guard instanceof against arrow functions as they don't have a prototype.
  if (expected.prototype !== undefined && actual instanceof expected) {
    return true;
  }
  if (Error.isPrototypeOf(expected)) {
    return false;
  }
  return expected.call({}, actual) === true;
}
function getActual(fn) {
  if (typeof fn !== 'function') {
    throw new ERR_INVALID_ARG_TYPE('fn', 'Function', fn);
  }
  try {
    fn();
  } catch (e) {
    return e;
  }
  return NO_EXCEPTION_SENTINEL;
}
function checkIsPromise(obj) {
  // Accept native ES6 promises and promises that are implemented in a similar
  // way. Do not accept thenables that use a function as `obj` and that have no
  // `catch` handler.

  // TODO: thenables are checked up until they have the correct methods,
  // but according to documentation, the `then` method should receive
  // the `fulfill` and `reject` arguments as well or it may be never resolved.

  return isPromise(obj) || obj !== null && _typeof(obj) === 'object' && typeof obj.then === 'function' && typeof obj.catch === 'function';
}
function waitForActual(promiseFn) {
  return Promise.resolve().then(function () {
    var resultPromise;
    if (typeof promiseFn === 'function') {
      // Return a rejected promise if `promiseFn` throws synchronously.
      resultPromise = promiseFn();
      // Fail in case no promise is returned.
      if (!checkIsPromise(resultPromise)) {
        throw new ERR_INVALID_RETURN_VALUE('instance of Promise', 'promiseFn', resultPromise);
      }
    } else if (checkIsPromise(promiseFn)) {
      resultPromise = promiseFn;
    } else {
      throw new ERR_INVALID_ARG_TYPE('promiseFn', ['Function', 'Promise'], promiseFn);
    }
    return Promise.resolve().then(function () {
      return resultPromise;
    }).then(function () {
      return NO_EXCEPTION_SENTINEL;
    }).catch(function (e) {
      return e;
    });
  });
}
function expectsError(stackStartFn, actual, error, message) {
  if (typeof error === 'string') {
    if (arguments.length === 4) {
      throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);
    }
    if (_typeof(actual) === 'object' && actual !== null) {
      if (actual.message === error) {
        throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error message \"".concat(actual.message, "\" is identical to the message."));
      }
    } else if (actual === error) {
      throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error \"".concat(actual, "\" is identical to the message."));
    }
    message = error;
    error = undefined;
  } else if (error != null && _typeof(error) !== 'object' && typeof error !== 'function') {
    throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);
  }
  if (actual === NO_EXCEPTION_SENTINEL) {
    var details = '';
    if (error && error.name) {
      details += " (".concat(error.name, ")");
    }
    details += message ? ": ".concat(message) : '.';
    var fnType = stackStartFn.name === 'rejects' ? 'rejection' : 'exception';
    innerFail({
      actual: undefined,
      expected: error,
      operator: stackStartFn.name,
      message: "Missing expected ".concat(fnType).concat(details),
      stackStartFn: stackStartFn
    });
  }
  if (error && !expectedException(actual, error, message, stackStartFn)) {
    throw actual;
  }
}
function expectsNoError(stackStartFn, actual, error, message) {
  if (actual === NO_EXCEPTION_SENTINEL) return;
  if (typeof error === 'string') {
    message = error;
    error = undefined;
  }
  if (!error || expectedException(actual, error)) {
    var details = message ? ": ".concat(message) : '.';
    var fnType = stackStartFn.name === 'doesNotReject' ? 'rejection' : 'exception';
    innerFail({
      actual: actual,
      expected: error,
      operator: stackStartFn.name,
      message: "Got unwanted ".concat(fnType).concat(details, "\n") + "Actual message: \"".concat(actual && actual.message, "\""),
      stackStartFn: stackStartFn
    });
  }
  throw actual;
}
assert.throws = function throws(promiseFn) {
  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }
  expectsError.apply(void 0, [throws, getActual(promiseFn)].concat(args));
};
assert.rejects = function rejects(promiseFn) {
  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    args[_key3 - 1] = arguments[_key3];
  }
  return waitForActual(promiseFn).then(function (result) {
    return expectsError.apply(void 0, [rejects, result].concat(args));
  });
};
assert.doesNotThrow = function doesNotThrow(fn) {
  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    args[_key4 - 1] = arguments[_key4];
  }
  expectsNoError.apply(void 0, [doesNotThrow, getActual(fn)].concat(args));
};
assert.doesNotReject = function doesNotReject(fn) {
  for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
    args[_key5 - 1] = arguments[_key5];
  }
  return waitForActual(fn).then(function (result) {
    return expectsNoError.apply(void 0, [doesNotReject, result].concat(args));
  });
};
assert.ifError = function ifError(err) {
  if (err !== null && err !== undefined) {
    var message = 'ifError got unwanted exception: ';
    if (_typeof(err) === 'object' && typeof err.message === 'string') {
      if (err.message.length === 0 && err.constructor) {
        message += err.constructor.name;
      } else {
        message += err.message;
      }
    } else {
      message += inspect(err);
    }
    var newErr = new AssertionError({
      actual: err,
      expected: null,
      operator: 'ifError',
      message: message,
      stackStartFn: ifError
    });

    // Make sure we actually have a stack trace!
    var origStack = err.stack;
    if (typeof origStack === 'string') {
      // This will remove any duplicated frames from the error frames taken
      // from within `ifError` and add the original error frames to the newly
      // created ones.
      var tmp2 = origStack.split('\n');
      tmp2.shift();
      // Filter all frames existing in err.stack.
      var tmp1 = newErr.stack.split('\n');
      for (var i = 0; i < tmp2.length; i++) {
        // Find the first occurrence of the frame.
        var pos = tmp1.indexOf(tmp2[i]);
        if (pos !== -1) {
          // Only keep new frames.
          tmp1 = tmp1.slice(0, pos);
          break;
        }
      }
      newErr.stack = "".concat(tmp1.join('\n'), "\n").concat(tmp2.join('\n'));
    }
    throw newErr;
  }
};

// Currently in sync with Node.js lib/assert.js
// https://github.com/nodejs/node/commit/2a871df3dfb8ea663ef5e1f8f62701ec51384ecb
function internalMatch(string, regexp, message, fn, fnName) {
  if (!isRegExp(regexp)) {
    throw new ERR_INVALID_ARG_TYPE('regexp', 'RegExp', regexp);
  }
  var match = fnName === 'match';
  if (typeof string !== 'string' || RegExpPrototypeTest(regexp, string) !== match) {
    if (message instanceof Error) {
      throw message;
    }
    var generatedMessage = !message;

    // 'The input was expected to not match the regular expression ' +
    message = message || (typeof string !== 'string' ? 'The "string" argument must be of type string. Received type ' + "".concat(_typeof(string), " (").concat(inspect(string), ")") : (match ? 'The input did not match the regular expression ' : 'The input was expected to not match the regular expression ') + "".concat(inspect(regexp), ". Input:\n\n").concat(inspect(string), "\n"));
    var err = new AssertionError({
      actual: string,
      expected: regexp,
      message: message,
      operator: fnName,
      stackStartFn: fn
    });
    err.generatedMessage = generatedMessage;
    throw err;
  }
}
assert.match = function match(string, regexp, message) {
  internalMatch(string, regexp, message, match, 'match');
};
assert.doesNotMatch = function doesNotMatch(string, regexp, message) {
  internalMatch(string, regexp, message, doesNotMatch, 'doesNotMatch');
};

// Expose a strict only variant of assert
function strict() {
  for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
    args[_key6] = arguments[_key6];
  }
  innerOk.apply(void 0, [strict, args.length].concat(args));
}
assert.strict = objectAssign(strict, assert, {
  equal: assert.strictEqual,
  deepEqual: assert.deepStrictEqual,
  notEqual: assert.notStrictEqual,
  notDeepEqual: assert.notDeepStrictEqual
});
assert.strict.strict = assert.strict;

}),
"./node_modules/.pnpm/assert@2.1.0/node_modules/assert/build/internal/assert/assertion_error.js": 
/*!******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/assert@2.1.0/node_modules/assert/build/internal/assert/assertion_error.js ***!
  \******************************************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/* provided dependency */ var process = __webpack_require__(/*! ./node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js */ "./node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js");
// Currently in sync with Node.js lib/internal/assert/assertion_error.js
// https://github.com/nodejs/node/commit/0817840f775032169ddd70c85ac059f18ffcc81c



function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }
function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _require = __webpack_require__(/*! util/ */ "./node_modules/.pnpm/util@0.12.5/node_modules/util/util.js"),
  inspect = _require.inspect;
var _require2 = __webpack_require__(/*! ../errors */ "./node_modules/.pnpm/assert@2.1.0/node_modules/assert/build/internal/errors.js"),
  ERR_INVALID_ARG_TYPE = _require2.codes.ERR_INVALID_ARG_TYPE;

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }
  return str.substring(this_len - search.length, this_len) === search;
}

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat
function repeat(str, count) {
  count = Math.floor(count);
  if (str.length == 0 || count == 0) return '';
  var maxCount = str.length * count;
  count = Math.floor(Math.log(count) / Math.log(2));
  while (count) {
    str += str;
    count--;
  }
  str += str.substring(0, maxCount - str.length);
  return str;
}
var blue = '';
var green = '';
var red = '';
var white = '';
var kReadableOperator = {
  deepStrictEqual: 'Expected values to be strictly deep-equal:',
  strictEqual: 'Expected values to be strictly equal:',
  strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
  deepEqual: 'Expected values to be loosely deep-equal:',
  equal: 'Expected values to be loosely equal:',
  notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
  notStrictEqual: 'Expected "actual" to be strictly unequal to:',
  notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
  notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
  notEqual: 'Expected "actual" to be loosely unequal to:',
  notIdentical: 'Values identical but not reference-equal:'
};

// Comparing short primitives should just show === / !== instead of using the
// diff.
var kMaxShortLength = 10;
function copyError(source) {
  var keys = Object.keys(source);
  var target = Object.create(Object.getPrototypeOf(source));
  keys.forEach(function (key) {
    target[key] = source[key];
  });
  Object.defineProperty(target, 'message', {
    value: source.message
  });
  return target;
}
function inspectValue(val) {
  // The util.inspect default values could be changed. This makes sure the
  // error messages contain the necessary information nevertheless.
  return inspect(val, {
    compact: false,
    customInspect: false,
    depth: 1000,
    maxArrayLength: Infinity,
    // Assert compares only enumerable properties (with a few exceptions).
    showHidden: false,
    // Having a long line as error is better than wrapping the line for
    // comparison for now.
    // TODO(BridgeAR): `breakLength` should be limited as soon as soon as we
    // have meta information about the inspected properties (i.e., know where
    // in what line the property starts and ends).
    breakLength: Infinity,
    // Assert does not detect proxies currently.
    showProxy: false,
    sorted: true,
    // Inspect getters as we also check them when comparing entries.
    getters: true
  });
}
function createErrDiff(actual, expected, operator) {
  var other = '';
  var res = '';
  var lastPos = 0;
  var end = '';
  var skipped = false;
  var actualInspected = inspectValue(actual);
  var actualLines = actualInspected.split('\n');
  var expectedLines = inspectValue(expected).split('\n');
  var i = 0;
  var indicator = '';

  // In case both values are objects explicitly mark them as not reference equal
  // for the `strictEqual` operator.
  if (operator === 'strictEqual' && _typeof(actual) === 'object' && _typeof(expected) === 'object' && actual !== null && expected !== null) {
    operator = 'strictEqualObject';
  }

  // If "actual" and "expected" fit on a single line and they are not strictly
  // equal, check further special handling.
  if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {
    var inputLength = actualLines[0].length + expectedLines[0].length;
    // If the character length of "actual" and "expected" together is less than
    // kMaxShortLength and if neither is an object and at least one of them is
    // not `zero`, use the strict equal comparison to visualize the output.
    if (inputLength <= kMaxShortLength) {
      if ((_typeof(actual) !== 'object' || actual === null) && (_typeof(expected) !== 'object' || expected === null) && (actual !== 0 || expected !== 0)) {
        // -0 === +0
        return "".concat(kReadableOperator[operator], "\n\n") + "".concat(actualLines[0], " !== ").concat(expectedLines[0], "\n");
      }
    } else if (operator !== 'strictEqualObject') {
      // If the stderr is a tty and the input length is lower than the current
      // columns per line, add a mismatch indicator below the output. If it is
      // not a tty, use a default value of 80 characters.
      var maxLength = process.stderr && process.stderr.isTTY ? process.stderr.columns : 80;
      if (inputLength < maxLength) {
        while (actualLines[0][i] === expectedLines[0][i]) {
          i++;
        }
        // Ignore the first characters.
        if (i > 2) {
          // Add position indicator for the first mismatch in case it is a
          // single line and the input length is less than the column length.
          indicator = "\n  ".concat(repeat(' ', i), "^");
          i = 0;
        }
      }
    }
  }

  // Remove all ending lines that match (this optimizes the output for
  // readability by reducing the number of total changed lines).
  var a = actualLines[actualLines.length - 1];
  var b = expectedLines[expectedLines.length - 1];
  while (a === b) {
    if (i++ < 2) {
      end = "\n  ".concat(a).concat(end);
    } else {
      other = a;
    }
    actualLines.pop();
    expectedLines.pop();
    if (actualLines.length === 0 || expectedLines.length === 0) break;
    a = actualLines[actualLines.length - 1];
    b = expectedLines[expectedLines.length - 1];
  }
  var maxLines = Math.max(actualLines.length, expectedLines.length);
  // Strict equal with identical objects that are not identical by reference.
  // E.g., assert.deepStrictEqual({ a: Symbol() }, { a: Symbol() })
  if (maxLines === 0) {
    // We have to get the result again. The lines were all removed before.
    var _actualLines = actualInspected.split('\n');

    // Only remove lines in case it makes sense to collapse those.
    // TODO: Accept env to always show the full error.
    if (_actualLines.length > 30) {
      _actualLines[26] = "".concat(blue, "...").concat(white);
      while (_actualLines.length > 27) {
        _actualLines.pop();
      }
    }
    return "".concat(kReadableOperator.notIdentical, "\n\n").concat(_actualLines.join('\n'), "\n");
  }
  if (i > 3) {
    end = "\n".concat(blue, "...").concat(white).concat(end);
    skipped = true;
  }
  if (other !== '') {
    end = "\n  ".concat(other).concat(end);
    other = '';
  }
  var printedLines = 0;
  var msg = kReadableOperator[operator] + "\n".concat(green, "+ actual").concat(white, " ").concat(red, "- expected").concat(white);
  var skippedMsg = " ".concat(blue, "...").concat(white, " Lines skipped");
  for (i = 0; i < maxLines; i++) {
    // Only extra expected lines exist
    var cur = i - lastPos;
    if (actualLines.length < i + 1) {
      // If the last diverging line is more than one line above and the
      // current line is at least line three, add some of the former lines and
      // also add dots to indicate skipped entries.
      if (cur > 1 && i > 2) {
        if (cur > 4) {
          res += "\n".concat(blue, "...").concat(white);
          skipped = true;
        } else if (cur > 3) {
          res += "\n  ".concat(expectedLines[i - 2]);
          printedLines++;
        }
        res += "\n  ".concat(expectedLines[i - 1]);
        printedLines++;
      }
      // Mark the current line as the last diverging one.
      lastPos = i;
      // Add the expected line to the cache.
      other += "\n".concat(red, "-").concat(white, " ").concat(expectedLines[i]);
      printedLines++;
      // Only extra actual lines exist
    } else if (expectedLines.length < i + 1) {
      // If the last diverging line is more than one line above and the
      // current line is at least line three, add some of the former lines and
      // also add dots to indicate skipped entries.
      if (cur > 1 && i > 2) {
        if (cur > 4) {
          res += "\n".concat(blue, "...").concat(white);
          skipped = true;
        } else if (cur > 3) {
          res += "\n  ".concat(actualLines[i - 2]);
          printedLines++;
        }
        res += "\n  ".concat(actualLines[i - 1]);
        printedLines++;
      }
      // Mark the current line as the last diverging one.
      lastPos = i;
      // Add the actual line to the result.
      res += "\n".concat(green, "+").concat(white, " ").concat(actualLines[i]);
      printedLines++;
      // Lines diverge
    } else {
      var expectedLine = expectedLines[i];
      var actualLine = actualLines[i];
      // If the lines diverge, specifically check for lines that only diverge by
      // a trailing comma. In that case it is actually identical and we should
      // mark it as such.
      var divergingLines = actualLine !== expectedLine && (!endsWith(actualLine, ',') || actualLine.slice(0, -1) !== expectedLine);
      // If the expected line has a trailing comma but is otherwise identical,
      // add a comma at the end of the actual line. Otherwise the output could
      // look weird as in:
      //
      //   [
      //     1         // No comma at the end!
      // +   2
      //   ]
      //
      if (divergingLines && endsWith(expectedLine, ',') && expectedLine.slice(0, -1) === actualLine) {
        divergingLines = false;
        actualLine += ',';
      }
      if (divergingLines) {
        // If the last diverging line is more than one line above and the
        // current line is at least line three, add some of the former lines and
        // also add dots to indicate skipped entries.
        if (cur > 1 && i > 2) {
          if (cur > 4) {
            res += "\n".concat(blue, "...").concat(white);
            skipped = true;
          } else if (cur > 3) {
            res += "\n  ".concat(actualLines[i - 2]);
            printedLines++;
          }
          res += "\n  ".concat(actualLines[i - 1]);
          printedLines++;
        }
        // Mark the current line as the last diverging one.
        lastPos = i;
        // Add the actual line to the result and cache the expected diverging
        // line so consecutive diverging lines show up as +++--- and not +-+-+-.
        res += "\n".concat(green, "+").concat(white, " ").concat(actualLine);
        other += "\n".concat(red, "-").concat(white, " ").concat(expectedLine);
        printedLines += 2;
        // Lines are identical
      } else {
        // Add all cached information to the result before adding other things
        // and reset the cache.
        res += other;
        other = '';
        // If the last diverging line is exactly one line above or if it is the
        // very first line, add the line to the result.
        if (cur === 1 || i === 0) {
          res += "\n  ".concat(actualLine);
          printedLines++;
        }
      }
    }
    // Inspected object to big (Show ~20 rows max)
    if (printedLines > 20 && i < maxLines - 2) {
      return "".concat(msg).concat(skippedMsg, "\n").concat(res, "\n").concat(blue, "...").concat(white).concat(other, "\n") + "".concat(blue, "...").concat(white);
    }
  }
  return "".concat(msg).concat(skipped ? skippedMsg : '', "\n").concat(res).concat(other).concat(end).concat(indicator);
}
var AssertionError = /*#__PURE__*/function (_Error, _inspect$custom) {
  _inherits(AssertionError, _Error);
  var _super = _createSuper(AssertionError);
  function AssertionError(options) {
    var _this;
    _classCallCheck(this, AssertionError);
    if (_typeof(options) !== 'object' || options === null) {
      throw new ERR_INVALID_ARG_TYPE('options', 'Object', options);
    }
    var message = options.message,
      operator = options.operator,
      stackStartFn = options.stackStartFn;
    var actual = options.actual,
      expected = options.expected;
    var limit = Error.stackTraceLimit;
    Error.stackTraceLimit = 0;
    if (message != null) {
      _this = _super.call(this, String(message));
    } else {
      if (process.stderr && process.stderr.isTTY) {
        // Reset on each call to make sure we handle dynamically set environment
        // variables correct.
        if (process.stderr && process.stderr.getColorDepth && process.stderr.getColorDepth() !== 1) {
          blue = "\x1B[34m";
          green = "\x1B[32m";
          white = "\x1B[39m";
          red = "\x1B[31m";
        } else {
          blue = '';
          green = '';
          white = '';
          red = '';
        }
      }
      // Prevent the error stack from being visible by duplicating the error
      // in a very close way to the original in case both sides are actually
      // instances of Error.
      if (_typeof(actual) === 'object' && actual !== null && _typeof(expected) === 'object' && expected !== null && 'stack' in actual && actual instanceof Error && 'stack' in expected && expected instanceof Error) {
        actual = copyError(actual);
        expected = copyError(expected);
      }
      if (operator === 'deepStrictEqual' || operator === 'strictEqual') {
        _this = _super.call(this, createErrDiff(actual, expected, operator));
      } else if (operator === 'notDeepStrictEqual' || operator === 'notStrictEqual') {
        // In case the objects are equal but the operator requires unequal, show
        // the first object and say A equals B
        var base = kReadableOperator[operator];
        var res = inspectValue(actual).split('\n');

        // In case "actual" is an object, it should not be reference equal.
        if (operator === 'notStrictEqual' && _typeof(actual) === 'object' && actual !== null) {
          base = kReadableOperator.notStrictEqualObject;
        }

        // Only remove lines in case it makes sense to collapse those.
        // TODO: Accept env to always show the full error.
        if (res.length > 30) {
          res[26] = "".concat(blue, "...").concat(white);
          while (res.length > 27) {
            res.pop();
          }
        }

        // Only print a single input.
        if (res.length === 1) {
          _this = _super.call(this, "".concat(base, " ").concat(res[0]));
        } else {
          _this = _super.call(this, "".concat(base, "\n\n").concat(res.join('\n'), "\n"));
        }
      } else {
        var _res = inspectValue(actual);
        var other = '';
        var knownOperators = kReadableOperator[operator];
        if (operator === 'notDeepEqual' || operator === 'notEqual') {
          _res = "".concat(kReadableOperator[operator], "\n\n").concat(_res);
          if (_res.length > 1024) {
            _res = "".concat(_res.slice(0, 1021), "...");
          }
        } else {
          other = "".concat(inspectValue(expected));
          if (_res.length > 512) {
            _res = "".concat(_res.slice(0, 509), "...");
          }
          if (other.length > 512) {
            other = "".concat(other.slice(0, 509), "...");
          }
          if (operator === 'deepEqual' || operator === 'equal') {
            _res = "".concat(knownOperators, "\n\n").concat(_res, "\n\nshould equal\n\n");
          } else {
            other = " ".concat(operator, " ").concat(other);
          }
        }
        _this = _super.call(this, "".concat(_res).concat(other));
      }
    }
    Error.stackTraceLimit = limit;
    _this.generatedMessage = !message;
    Object.defineProperty(_assertThisInitialized(_this), 'name', {
      value: 'AssertionError [ERR_ASSERTION]',
      enumerable: false,
      writable: true,
      configurable: true
    });
    _this.code = 'ERR_ASSERTION';
    _this.actual = actual;
    _this.expected = expected;
    _this.operator = operator;
    if (Error.captureStackTrace) {
      // eslint-disable-next-line no-restricted-syntax
      Error.captureStackTrace(_assertThisInitialized(_this), stackStartFn);
    }
    // Create error message including the error code in the name.
    _this.stack;
    // Reset the name.
    _this.name = 'AssertionError';
    return _possibleConstructorReturn(_this);
  }
  _createClass(AssertionError, [{
    key: "toString",
    value: function toString() {
      return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
    }
  }, {
    key: _inspect$custom,
    value: function value(recurseTimes, ctx) {
      // This limits the `actual` and `expected` property default inspection to
      // the minimum depth. Otherwise those values would be too verbose compared
      // to the actual error message which contains a combined view of these two
      // input values.
      return inspect(this, _objectSpread(_objectSpread({}, ctx), {}, {
        customInspect: false,
        depth: 0
      }));
    }
  }]);
  return AssertionError;
}( /*#__PURE__*/_wrapNativeSuper(Error), inspect.custom);
module.exports = AssertionError;

}),
"./node_modules/.pnpm/assert@2.1.0/node_modules/assert/build/internal/errors.js": 
/*!**************************************************************************************!*\
  !*** ./node_modules/.pnpm/assert@2.1.0/node_modules/assert/build/internal/errors.js ***!
  \**************************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
// Currently in sync with Node.js lib/internal/errors.js
// https://github.com/nodejs/node/commit/3b044962c48fe313905877a96b5d0894a5404f6f

/* eslint node-core/documented-errors: "error" */
/* eslint node-core/alphabetize-errors: "error" */
/* eslint node-core/prefer-util-format-errors: "error" */



// The whole point behind this internal module is to allow Node.js to no
// longer be forced to treat every error message change as a semver-major
// change. The NodeError classes here all expose a `code` property whose
// value statically and permanently identifies the error. While the error
// message may change, the code should not.
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var codes = {};

// Lazy loaded
var assert;
var util;
function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }
  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }
  var NodeError = /*#__PURE__*/function (_Base) {
    _inherits(NodeError, _Base);
    var _super = _createSuper(NodeError);
    function NodeError(arg1, arg2, arg3) {
      var _this;
      _classCallCheck(this, NodeError);
      _this = _super.call(this, getMessage(arg1, arg2, arg3));
      _this.code = code;
      return _this;
    }
    return _createClass(NodeError);
  }(Base);
  codes[code] = NodeError;
}

// https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });
    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
}

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
}

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }
  return str.substring(this_len - search.length, this_len) === search;
}

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }
  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}
createErrorType('ERR_AMBIGUOUS_ARGUMENT', 'The "%s" argument is ambiguous. %s', TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  if (assert === undefined) assert = __webpack_require__(/*! ../assert */ "./node_modules/.pnpm/assert@2.1.0/node_modules/assert/build/assert.js");
  assert(typeof name === 'string', "'name' must be a string");

  // determiner: 'must be' or 'must not be'
  var determiner;
  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }
  var msg;
  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  // TODO(BridgeAR): Improve the output by showing `null` and similar.
  msg += ". Received type ".concat(_typeof(actual));
  return msg;
}, TypeError);
createErrorType('ERR_INVALID_ARG_VALUE', function (name, value) {
  var reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'is invalid';
  if (util === undefined) util = __webpack_require__(/*! util/ */ "./node_modules/.pnpm/util@0.12.5/node_modules/util/util.js");
  var inspected = util.inspect(value);
  if (inspected.length > 128) {
    inspected = "".concat(inspected.slice(0, 128), "...");
  }
  return "The argument '".concat(name, "' ").concat(reason, ". Received ").concat(inspected);
}, TypeError, RangeError);
createErrorType('ERR_INVALID_RETURN_VALUE', function (input, name, value) {
  var type;
  if (value && value.constructor && value.constructor.name) {
    type = "instance of ".concat(value.constructor.name);
  } else {
    type = "type ".concat(_typeof(value));
  }
  return "Expected ".concat(input, " to be returned from the \"").concat(name, "\"") + " function but got ".concat(type, ".");
}, TypeError);
createErrorType('ERR_MISSING_ARGS', function () {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  if (assert === undefined) assert = __webpack_require__(/*! ../assert */ "./node_modules/.pnpm/assert@2.1.0/node_modules/assert/build/assert.js");
  assert(args.length > 0, 'At least one arg needs to be specified');
  var msg = 'The ';
  var len = args.length;
  args = args.map(function (a) {
    return "\"".concat(a, "\"");
  });
  switch (len) {
    case 1:
      msg += "".concat(args[0], " argument");
      break;
    case 2:
      msg += "".concat(args[0], " and ").concat(args[1], " arguments");
      break;
    default:
      msg += args.slice(0, len - 1).join(', ');
      msg += ", and ".concat(args[len - 1], " arguments");
      break;
  }
  return "".concat(msg, " must be specified");
}, TypeError);
module.exports.codes = codes;

}),
"./node_modules/.pnpm/assert@2.1.0/node_modules/assert/build/internal/util/comparisons.js": 
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/assert@2.1.0/node_modules/assert/build/internal/util/comparisons.js ***!
  \************************************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
// Currently in sync with Node.js lib/internal/util/comparisons.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9



function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var regexFlagsSupported = /a/g.flags !== undefined;
var arrayFromSet = function arrayFromSet(set) {
  var array = [];
  set.forEach(function (value) {
    return array.push(value);
  });
  return array;
};
var arrayFromMap = function arrayFromMap(map) {
  var array = [];
  map.forEach(function (value, key) {
    return array.push([key, value]);
  });
  return array;
};
var objectIs = Object.is ? Object.is : __webpack_require__(/*! object-is */ "./node_modules/.pnpm/object-is@1.1.6/node_modules/object-is/index.js");
var objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function () {
  return [];
};
var numberIsNaN = Number.isNaN ? Number.isNaN : __webpack_require__(/*! is-nan */ "./node_modules/.pnpm/is-nan@1.3.2/node_modules/is-nan/index.js");
function uncurryThis(f) {
  return f.call.bind(f);
}
var hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
var propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);
var objectToString = uncurryThis(Object.prototype.toString);
var _require$types = (__webpack_require__(/*! util/ */ "./node_modules/.pnpm/util@0.12.5/node_modules/util/util.js")/* .types */.types),
  isAnyArrayBuffer = _require$types.isAnyArrayBuffer,
  isArrayBufferView = _require$types.isArrayBufferView,
  isDate = _require$types.isDate,
  isMap = _require$types.isMap,
  isRegExp = _require$types.isRegExp,
  isSet = _require$types.isSet,
  isNativeError = _require$types.isNativeError,
  isBoxedPrimitive = _require$types.isBoxedPrimitive,
  isNumberObject = _require$types.isNumberObject,
  isStringObject = _require$types.isStringObject,
  isBooleanObject = _require$types.isBooleanObject,
  isBigIntObject = _require$types.isBigIntObject,
  isSymbolObject = _require$types.isSymbolObject,
  isFloat32Array = _require$types.isFloat32Array,
  isFloat64Array = _require$types.isFloat64Array;
function isNonIndex(key) {
  if (key.length === 0 || key.length > 10) return true;
  for (var i = 0; i < key.length; i++) {
    var code = key.charCodeAt(i);
    if (code < 48 || code > 57) return true;
  }
  // The maximum size for an array is 2 ** 32 -1.
  return key.length === 10 && key >= Math.pow(2, 32);
}
function getOwnNonIndexProperties(value) {
  return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));
}

// Taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function compare(a, b) {
  if (a === b) {
    return 0;
  }
  var x = a.length;
  var y = b.length;
  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }
  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
var ONLY_ENUMERABLE = undefined;
var kStrict = true;
var kLoose = false;
var kNoIterator = 0;
var kIsArray = 1;
var kIsSet = 2;
var kIsMap = 3;

// Check if they have the same source and flags
function areSimilarRegExps(a, b) {
  return regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);
}
function areSimilarFloatArrays(a, b) {
  if (a.byteLength !== b.byteLength) {
    return false;
  }
  for (var offset = 0; offset < a.byteLength; offset++) {
    if (a[offset] !== b[offset]) {
      return false;
    }
  }
  return true;
}
function areSimilarTypedArrays(a, b) {
  if (a.byteLength !== b.byteLength) {
    return false;
  }
  return compare(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;
}
function areEqualArrayBuffers(buf1, buf2) {
  return buf1.byteLength === buf2.byteLength && compare(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;
}
function isEqualBoxedPrimitive(val1, val2) {
  if (isNumberObject(val1)) {
    return isNumberObject(val2) && objectIs(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));
  }
  if (isStringObject(val1)) {
    return isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);
  }
  if (isBooleanObject(val1)) {
    return isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);
  }
  if (isBigIntObject(val1)) {
    return isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);
  }
  return isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);
}

// Notes: Type tags are historical [[Class]] properties that can be set by
// FunctionTemplate::SetClassName() in C++ or Symbol.toStringTag in JS
// and retrieved using Object.prototype.toString.call(obj) in JS
// See https://tc39.github.io/ecma262/#sec-object.prototype.tostring
// for a list of tags pre-defined in the spec.
// There are some unspecified tags in the wild too (e.g. typed array tags).
// Since tags can be altered, they only serve fast failures
//
// Typed arrays and buffers are checked by comparing the content in their
// underlying ArrayBuffer. This optimization requires that it's
// reasonable to interpret their underlying memory in the same way,
// which is checked by comparing their type tags.
// (e.g. a Uint8Array and a Uint16Array with the same memory content
// could still be different because they will be interpreted differently).
//
// For strict comparison, objects should have
// a) The same built-in type tags
// b) The same prototypes.

function innerDeepEqual(val1, val2, strict, memos) {
  // All identical values are equivalent, as determined by ===.
  if (val1 === val2) {
    if (val1 !== 0) return true;
    return strict ? objectIs(val1, val2) : true;
  }

  // Check more closely if val1 and val2 are equal.
  if (strict) {
    if (_typeof(val1) !== 'object') {
      return typeof val1 === 'number' && numberIsNaN(val1) && numberIsNaN(val2);
    }
    if (_typeof(val2) !== 'object' || val1 === null || val2 === null) {
      return false;
    }
    if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) {
      return false;
    }
  } else {
    if (val1 === null || _typeof(val1) !== 'object') {
      if (val2 === null || _typeof(val2) !== 'object') {
        // eslint-disable-next-line eqeqeq
        return val1 == val2;
      }
      return false;
    }
    if (val2 === null || _typeof(val2) !== 'object') {
      return false;
    }
  }
  var val1Tag = objectToString(val1);
  var val2Tag = objectToString(val2);
  if (val1Tag !== val2Tag) {
    return false;
  }
  if (Array.isArray(val1)) {
    // Check for sparse arrays and general fast path
    if (val1.length !== val2.length) {
      return false;
    }
    var keys1 = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
    var keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);
    if (keys1.length !== keys2.length) {
      return false;
    }
    return keyCheck(val1, val2, strict, memos, kIsArray, keys1);
  }
  // [browserify] This triggers on certain types in IE (Map/Set) so we don't
  // wan't to early return out of the rest of the checks. However we can check
  // if the second value is one of these values and the first isn't.
  if (val1Tag === '[object Object]') {
    // return keyCheck(val1, val2, strict, memos, kNoIterator);
    if (!isMap(val1) && isMap(val2) || !isSet(val1) && isSet(val2)) {
      return false;
    }
  }
  if (isDate(val1)) {
    if (!isDate(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) {
      return false;
    }
  } else if (isRegExp(val1)) {
    if (!isRegExp(val2) || !areSimilarRegExps(val1, val2)) {
      return false;
    }
  } else if (isNativeError(val1) || val1 instanceof Error) {
    // Do not compare the stack as it might differ even though the error itself
    // is otherwise identical.
    if (val1.message !== val2.message || val1.name !== val2.name) {
      return false;
    }
  } else if (isArrayBufferView(val1)) {
    if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {
      if (!areSimilarFloatArrays(val1, val2)) {
        return false;
      }
    } else if (!areSimilarTypedArrays(val1, val2)) {
      return false;
    }
    // Buffer.compare returns true, so val1.length === val2.length. If they both
    // only contain numeric keys, we don't need to exam further than checking
    // the symbols.
    var _keys = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
    var _keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);
    if (_keys.length !== _keys2.length) {
      return false;
    }
    return keyCheck(val1, val2, strict, memos, kNoIterator, _keys);
  } else if (isSet(val1)) {
    if (!isSet(val2) || val1.size !== val2.size) {
      return false;
    }
    return keyCheck(val1, val2, strict, memos, kIsSet);
  } else if (isMap(val1)) {
    if (!isMap(val2) || val1.size !== val2.size) {
      return false;
    }
    return keyCheck(val1, val2, strict, memos, kIsMap);
  } else if (isAnyArrayBuffer(val1)) {
    if (!areEqualArrayBuffers(val1, val2)) {
      return false;
    }
  } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) {
    return false;
  }
  return keyCheck(val1, val2, strict, memos, kNoIterator);
}
function getEnumerables(val, keys) {
  return keys.filter(function (k) {
    return propertyIsEnumerable(val, k);
  });
}
function keyCheck(val1, val2, strict, memos, iterationType, aKeys) {
  // For all remaining Object pairs, including Array, objects and Maps,
  // equivalence is determined by having:
  // a) The same number of owned enumerable properties
  // b) The same set of keys/indexes (although not necessarily the same order)
  // c) Equivalent values for every corresponding key/index
  // d) For Sets and Maps, equal contents
  // Note: this accounts for both named and indexed properties on Arrays.
  if (arguments.length === 5) {
    aKeys = Object.keys(val1);
    var bKeys = Object.keys(val2);

    // The pair must have the same number of owned properties.
    if (aKeys.length !== bKeys.length) {
      return false;
    }
  }

  // Cheap key test
  var i = 0;
  for (; i < aKeys.length; i++) {
    if (!hasOwnProperty(val2, aKeys[i])) {
      return false;
    }
  }
  if (strict && arguments.length === 5) {
    var symbolKeysA = objectGetOwnPropertySymbols(val1);
    if (symbolKeysA.length !== 0) {
      var count = 0;
      for (i = 0; i < symbolKeysA.length; i++) {
        var key = symbolKeysA[i];
        if (propertyIsEnumerable(val1, key)) {
          if (!propertyIsEnumerable(val2, key)) {
            return false;
          }
          aKeys.push(key);
          count++;
        } else if (propertyIsEnumerable(val2, key)) {
          return false;
        }
      }
      var symbolKeysB = objectGetOwnPropertySymbols(val2);
      if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count) {
        return false;
      }
    } else {
      var _symbolKeysB = objectGetOwnPropertySymbols(val2);
      if (_symbolKeysB.length !== 0 && getEnumerables(val2, _symbolKeysB).length !== 0) {
        return false;
      }
    }
  }
  if (aKeys.length === 0 && (iterationType === kNoIterator || iterationType === kIsArray && val1.length === 0 || val1.size === 0)) {
    return true;
  }

  // Use memos to handle cycles.
  if (memos === undefined) {
    memos = {
      val1: new Map(),
      val2: new Map(),
      position: 0
    };
  } else {
    // We prevent up to two map.has(x) calls by directly retrieving the value
    // and checking for undefined. The map can only contain numbers, so it is
    // safe to check for undefined only.
    var val2MemoA = memos.val1.get(val1);
    if (val2MemoA !== undefined) {
      var val2MemoB = memos.val2.get(val2);
      if (val2MemoB !== undefined) {
        return val2MemoA === val2MemoB;
      }
    }
    memos.position++;
  }
  memos.val1.set(val1, memos.position);
  memos.val2.set(val2, memos.position);
  var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);
  memos.val1.delete(val1);
  memos.val2.delete(val2);
  return areEq;
}
function setHasEqualElement(set, val1, strict, memo) {
  // Go looking.
  var setValues = arrayFromSet(set);
  for (var i = 0; i < setValues.length; i++) {
    var val2 = setValues[i];
    if (innerDeepEqual(val1, val2, strict, memo)) {
      // Remove the matching element to make sure we do not check that again.
      set.delete(val2);
      return true;
    }
  }
  return false;
}

// See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using
// Sadly it is not possible to detect corresponding values properly in case the
// type is a string, number, bigint or boolean. The reason is that those values
// can match lots of different string values (e.g., 1n == '+00001').
function findLooseMatchingPrimitives(prim) {
  switch (_typeof(prim)) {
    case 'undefined':
      return null;
    case 'object':
      // Only pass in null as object!
      return undefined;
    case 'symbol':
      return false;
    case 'string':
      prim = +prim;
    // Loose equal entries exist only if the string is possible to convert to
    // a regular number and not NaN.
    // Fall through
    case 'number':
      if (numberIsNaN(prim)) {
        return false;
      }
  }
  return true;
}
function setMightHaveLoosePrim(a, b, prim) {
  var altValue = findLooseMatchingPrimitives(prim);
  if (altValue != null) return altValue;
  return b.has(altValue) && !a.has(altValue);
}
function mapMightHaveLoosePrim(a, b, prim, item, memo) {
  var altValue = findLooseMatchingPrimitives(prim);
  if (altValue != null) {
    return altValue;
  }
  var curB = b.get(altValue);
  if (curB === undefined && !b.has(altValue) || !innerDeepEqual(item, curB, false, memo)) {
    return false;
  }
  return !a.has(altValue) && innerDeepEqual(item, curB, false, memo);
}
function setEquiv(a, b, strict, memo) {
  // This is a lazily initiated Set of entries which have to be compared
  // pairwise.
  var set = null;
  var aValues = arrayFromSet(a);
  for (var i = 0; i < aValues.length; i++) {
    var val = aValues[i];
    // Note: Checking for the objects first improves the performance for object
    // heavy sets but it is a minor slow down for primitives. As they are fast
    // to check this improves the worst case scenario instead.
    if (_typeof(val) === 'object' && val !== null) {
      if (set === null) {
        set = new Set();
      }
      // If the specified value doesn't exist in the second set its an not null
      // object (or non strict only: a not matching primitive) we'll need to go
      // hunting for something thats deep-(strict-)equal to it. To make this
      // O(n log n) complexity we have to copy these values in a new set first.
      set.add(val);
    } else if (!b.has(val)) {
      if (strict) return false;

      // Fast path to detect missing string, symbol, undefined and null values.
      if (!setMightHaveLoosePrim(a, b, val)) {
        return false;
      }
      if (set === null) {
        set = new Set();
      }
      set.add(val);
    }
  }
  if (set !== null) {
    var bValues = arrayFromSet(b);
    for (var _i = 0; _i < bValues.length; _i++) {
      var _val = bValues[_i];
      // We have to check if a primitive value is already
      // matching and only if it's not, go hunting for it.
      if (_typeof(_val) === 'object' && _val !== null) {
        if (!setHasEqualElement(set, _val, strict, memo)) return false;
      } else if (!strict && !a.has(_val) && !setHasEqualElement(set, _val, strict, memo)) {
        return false;
      }
    }
    return set.size === 0;
  }
  return true;
}
function mapHasEqualEntry(set, map, key1, item1, strict, memo) {
  // To be able to handle cases like:
  //   Map([[{}, 'a'], [{}, 'b']]) vs Map([[{}, 'b'], [{}, 'a']])
  // ... we need to consider *all* matching keys, not just the first we find.
  var setValues = arrayFromSet(set);
  for (var i = 0; i < setValues.length; i++) {
    var key2 = setValues[i];
    if (innerDeepEqual(key1, key2, strict, memo) && innerDeepEqual(item1, map.get(key2), strict, memo)) {
      set.delete(key2);
      return true;
    }
  }
  return false;
}
function mapEquiv(a, b, strict, memo) {
  var set = null;
  var aEntries = arrayFromMap(a);
  for (var i = 0; i < aEntries.length; i++) {
    var _aEntries$i = _slicedToArray(aEntries[i], 2),
      key = _aEntries$i[0],
      item1 = _aEntries$i[1];
    if (_typeof(key) === 'object' && key !== null) {
      if (set === null) {
        set = new Set();
      }
      set.add(key);
    } else {
      // By directly retrieving the value we prevent another b.has(key) check in
      // almost all possible cases.
      var item2 = b.get(key);
      if (item2 === undefined && !b.has(key) || !innerDeepEqual(item1, item2, strict, memo)) {
        if (strict) return false;
        // Fast path to detect missing string, symbol, undefined and null
        // keys.
        if (!mapMightHaveLoosePrim(a, b, key, item1, memo)) return false;
        if (set === null) {
          set = new Set();
        }
        set.add(key);
      }
    }
  }
  if (set !== null) {
    var bEntries = arrayFromMap(b);
    for (var _i2 = 0; _i2 < bEntries.length; _i2++) {
      var _bEntries$_i = _slicedToArray(bEntries[_i2], 2),
        _key = _bEntries$_i[0],
        item = _bEntries$_i[1];
      if (_typeof(_key) === 'object' && _key !== null) {
        if (!mapHasEqualEntry(set, a, _key, item, strict, memo)) return false;
      } else if (!strict && (!a.has(_key) || !innerDeepEqual(a.get(_key), item, false, memo)) && !mapHasEqualEntry(set, a, _key, item, false, memo)) {
        return false;
      }
    }
    return set.size === 0;
  }
  return true;
}
function objEquiv(a, b, strict, keys, memos, iterationType) {
  // Sets and maps don't have their entries accessible via normal object
  // properties.
  var i = 0;
  if (iterationType === kIsSet) {
    if (!setEquiv(a, b, strict, memos)) {
      return false;
    }
  } else if (iterationType === kIsMap) {
    if (!mapEquiv(a, b, strict, memos)) {
      return false;
    }
  } else if (iterationType === kIsArray) {
    for (; i < a.length; i++) {
      if (hasOwnProperty(a, i)) {
        if (!hasOwnProperty(b, i) || !innerDeepEqual(a[i], b[i], strict, memos)) {
          return false;
        }
      } else if (hasOwnProperty(b, i)) {
        return false;
      } else {
        // Array is sparse.
        var keysA = Object.keys(a);
        for (; i < keysA.length; i++) {
          var key = keysA[i];
          if (!hasOwnProperty(b, key) || !innerDeepEqual(a[key], b[key], strict, memos)) {
            return false;
          }
        }
        if (keysA.length !== Object.keys(b).length) {
          return false;
        }
        return true;
      }
    }
  }

  // The pair must have equivalent values for every corresponding key.
  // Possibly expensive deep test:
  for (i = 0; i < keys.length; i++) {
    var _key2 = keys[i];
    if (!innerDeepEqual(a[_key2], b[_key2], strict, memos)) {
      return false;
    }
  }
  return true;
}
function isDeepEqual(val1, val2) {
  return innerDeepEqual(val1, val2, kLoose);
}
function isDeepStrictEqual(val1, val2) {
  return innerDeepEqual(val1, val2, kStrict);
}
module.exports = {
  isDeepEqual: isDeepEqual,
  isDeepStrictEqual: isDeepStrictEqual
};

}),
"./node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js": 
/*!****************************************************************************!*\
  !*** ./node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js ***!
  \****************************************************************************/
(function (__unused_webpack_module, exports) {
"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


}),
"./node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js": 
/*!**********************************************************************!*\
  !*** ./node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js ***!
  \**********************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/.pnpm/console-browserify@1.2.0/node_modules/console-browserify/index.js */ "./node_modules/.pnpm/console-browserify@1.2.0/node_modules/console-browserify/index.js");
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



const base64 = __webpack_require__(/*! base64-js */ "./node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js")
const ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js")
const customInspectSymbol =
  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation
    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
    : null

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

const K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    const arr = new Uint8Array(1)
    const proto = { foo: function () { return 42 } }
    Object.setPrototypeOf(proto, Uint8Array.prototype)
    Object.setPrototypeOf(arr, proto)
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  const buf = new Uint8Array(length)
  Object.setPrototypeOf(buf, Buffer.prototype)
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayView(value)
  }

  if (value == null) {
    throw new TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof SharedArrayBuffer !== 'undefined' &&
      (isInstance(value, SharedArrayBuffer) ||
      (value && isInstance(value.buffer, SharedArrayBuffer)))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  const valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  const b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)
Object.setPrototypeOf(Buffer, Uint8Array)

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  const length = byteLength(string, encoding) | 0
  let buf = createBuffer(length)

  const actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  const length = array.length < 0 ? 0 : checked(array.length) | 0
  const buf = createBuffer(length)
  for (let i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayView (arrayView) {
  if (isInstance(arrayView, Uint8Array)) {
    const copy = new Uint8Array(arrayView)
    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)
  }
  return fromArrayLike(arrayView)
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  let buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(buf, Buffer.prototype)

  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    const len = checked(obj.length) | 0
    const buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  let x = a.length
  let y = b.length

  for (let i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  let i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  const buffer = Buffer.allocUnsafe(length)
  let pos = 0
  for (i = 0; i < list.length; ++i) {
    let buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      if (pos + buf.length > buffer.length) {
        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)
        buf.copy(buffer, pos)
      } else {
        Uint8Array.prototype.set.call(
          buffer,
          buf,
          pos
        )
      }
    } else if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    } else {
      buf.copy(buffer, pos)
    }
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  const len = string.length
  const mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  let loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  let loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  const i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  const len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (let i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  const len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (let i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  const len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (let i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  const length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  let str = ''
  const max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}
if (customInspectSymbol) {
  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  let x = thisEnd - thisStart
  let y = end - start
  const len = Math.min(x, y)

  const thisCopy = this.slice(thisStart, thisEnd)
  const targetCopy = target.slice(start, end)

  for (let i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  let indexSize = 1
  let arrLength = arr.length
  let valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  let i
  if (dir) {
    let foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      let found = true
      for (let j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  const remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  const strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  let i
  for (i = 0; i < length; ++i) {
    const parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  const remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  let loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
      case 'latin1':
      case 'binary':
        return asciiWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  const res = []

  let i = start
  while (i < end) {
    const firstByte = buf[i]
    let codePoint = null
    let bytesPerSequence = (firstByte > 0xEF)
      ? 4
      : (firstByte > 0xDF)
          ? 3
          : (firstByte > 0xBF)
              ? 2
              : 1

    if (i + bytesPerSequence <= end) {
      let secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  const len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  let res = ''
  let i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  let ret = ''
  end = Math.min(buf.length, end)

  for (let i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  let ret = ''
  end = Math.min(buf.length, end)

  for (let i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  const len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  let out = ''
  for (let i = start; i < end; ++i) {
    out += hexSliceLookupTable[buf[i]]
  }
  return out
}

function utf16leSlice (buf, start, end) {
  const bytes = buf.slice(start, end)
  let res = ''
  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
  for (let i = 0; i < bytes.length - 1; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  const len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  const newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(newBuf, Buffer.prototype)

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUintLE =
Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let val = this[offset]
  let mul = 1
  let i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUintBE =
Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  let val = this[offset + --byteLength]
  let mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUint8 =
Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUint16LE =
Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUint16BE =
Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUint32LE =
Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUint32BE =
Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const lo = first +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 24

  const hi = this[++offset] +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    last * 2 ** 24

  return BigInt(lo) + (BigInt(hi) << BigInt(32))
})

Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const hi = first * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    this[++offset]

  const lo = this[++offset] * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    last

  return (BigInt(hi) << BigInt(32)) + BigInt(lo)
})

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let val = this[offset]
  let mul = 1
  let i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let i = byteLength
  let mul = 1
  let val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  const val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  const val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const val = this[offset + 4] +
    this[offset + 5] * 2 ** 8 +
    this[offset + 6] * 2 ** 16 +
    (last << 24) // Overflow

  return (BigInt(val) << BigInt(32)) +
    BigInt(first +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 24)
})

Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const val = (first << 24) + // Overflow
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    this[++offset]

  return (BigInt(val) << BigInt(32)) +
    BigInt(this[++offset] * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    last)
})

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUintLE =
Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    const maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  let mul = 1
  let i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUintBE =
Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    const maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  let i = byteLength - 1
  let mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUint8 =
Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUint16LE =
Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUint16BE =
Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUint32LE =
Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUint32BE =
Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function wrtBigUInt64LE (buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7)

  let lo = Number(value & BigInt(0xffffffff))
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  return offset
}

function wrtBigUInt64BE (buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7)

  let lo = Number(value & BigInt(0xffffffff))
  buf[offset + 7] = lo
  lo = lo >> 8
  buf[offset + 6] = lo
  lo = lo >> 8
  buf[offset + 5] = lo
  lo = lo >> 8
  buf[offset + 4] = lo
  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))
  buf[offset + 3] = hi
  hi = hi >> 8
  buf[offset + 2] = hi
  hi = hi >> 8
  buf[offset + 1] = hi
  hi = hi >> 8
  buf[offset] = hi
  return offset + 8
}

Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {
  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
})

Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {
  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
})

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    const limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  let i = 0
  let mul = 1
  let sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    const limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  let i = byteLength - 1
  let mul = 1
  let sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {
  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
})

Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {
  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
})

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  const len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      const code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  } else if (typeof val === 'boolean') {
    val = Number(val)
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  let i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    const bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    const len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// CUSTOM ERRORS
// =============

// Simplified versions from Node, changed for Buffer-only usage
const errors = {}
function E (sym, getMessage, Base) {
  errors[sym] = class NodeError extends Base {
    constructor () {
      super()

      Object.defineProperty(this, 'message', {
        value: getMessage.apply(this, arguments),
        writable: true,
        configurable: true
      })

      // Add the error code to the name to include it in the stack trace.
      this.name = `${this.name} [${sym}]`
      // Access the stack to generate the error message including the error code
      // from the name.
      this.stack // eslint-disable-line no-unused-expressions
      // Reset the name to the actual name.
      delete this.name
    }

    get code () {
      return sym
    }

    set code (value) {
      Object.defineProperty(this, 'code', {
        configurable: true,
        enumerable: true,
        value,
        writable: true
      })
    }

    toString () {
      return `${this.name} [${sym}]: ${this.message}`
    }
  }
}

E('ERR_BUFFER_OUT_OF_BOUNDS',
  function (name) {
    if (name) {
      return `${name} is outside of buffer bounds`
    }

    return 'Attempt to access memory outside buffer bounds'
  }, RangeError)
E('ERR_INVALID_ARG_TYPE',
  function (name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`
  }, TypeError)
E('ERR_OUT_OF_RANGE',
  function (str, range, input) {
    let msg = `The value of "${str}" is out of range.`
    let received = input
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
      received = addNumericalSeparator(String(input))
    } else if (typeof input === 'bigint') {
      received = String(input)
      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
        received = addNumericalSeparator(received)
      }
      received += 'n'
    }
    msg += ` It must be ${range}. Received ${received}`
    return msg
  }, RangeError)

function addNumericalSeparator (val) {
  let res = ''
  let i = val.length
  const start = val[0] === '-' ? 1 : 0
  for (; i >= start + 4; i -= 3) {
    res = `_${val.slice(i - 3, i)}${res}`
  }
  return `${val.slice(0, i)}${res}`
}

// CHECK FUNCTIONS
// ===============

function checkBounds (buf, offset, byteLength) {
  validateNumber(offset, 'offset')
  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {
    boundsError(offset, buf.length - (byteLength + 1))
  }
}

function checkIntBI (value, min, max, buf, offset, byteLength) {
  if (value > max || value < min) {
    const n = typeof min === 'bigint' ? 'n' : ''
    let range
    if (byteLength > 3) {
      if (min === 0 || min === BigInt(0)) {
        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`
      } else {
        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +
                `${(byteLength + 1) * 8 - 1}${n}`
      }
    } else {
      range = `>= ${min}${n} and <= ${max}${n}`
    }
    throw new errors.ERR_OUT_OF_RANGE('value', range, value)
  }
  checkBounds(buf, offset, byteLength)
}

function validateNumber (value, name) {
  if (typeof value !== 'number') {
    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)
  }
}

function boundsError (value, length, type) {
  if (Math.floor(value) !== value) {
    validateNumber(value, type)
    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)
  }

  if (length < 0) {
    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()
  }

  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',
                                    `>= ${type ? 1 : 0} and <= ${length}`,
                                    value)
}

// HELPER FUNCTIONS
// ================

const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  let codePoint
  const length = string.length
  let leadSurrogate = null
  const bytes = []

  for (let i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  const byteArray = []
  for (let i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  let c, hi, lo
  const byteArray = []
  for (let i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  let i
  for (i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = (function () {
  const alphabet = '0123456789abcdef'
  const table = new Array(256)
  for (let i = 0; i < 16; ++i) {
    const i16 = i * 16
    for (let j = 0; j < 16; ++j) {
      table[i16 + j] = alphabet[i] + alphabet[j]
    }
  }
  return table
})()

// Return not function with Error if BigInt not supported
function defineBigIntMethod (fn) {
  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn
}

function BufferBigIntNotDefined () {
  throw new Error('BigInt not supported')
}


}),
"./node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/actualApply.js": 
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/actualApply.js ***!
  \**************************************************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var bind = __webpack_require__(/*! function-bind */ "./node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/index.js");

var $apply = __webpack_require__(/*! ./functionApply */ "./node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/functionApply.js");
var $call = __webpack_require__(/*! ./functionCall */ "./node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/functionCall.js");
var $reflectApply = __webpack_require__(/*! ./reflectApply */ "./node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/reflectApply.js");

/** @type {import('./actualApply')} */
module.exports = $reflectApply || bind.call($call, $apply);


}),
"./node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/applyBind.js": 
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/applyBind.js ***!
  \************************************************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var bind = __webpack_require__(/*! function-bind */ "./node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/index.js");
var $apply = __webpack_require__(/*! ./functionApply */ "./node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/functionApply.js");
var actualApply = __webpack_require__(/*! ./actualApply */ "./node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/actualApply.js");

/** @type {import('./applyBind')} */
module.exports = function applyBind() {
	return actualApply(bind, $apply, arguments);
};


}),
"./node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/functionApply.js": 
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/functionApply.js ***!
  \****************************************************************************************************************/
(function (module) {
"use strict";


/** @type {import('./functionApply')} */
module.exports = Function.prototype.apply;


}),
"./node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/functionCall.js": 
/*!***************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/functionCall.js ***!
  \***************************************************************************************************************/
(function (module) {
"use strict";


/** @type {import('./functionCall')} */
module.exports = Function.prototype.call;


}),
"./node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/index.js": 
/*!********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/index.js ***!
  \********************************************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var bind = __webpack_require__(/*! function-bind */ "./node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/index.js");
var $TypeError = __webpack_require__(/*! es-errors/type */ "./node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/type.js");

var $call = __webpack_require__(/*! ./functionCall */ "./node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/functionCall.js");
var $actualApply = __webpack_require__(/*! ./actualApply */ "./node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/actualApply.js");

/** @type {(args: [Function, thisArg?: unknown, ...args: unknown[]]) => Function} TODO FIXME, find a way to use import('.') */
module.exports = function callBindBasic(args) {
	if (args.length < 1 || typeof args[0] !== 'function') {
		throw new $TypeError('a function is required');
	}
	return $actualApply(bind, $call, args);
};


}),
"./node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/reflectApply.js": 
/*!***************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/reflectApply.js ***!
  \***************************************************************************************************************/
(function (module) {
"use strict";


/** @type {import('./reflectApply')} */
module.exports = typeof Reflect !== 'undefined' && Reflect && Reflect.apply;


}),
"./node_modules/.pnpm/call-bind@1.0.8/node_modules/call-bind/callBound.js": 
/*!********************************************************************************!*\
  !*** ./node_modules/.pnpm/call-bind@1.0.8/node_modules/call-bind/callBound.js ***!
  \********************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "./node_modules/.pnpm/get-intrinsic@1.3.0/node_modules/get-intrinsic/index.js");

var callBind = __webpack_require__(/*! ./ */ "./node_modules/.pnpm/call-bind@1.0.8/node_modules/call-bind/index.js");

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

module.exports = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBind(intrinsic);
	}
	return intrinsic;
};


}),
"./node_modules/.pnpm/call-bind@1.0.8/node_modules/call-bind/index.js": 
/*!****************************************************************************!*\
  !*** ./node_modules/.pnpm/call-bind@1.0.8/node_modules/call-bind/index.js ***!
  \****************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var setFunctionLength = __webpack_require__(/*! set-function-length */ "./node_modules/.pnpm/set-function-length@1.2.2/node_modules/set-function-length/index.js");

var $defineProperty = __webpack_require__(/*! es-define-property */ "./node_modules/.pnpm/es-define-property@1.0.1/node_modules/es-define-property/index.js");

var callBindBasic = __webpack_require__(/*! call-bind-apply-helpers */ "./node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/index.js");
var applyBind = __webpack_require__(/*! call-bind-apply-helpers/applyBind */ "./node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/applyBind.js");

module.exports = function callBind(originalFunction) {
	var func = callBindBasic(arguments);
	var adjustedLength = originalFunction.length - (arguments.length - 1);
	return setFunctionLength(
		func,
		1 + (adjustedLength > 0 ? adjustedLength : 0),
		true
	);
};

if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}


}),
"./node_modules/.pnpm/call-bound@1.0.4/node_modules/call-bound/index.js": 
/*!******************************************************************************!*\
  !*** ./node_modules/.pnpm/call-bound@1.0.4/node_modules/call-bound/index.js ***!
  \******************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "./node_modules/.pnpm/get-intrinsic@1.3.0/node_modules/get-intrinsic/index.js");

var callBindBasic = __webpack_require__(/*! call-bind-apply-helpers */ "./node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/index.js");

/** @type {(thisArg: string, searchString: string, position?: number) => number} */
var $indexOf = callBindBasic([GetIntrinsic('%String.prototype.indexOf%')]);

/** @type {import('.')} */
module.exports = function callBoundIntrinsic(name, allowMissing) {
	/* eslint no-extra-parens: 0 */

	var intrinsic = /** @type {(this: unknown, ...args: unknown[]) => unknown} */ (GetIntrinsic(name, !!allowMissing));
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBindBasic(/** @type {const} */ ([intrinsic]));
	}
	return intrinsic;
};


}),
"./node_modules/.pnpm/console-browserify@1.2.0/node_modules/console-browserify/index.js": 
/*!**********************************************************************************************!*\
  !*** ./node_modules/.pnpm/console-browserify@1.2.0/node_modules/console-browserify/index.js ***!
  \**********************************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
/*global window, global*/
var util = __webpack_require__(/*! util */ "./node_modules/.pnpm/util@0.12.5/node_modules/util/util.js")
var assert = __webpack_require__(/*! assert */ "./node_modules/.pnpm/assert@2.1.0/node_modules/assert/build/assert.js")
function now() { return new Date().getTime() }

var slice = Array.prototype.slice
var console
var times = {}

if (typeof __webpack_require__.g !== "undefined" && __webpack_require__.g.console) {
    console = __webpack_require__.g.console
} else if (typeof window !== "undefined" && window.console) {
    console = window.console
} else {
    console = {}
}

var functions = [
    [log, "log"],
    [info, "info"],
    [warn, "warn"],
    [error, "error"],
    [time, "time"],
    [timeEnd, "timeEnd"],
    [trace, "trace"],
    [dir, "dir"],
    [consoleAssert, "assert"]
]

for (var i = 0; i < functions.length; i++) {
    var tuple = functions[i]
    var f = tuple[0]
    var name = tuple[1]

    if (!console[name]) {
        console[name] = f
    }
}

module.exports = console

function log() {}

function info() {
    console.log.apply(console, arguments)
}

function warn() {
    console.log.apply(console, arguments)
}

function error() {
    console.warn.apply(console, arguments)
}

function time(label) {
    times[label] = now()
}

function timeEnd(label) {
    var time = times[label]
    if (!time) {
        throw new Error("No such label: " + label)
    }

    delete times[label]
    var duration = now() - time
    console.log(label + ": " + duration + "ms")
}

function trace() {
    var err = new Error()
    err.name = "Trace"
    err.message = util.format.apply(null, arguments)
    console.error(err.stack)
}

function dir(object) {
    console.log(util.inspect(object) + "\n")
}

function consoleAssert(expression) {
    if (!expression) {
        var arr = slice.call(arguments, 1)
        assert.ok(false, util.format.apply(null, arr))
    }
}


}),
"./node_modules/.pnpm/define-data-property@1.1.4/node_modules/define-data-property/index.js": 
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/define-data-property@1.1.4/node_modules/define-data-property/index.js ***!
  \**************************************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var $defineProperty = __webpack_require__(/*! es-define-property */ "./node_modules/.pnpm/es-define-property@1.0.1/node_modules/es-define-property/index.js");

var $SyntaxError = __webpack_require__(/*! es-errors/syntax */ "./node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/syntax.js");
var $TypeError = __webpack_require__(/*! es-errors/type */ "./node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/type.js");

var gopd = __webpack_require__(/*! gopd */ "./node_modules/.pnpm/gopd@1.2.0/node_modules/gopd/index.js");

/** @type {import('.')} */
module.exports = function defineDataProperty(
	obj,
	property,
	value
) {
	if (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {
		throw new $TypeError('`obj` must be an object or a function`');
	}
	if (typeof property !== 'string' && typeof property !== 'symbol') {
		throw new $TypeError('`property` must be a string or a symbol`');
	}
	if (arguments.length > 3 && typeof arguments[3] !== 'boolean' && arguments[3] !== null) {
		throw new $TypeError('`nonEnumerable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 4 && typeof arguments[4] !== 'boolean' && arguments[4] !== null) {
		throw new $TypeError('`nonWritable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 5 && typeof arguments[5] !== 'boolean' && arguments[5] !== null) {
		throw new $TypeError('`nonConfigurable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 6 && typeof arguments[6] !== 'boolean') {
		throw new $TypeError('`loose`, if provided, must be a boolean');
	}

	var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
	var nonWritable = arguments.length > 4 ? arguments[4] : null;
	var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
	var loose = arguments.length > 6 ? arguments[6] : false;

	/* @type {false | TypedPropertyDescriptor<unknown>} */
	var desc = !!gopd && gopd(obj, property);

	if ($defineProperty) {
		$defineProperty(obj, property, {
			configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
			enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
			value: value,
			writable: nonWritable === null && desc ? desc.writable : !nonWritable
		});
	} else if (loose || (!nonEnumerable && !nonWritable && !nonConfigurable)) {
		// must fall back to [[Set]], and was not explicitly asked to make non-enumerable, non-writable, or non-configurable
		obj[property] = value; // eslint-disable-line no-param-reassign
	} else {
		throw new $SyntaxError('This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.');
	}
};


}),
"./node_modules/.pnpm/define-properties@1.2.1/node_modules/define-properties/index.js": 
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/define-properties@1.2.1/node_modules/define-properties/index.js ***!
  \********************************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var keys = __webpack_require__(/*! object-keys */ "./node_modules/.pnpm/object-keys@1.1.1/node_modules/object-keys/index.js");
var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var defineDataProperty = __webpack_require__(/*! define-data-property */ "./node_modules/.pnpm/define-data-property@1.1.4/node_modules/define-data-property/index.js");

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var supportsDescriptors = __webpack_require__(/*! has-property-descriptors */ "./node_modules/.pnpm/has-property-descriptors@1.0.2/node_modules/has-property-descriptors/index.js")();

var defineProperty = function (object, name, value, predicate) {
	if (name in object) {
		if (predicate === true) {
			if (object[name] === value) {
				return;
			}
		} else if (!isFunction(predicate) || !predicate()) {
			return;
		}
	}

	if (supportsDescriptors) {
		defineDataProperty(object, name, value, true);
	} else {
		defineDataProperty(object, name, value);
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = concat.call(props, Object.getOwnPropertySymbols(map));
	}
	for (var i = 0; i < props.length; i += 1) {
		defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
	}
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;


}),
"./node_modules/.pnpm/dunder-proto@1.0.1/node_modules/dunder-proto/get.js": 
/*!********************************************************************************!*\
  !*** ./node_modules/.pnpm/dunder-proto@1.0.1/node_modules/dunder-proto/get.js ***!
  \********************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var callBind = __webpack_require__(/*! call-bind-apply-helpers */ "./node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/index.js");
var gOPD = __webpack_require__(/*! gopd */ "./node_modules/.pnpm/gopd@1.2.0/node_modules/gopd/index.js");

var hasProtoAccessor;
try {
	// eslint-disable-next-line no-extra-parens, no-proto
	hasProtoAccessor = /** @type {{ __proto__?: typeof Array.prototype }} */ ([]).__proto__ === Array.prototype;
} catch (e) {
	if (!e || typeof e !== 'object' || !('code' in e) || e.code !== 'ERR_PROTO_ACCESS') {
		throw e;
	}
}

// eslint-disable-next-line no-extra-parens
var desc = !!hasProtoAccessor && gOPD && gOPD(Object.prototype, /** @type {keyof typeof Object.prototype} */ ('__proto__'));

var $Object = Object;
var $getPrototypeOf = $Object.getPrototypeOf;

/** @type {import('./get')} */
module.exports = desc && typeof desc.get === 'function'
	? callBind([desc.get])
	: typeof $getPrototypeOf === 'function'
		? /** @type {import('./get')} */ function getDunder(value) {
			// eslint-disable-next-line eqeqeq
			return $getPrototypeOf(value == null ? value : $Object(value));
		}
		: false;


}),
"./node_modules/.pnpm/es-define-property@1.0.1/node_modules/es-define-property/index.js": 
/*!**********************************************************************************************!*\
  !*** ./node_modules/.pnpm/es-define-property@1.0.1/node_modules/es-define-property/index.js ***!
  \**********************************************************************************************/
(function (module) {
"use strict";


/** @type {import('.')} */
var $defineProperty = Object.defineProperty || false;
if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = false;
	}
}

module.exports = $defineProperty;


}),
"./node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/eval.js": 
/*!***************************************************************************!*\
  !*** ./node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/eval.js ***!
  \***************************************************************************/
(function (module) {
"use strict";


/** @type {import('./eval')} */
module.exports = EvalError;


}),
"./node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/index.js": 
/*!****************************************************************************!*\
  !*** ./node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/index.js ***!
  \****************************************************************************/
(function (module) {
"use strict";


/** @type {import('.')} */
module.exports = Error;


}),
"./node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/range.js": 
/*!****************************************************************************!*\
  !*** ./node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/range.js ***!
  \****************************************************************************/
(function (module) {
"use strict";


/** @type {import('./range')} */
module.exports = RangeError;


}),
"./node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/ref.js": 
/*!**************************************************************************!*\
  !*** ./node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/ref.js ***!
  \**************************************************************************/
(function (module) {
"use strict";


/** @type {import('./ref')} */
module.exports = ReferenceError;


}),
"./node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/syntax.js": 
/*!*****************************************************************************!*\
  !*** ./node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/syntax.js ***!
  \*****************************************************************************/
(function (module) {
"use strict";


/** @type {import('./syntax')} */
module.exports = SyntaxError;


}),
"./node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/type.js": 
/*!***************************************************************************!*\
  !*** ./node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/type.js ***!
  \***************************************************************************/
(function (module) {
"use strict";


/** @type {import('./type')} */
module.exports = TypeError;


}),
"./node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/uri.js": 
/*!**************************************************************************!*\
  !*** ./node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/uri.js ***!
  \**************************************************************************/
(function (module) {
"use strict";


/** @type {import('./uri')} */
module.exports = URIError;


}),
"./node_modules/.pnpm/es-object-atoms@1.1.1/node_modules/es-object-atoms/index.js": 
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/es-object-atoms@1.1.1/node_modules/es-object-atoms/index.js ***!
  \****************************************************************************************/
(function (module) {
"use strict";


/** @type {import('.')} */
module.exports = Object;


}),
"./node_modules/.pnpm/for-each@0.3.5/node_modules/for-each/index.js": 
/*!**************************************************************************!*\
  !*** ./node_modules/.pnpm/for-each@0.3.5/node_modules/for-each/index.js ***!
  \**************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var isCallable = __webpack_require__(/*! is-callable */ "./node_modules/.pnpm/is-callable@1.2.7/node_modules/is-callable/index.js");

var toStr = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;

/** @type {<This, A extends readonly unknown[]>(arr: A, iterator: (this: This | void, value: A[number], index: number, arr: A) => void, receiver: This | undefined) => void} */
var forEachArray = function forEachArray(array, iterator, receiver) {
    for (var i = 0, len = array.length; i < len; i++) {
        if (hasOwnProperty.call(array, i)) {
            if (receiver == null) {
                iterator(array[i], i, array);
            } else {
                iterator.call(receiver, array[i], i, array);
            }
        }
    }
};

/** @type {<This, S extends string>(string: S, iterator: (this: This | void, value: S[number], index: number, string: S) => void, receiver: This | undefined) => void} */
var forEachString = function forEachString(string, iterator, receiver) {
    for (var i = 0, len = string.length; i < len; i++) {
        // no such thing as a sparse string.
        if (receiver == null) {
            iterator(string.charAt(i), i, string);
        } else {
            iterator.call(receiver, string.charAt(i), i, string);
        }
    }
};

/** @type {<This, O>(obj: O, iterator: (this: This | void, value: O[keyof O], index: keyof O, obj: O) => void, receiver: This | undefined) => void} */
var forEachObject = function forEachObject(object, iterator, receiver) {
    for (var k in object) {
        if (hasOwnProperty.call(object, k)) {
            if (receiver == null) {
                iterator(object[k], k, object);
            } else {
                iterator.call(receiver, object[k], k, object);
            }
        }
    }
};

/** @type {(x: unknown) => x is readonly unknown[]} */
function isArray(x) {
    return toStr.call(x) === '[object Array]';
}

/** @type {import('.')._internal} */
module.exports = function forEach(list, iterator, thisArg) {
    if (!isCallable(iterator)) {
        throw new TypeError('iterator must be a function');
    }

    var receiver;
    if (arguments.length >= 3) {
        receiver = thisArg;
    }

    if (isArray(list)) {
        forEachArray(list, iterator, receiver);
    } else if (typeof list === 'string') {
        forEachString(list, iterator, receiver);
    } else {
        forEachObject(list, iterator, receiver);
    }
};


}),
"./node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/implementation.js": 
/*!*********************************************************************************************!*\
  !*** ./node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/implementation.js ***!
  \*********************************************************************************************/
(function (module) {
"use strict";


/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var toStr = Object.prototype.toString;
var max = Math.max;
var funcType = '[object Function]';

var concatty = function concatty(a, b) {
    var arr = [];

    for (var i = 0; i < a.length; i += 1) {
        arr[i] = a[i];
    }
    for (var j = 0; j < b.length; j += 1) {
        arr[j + a.length] = b[j];
    }

    return arr;
};

var slicy = function slicy(arrLike, offset) {
    var arr = [];
    for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
        arr[j] = arrLike[i];
    }
    return arr;
};

var joiny = function (arr, joiner) {
    var str = '';
    for (var i = 0; i < arr.length; i += 1) {
        str += arr[i];
        if (i + 1 < arr.length) {
            str += joiner;
        }
    }
    return str;
};

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slicy(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                concatty(args, arguments)
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        }
        return target.apply(
            that,
            concatty(args, arguments)
        );

    };

    var boundLength = max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs[i] = '$' + i;
    }

    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};


}),
"./node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/index.js": 
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/index.js ***!
  \************************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var implementation = __webpack_require__(/*! ./implementation */ "./node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/implementation.js");

module.exports = Function.prototype.bind || implementation;


}),
"./node_modules/.pnpm/get-intrinsic@1.3.0/node_modules/get-intrinsic/index.js": 
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/get-intrinsic@1.3.0/node_modules/get-intrinsic/index.js ***!
  \************************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var undefined;

var $Object = __webpack_require__(/*! es-object-atoms */ "./node_modules/.pnpm/es-object-atoms@1.1.1/node_modules/es-object-atoms/index.js");

var $Error = __webpack_require__(/*! es-errors */ "./node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/index.js");
var $EvalError = __webpack_require__(/*! es-errors/eval */ "./node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/eval.js");
var $RangeError = __webpack_require__(/*! es-errors/range */ "./node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/range.js");
var $ReferenceError = __webpack_require__(/*! es-errors/ref */ "./node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/ref.js");
var $SyntaxError = __webpack_require__(/*! es-errors/syntax */ "./node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/syntax.js");
var $TypeError = __webpack_require__(/*! es-errors/type */ "./node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/type.js");
var $URIError = __webpack_require__(/*! es-errors/uri */ "./node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/uri.js");

var abs = __webpack_require__(/*! math-intrinsics/abs */ "./node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/abs.js");
var floor = __webpack_require__(/*! math-intrinsics/floor */ "./node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/floor.js");
var max = __webpack_require__(/*! math-intrinsics/max */ "./node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/max.js");
var min = __webpack_require__(/*! math-intrinsics/min */ "./node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/min.js");
var pow = __webpack_require__(/*! math-intrinsics/pow */ "./node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/pow.js");
var round = __webpack_require__(/*! math-intrinsics/round */ "./node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/round.js");
var sign = __webpack_require__(/*! math-intrinsics/sign */ "./node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/sign.js");

var $Function = Function;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = __webpack_require__(/*! gopd */ "./node_modules/.pnpm/gopd@1.2.0/node_modules/gopd/index.js");
var $defineProperty = __webpack_require__(/*! es-define-property */ "./node_modules/.pnpm/es-define-property@1.0.1/node_modules/es-define-property/index.js");

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = __webpack_require__(/*! has-symbols */ "./node_modules/.pnpm/has-symbols@1.1.0/node_modules/has-symbols/index.js")();

var getProto = __webpack_require__(/*! get-proto */ "./node_modules/.pnpm/get-proto@1.0.1/node_modules/get-proto/index.js");
var $ObjectGPO = __webpack_require__(/*! get-proto/Object.getPrototypeOf */ "./node_modules/.pnpm/get-proto@1.0.1/node_modules/get-proto/Object.getPrototypeOf.js");
var $ReflectGPO = __webpack_require__(/*! get-proto/Reflect.getPrototypeOf */ "./node_modules/.pnpm/get-proto@1.0.1/node_modules/get-proto/Reflect.getPrototypeOf.js");

var $apply = __webpack_require__(/*! call-bind-apply-helpers/functionApply */ "./node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/functionApply.js");
var $call = __webpack_require__(/*! call-bind-apply-helpers/functionCall */ "./node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/functionCall.js");

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	__proto__: null,
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined : BigInt64Array,
	'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined : BigUint64Array,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': $Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': $EvalError,
	'%Float16Array%': typeof Float16Array === 'undefined' ? undefined : Float16Array,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': $Object,
	'%Object.getOwnPropertyDescriptor%': $gOPD,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': $RangeError,
	'%ReferenceError%': $ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': $URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet,

	'%Function.prototype.call%': $call,
	'%Function.prototype.apply%': $apply,
	'%Object.defineProperty%': $defineProperty,
	'%Object.getPrototypeOf%': $ObjectGPO,
	'%Math.abs%': abs,
	'%Math.floor%': floor,
	'%Math.max%': max,
	'%Math.min%': min,
	'%Math.pow%': pow,
	'%Math.round%': round,
	'%Math.sign%': sign,
	'%Reflect.getPrototypeOf%': $ReflectGPO
};

if (getProto) {
	try {
		null.error; // eslint-disable-line no-unused-expressions
	} catch (e) {
		// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
		var errorProto = getProto(getProto(e));
		INTRINSICS['%Error.prototype%'] = errorProto;
	}
}

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen && getProto) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	__proto__: null,
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = __webpack_require__(/*! function-bind */ "./node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/index.js");
var hasOwn = __webpack_require__(/*! hasown */ "./node_modules/.pnpm/hasown@2.0.2/node_modules/hasown/index.js");
var $concat = bind.call($call, Array.prototype.concat);
var $spliceApply = bind.call($apply, Array.prototype.splice);
var $replace = bind.call($call, String.prototype.replace);
var $strSlice = bind.call($call, String.prototype.slice);
var $exec = bind.call($call, RegExp.prototype.exec);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	if ($exec(/^%?[^%]*%?$/, name) === null) {
		throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
	}
	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};


}),
"./node_modules/.pnpm/get-proto@1.0.1/node_modules/get-proto/Object.getPrototypeOf.js": 
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/get-proto@1.0.1/node_modules/get-proto/Object.getPrototypeOf.js ***!
  \********************************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var $Object = __webpack_require__(/*! es-object-atoms */ "./node_modules/.pnpm/es-object-atoms@1.1.1/node_modules/es-object-atoms/index.js");

/** @type {import('./Object.getPrototypeOf')} */
module.exports = $Object.getPrototypeOf || null;


}),
"./node_modules/.pnpm/get-proto@1.0.1/node_modules/get-proto/Reflect.getPrototypeOf.js": 
/*!*********************************************************************************************!*\
  !*** ./node_modules/.pnpm/get-proto@1.0.1/node_modules/get-proto/Reflect.getPrototypeOf.js ***!
  \*********************************************************************************************/
(function (module) {
"use strict";


/** @type {import('./Reflect.getPrototypeOf')} */
module.exports = (typeof Reflect !== 'undefined' && Reflect.getPrototypeOf) || null;


}),
"./node_modules/.pnpm/get-proto@1.0.1/node_modules/get-proto/index.js": 
/*!****************************************************************************!*\
  !*** ./node_modules/.pnpm/get-proto@1.0.1/node_modules/get-proto/index.js ***!
  \****************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var reflectGetProto = __webpack_require__(/*! ./Reflect.getPrototypeOf */ "./node_modules/.pnpm/get-proto@1.0.1/node_modules/get-proto/Reflect.getPrototypeOf.js");
var originalGetProto = __webpack_require__(/*! ./Object.getPrototypeOf */ "./node_modules/.pnpm/get-proto@1.0.1/node_modules/get-proto/Object.getPrototypeOf.js");

var getDunderProto = __webpack_require__(/*! dunder-proto/get */ "./node_modules/.pnpm/dunder-proto@1.0.1/node_modules/dunder-proto/get.js");

/** @type {import('.')} */
module.exports = reflectGetProto
	? function getProto(O) {
		// @ts-expect-error TS can't narrow inside a closure, for some reason
		return reflectGetProto(O);
	}
	: originalGetProto
		? function getProto(O) {
			if (!O || (typeof O !== 'object' && typeof O !== 'function')) {
				throw new TypeError('getProto: not an object');
			}
			// @ts-expect-error TS can't narrow inside a closure, for some reason
			return originalGetProto(O);
		}
		: getDunderProto
			? function getProto(O) {
				// @ts-expect-error TS can't narrow inside a closure, for some reason
				return getDunderProto(O);
			}
			: null;


}),
"./node_modules/.pnpm/gopd@1.2.0/node_modules/gopd/gOPD.js": 
/*!*****************************************************************!*\
  !*** ./node_modules/.pnpm/gopd@1.2.0/node_modules/gopd/gOPD.js ***!
  \*****************************************************************/
(function (module) {
"use strict";


/** @type {import('./gOPD')} */
module.exports = Object.getOwnPropertyDescriptor;


}),
"./node_modules/.pnpm/gopd@1.2.0/node_modules/gopd/index.js": 
/*!******************************************************************!*\
  !*** ./node_modules/.pnpm/gopd@1.2.0/node_modules/gopd/index.js ***!
  \******************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


/** @type {import('.')} */
var $gOPD = __webpack_require__(/*! ./gOPD */ "./node_modules/.pnpm/gopd@1.2.0/node_modules/gopd/gOPD.js");

if ($gOPD) {
	try {
		$gOPD([], 'length');
	} catch (e) {
		// IE 8 has a broken gOPD
		$gOPD = null;
	}
}

module.exports = $gOPD;


}),
"./node_modules/.pnpm/has-property-descriptors@1.0.2/node_modules/has-property-descriptors/index.js": 
/*!**********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/has-property-descriptors@1.0.2/node_modules/has-property-descriptors/index.js ***!
  \**********************************************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var $defineProperty = __webpack_require__(/*! es-define-property */ "./node_modules/.pnpm/es-define-property@1.0.1/node_modules/es-define-property/index.js");

var hasPropertyDescriptors = function hasPropertyDescriptors() {
	return !!$defineProperty;
};

hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
	// node v0.6 has a bug where array lengths can be Set but not Defined
	if (!$defineProperty) {
		return null;
	}
	try {
		return $defineProperty([], 'length', { value: 1 }).length !== 1;
	} catch (e) {
		// In Firefox 4-22, defining length on an array throws an exception.
		return true;
	}
};

module.exports = hasPropertyDescriptors;


}),
"./node_modules/.pnpm/has-symbols@1.1.0/node_modules/has-symbols/index.js": 
/*!********************************************************************************!*\
  !*** ./node_modules/.pnpm/has-symbols@1.1.0/node_modules/has-symbols/index.js ***!
  \********************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = __webpack_require__(/*! ./shams */ "./node_modules/.pnpm/has-symbols@1.1.0/node_modules/has-symbols/shams.js");

/** @type {import('.')} */
module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};


}),
"./node_modules/.pnpm/has-symbols@1.1.0/node_modules/has-symbols/shams.js": 
/*!********************************************************************************!*\
  !*** ./node_modules/.pnpm/has-symbols@1.1.0/node_modules/has-symbols/shams.js ***!
  \********************************************************************************/
(function (module) {
"use strict";


/** @type {import('./shams')} */
/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	/** @type {{ [k in symbol]?: unknown }} */
	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (var _ in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		// eslint-disable-next-line no-extra-parens
		var descriptor = /** @type {PropertyDescriptor} */ (Object.getOwnPropertyDescriptor(obj, sym));
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};


}),
"./node_modules/.pnpm/has-tostringtag@1.0.2/node_modules/has-tostringtag/shams.js": 
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/has-tostringtag@1.0.2/node_modules/has-tostringtag/shams.js ***!
  \****************************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var hasSymbols = __webpack_require__(/*! has-symbols/shams */ "./node_modules/.pnpm/has-symbols@1.1.0/node_modules/has-symbols/shams.js");

/** @type {import('.')} */
module.exports = function hasToStringTagShams() {
	return hasSymbols() && !!Symbol.toStringTag;
};


}),
"./node_modules/.pnpm/hasown@2.0.2/node_modules/hasown/index.js": 
/*!**********************************************************************!*\
  !*** ./node_modules/.pnpm/hasown@2.0.2/node_modules/hasown/index.js ***!
  \**********************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var call = Function.prototype.call;
var $hasOwn = Object.prototype.hasOwnProperty;
var bind = __webpack_require__(/*! function-bind */ "./node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/index.js");

/** @type {import('.')} */
module.exports = bind.call(call, $hasOwn);


}),
"./node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js": 
/*!************************************************************************!*\
  !*** ./node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js ***!
  \************************************************************************/
(function (__unused_webpack_module, exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


}),
"./node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js": 
/*!*************************************************************************************!*\
  !*** ./node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js ***!
  \*************************************************************************************/
(function (module) {
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}


}),
"./node_modules/.pnpm/is-arguments@1.2.0/node_modules/is-arguments/index.js": 
/*!**********************************************************************************!*\
  !*** ./node_modules/.pnpm/is-arguments@1.2.0/node_modules/is-arguments/index.js ***!
  \**********************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var hasToStringTag = __webpack_require__(/*! has-tostringtag/shams */ "./node_modules/.pnpm/has-tostringtag@1.0.2/node_modules/has-tostringtag/shams.js")();
var callBound = __webpack_require__(/*! call-bound */ "./node_modules/.pnpm/call-bound@1.0.4/node_modules/call-bound/index.js");

var $toString = callBound('Object.prototype.toString');

/** @type {import('.')} */
var isStandardArguments = function isArguments(value) {
	if (
		hasToStringTag
		&& value
		&& typeof value === 'object'
		&& Symbol.toStringTag in value
	) {
		return false;
	}
	return $toString(value) === '[object Arguments]';
};

/** @type {import('.')} */
var isLegacyArguments = function isArguments(value) {
	if (isStandardArguments(value)) {
		return true;
	}
	return value !== null
		&& typeof value === 'object'
		&& 'length' in value
		&& typeof value.length === 'number'
		&& value.length >= 0
		&& $toString(value) !== '[object Array]'
		&& 'callee' in value
		&& $toString(value.callee) === '[object Function]';
};

var supportsStandardArguments = (function () {
	return isStandardArguments(arguments);
}());

// @ts-expect-error TODO make this not error
isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

/** @type {import('.')} */
module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;


}),
"./node_modules/.pnpm/is-callable@1.2.7/node_modules/is-callable/index.js": 
/*!********************************************************************************!*\
  !*** ./node_modules/.pnpm/is-callable@1.2.7/node_modules/is-callable/index.js ***!
  \********************************************************************************/
(function (module) {
"use strict";


var fnToStr = Function.prototype.toString;
var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
var badArrayLike;
var isCallableMarker;
if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
	try {
		badArrayLike = Object.defineProperty({}, 'length', {
			get: function () {
				throw isCallableMarker;
			}
		});
		isCallableMarker = {};
		// eslint-disable-next-line no-throw-literal
		reflectApply(function () { throw 42; }, null, badArrayLike);
	} catch (_) {
		if (_ !== isCallableMarker) {
			reflectApply = null;
		}
	}
} else {
	reflectApply = null;
}

var constructorRegex = /^\s*class\b/;
var isES6ClassFn = function isES6ClassFunction(value) {
	try {
		var fnStr = fnToStr.call(value);
		return constructorRegex.test(fnStr);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionToStr(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var objectClass = '[object Object]';
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var ddaClass = '[object HTMLAllCollection]'; // IE 11
var ddaClass2 = '[object HTML document.all class]';
var ddaClass3 = '[object HTMLCollection]'; // IE 9-10
var hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`

var isIE68 = !(0 in [,]); // eslint-disable-line no-sparse-arrays, comma-spacing

var isDDA = function isDocumentDotAll() { return false; };
if (typeof document === 'object') {
	// Firefox 3 canonicalizes DDA to undefined when it's not accessed directly
	var all = document.all;
	if (toStr.call(all) === toStr.call(document.all)) {
		isDDA = function isDocumentDotAll(value) {
			/* globals document: false */
			// in IE 6-8, typeof document.all is "object" and it's truthy
			if ((isIE68 || !value) && (typeof value === 'undefined' || typeof value === 'object')) {
				try {
					var str = toStr.call(value);
					return (
						str === ddaClass
						|| str === ddaClass2
						|| str === ddaClass3 // opera 12.16
						|| str === objectClass // IE 6-8
					) && value('') == null; // eslint-disable-line eqeqeq
				} catch (e) { /**/ }
			}
			return false;
		};
	}
}

module.exports = reflectApply
	? function isCallable(value) {
		if (isDDA(value)) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		try {
			reflectApply(value, null, badArrayLike);
		} catch (e) {
			if (e !== isCallableMarker) { return false; }
		}
		return !isES6ClassFn(value) && tryFunctionObject(value);
	}
	: function isCallable(value) {
		if (isDDA(value)) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (hasToStringTag) { return tryFunctionObject(value); }
		if (isES6ClassFn(value)) { return false; }
		var strClass = toStr.call(value);
		if (strClass !== fnClass && strClass !== genClass && !(/^\[object HTML/).test(strClass)) { return false; }
		return tryFunctionObject(value);
	};


}),
"./node_modules/.pnpm/is-generator-function@1.1.0/node_modules/is-generator-function/index.js": 
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/is-generator-function@1.1.0/node_modules/is-generator-function/index.js ***!
  \****************************************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var callBound = __webpack_require__(/*! call-bound */ "./node_modules/.pnpm/call-bound@1.0.4/node_modules/call-bound/index.js");
var safeRegexTest = __webpack_require__(/*! safe-regex-test */ "./node_modules/.pnpm/safe-regex-test@1.1.0/node_modules/safe-regex-test/index.js");
var isFnRegex = safeRegexTest(/^\s*(?:function)?\*/);
var hasToStringTag = __webpack_require__(/*! has-tostringtag/shams */ "./node_modules/.pnpm/has-tostringtag@1.0.2/node_modules/has-tostringtag/shams.js")();
var getProto = __webpack_require__(/*! get-proto */ "./node_modules/.pnpm/get-proto@1.0.1/node_modules/get-proto/index.js");

var toStr = callBound('Object.prototype.toString');
var fnToStr = callBound('Function.prototype.toString');

var getGeneratorFunc = function () { // eslint-disable-line consistent-return
	if (!hasToStringTag) {
		return false;
	}
	try {
		return Function('return function*() {}')();
	} catch (e) {
	}
};
/** @type {undefined | false | null | GeneratorFunctionConstructor} */
var GeneratorFunction;

/** @type {import('.')} */
module.exports = function isGeneratorFunction(fn) {
	if (typeof fn !== 'function') {
		return false;
	}
	if (isFnRegex(fnToStr(fn))) {
		return true;
	}
	if (!hasToStringTag) {
		var str = toStr(fn);
		return str === '[object GeneratorFunction]';
	}
	if (!getProto) {
		return false;
	}
	if (typeof GeneratorFunction === 'undefined') {
		var generatorFunc = getGeneratorFunc();
		GeneratorFunction = generatorFunc
			// eslint-disable-next-line no-extra-parens
			? /** @type {GeneratorFunctionConstructor} */ (getProto(generatorFunc))
			: false;
	}
	return getProto(fn) === GeneratorFunction;
};


}),
"./node_modules/.pnpm/is-nan@1.3.2/node_modules/is-nan/implementation.js": 
/*!*******************************************************************************!*\
  !*** ./node_modules/.pnpm/is-nan@1.3.2/node_modules/is-nan/implementation.js ***!
  \*******************************************************************************/
(function (module) {
"use strict";


/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

module.exports = function isNaN(value) {
	return value !== value;
};


}),
"./node_modules/.pnpm/is-nan@1.3.2/node_modules/is-nan/index.js": 
/*!**********************************************************************!*\
  !*** ./node_modules/.pnpm/is-nan@1.3.2/node_modules/is-nan/index.js ***!
  \**********************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var callBind = __webpack_require__(/*! call-bind */ "./node_modules/.pnpm/call-bind@1.0.8/node_modules/call-bind/index.js");
var define = __webpack_require__(/*! define-properties */ "./node_modules/.pnpm/define-properties@1.2.1/node_modules/define-properties/index.js");

var implementation = __webpack_require__(/*! ./implementation */ "./node_modules/.pnpm/is-nan@1.3.2/node_modules/is-nan/implementation.js");
var getPolyfill = __webpack_require__(/*! ./polyfill */ "./node_modules/.pnpm/is-nan@1.3.2/node_modules/is-nan/polyfill.js");
var shim = __webpack_require__(/*! ./shim */ "./node_modules/.pnpm/is-nan@1.3.2/node_modules/is-nan/shim.js");

var polyfill = callBind(getPolyfill(), Number);

/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

define(polyfill, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = polyfill;


}),
"./node_modules/.pnpm/is-nan@1.3.2/node_modules/is-nan/polyfill.js": 
/*!*************************************************************************!*\
  !*** ./node_modules/.pnpm/is-nan@1.3.2/node_modules/is-nan/polyfill.js ***!
  \*************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var implementation = __webpack_require__(/*! ./implementation */ "./node_modules/.pnpm/is-nan@1.3.2/node_modules/is-nan/implementation.js");

module.exports = function getPolyfill() {
	if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN('a')) {
		return Number.isNaN;
	}
	return implementation;
};


}),
"./node_modules/.pnpm/is-nan@1.3.2/node_modules/is-nan/shim.js": 
/*!*********************************************************************!*\
  !*** ./node_modules/.pnpm/is-nan@1.3.2/node_modules/is-nan/shim.js ***!
  \*********************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var define = __webpack_require__(/*! define-properties */ "./node_modules/.pnpm/define-properties@1.2.1/node_modules/define-properties/index.js");
var getPolyfill = __webpack_require__(/*! ./polyfill */ "./node_modules/.pnpm/is-nan@1.3.2/node_modules/is-nan/polyfill.js");

/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

module.exports = function shimNumberIsNaN() {
	var polyfill = getPolyfill();
	define(Number, { isNaN: polyfill }, {
		isNaN: function testIsNaN() {
			return Number.isNaN !== polyfill;
		}
	});
	return polyfill;
};


}),
"./node_modules/.pnpm/is-regex@1.2.1/node_modules/is-regex/index.js": 
/*!**************************************************************************!*\
  !*** ./node_modules/.pnpm/is-regex@1.2.1/node_modules/is-regex/index.js ***!
  \**************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var callBound = __webpack_require__(/*! call-bound */ "./node_modules/.pnpm/call-bound@1.0.4/node_modules/call-bound/index.js");
var hasToStringTag = __webpack_require__(/*! has-tostringtag/shams */ "./node_modules/.pnpm/has-tostringtag@1.0.2/node_modules/has-tostringtag/shams.js")();
var hasOwn = __webpack_require__(/*! hasown */ "./node_modules/.pnpm/hasown@2.0.2/node_modules/hasown/index.js");
var gOPD = __webpack_require__(/*! gopd */ "./node_modules/.pnpm/gopd@1.2.0/node_modules/gopd/index.js");

/** @type {import('.')} */
var fn;

if (hasToStringTag) {
	/** @type {(receiver: ThisParameterType<typeof RegExp.prototype.exec>, ...args: Parameters<typeof RegExp.prototype.exec>) => ReturnType<typeof RegExp.prototype.exec>} */
	var $exec = callBound('RegExp.prototype.exec');
	/** @type {object} */
	var isRegexMarker = {};

	var throwRegexMarker = function () {
		throw isRegexMarker;
	};
	/** @type {{ toString(): never, valueOf(): never, [Symbol.toPrimitive]?(): never }} */
	var badStringifier = {
		toString: throwRegexMarker,
		valueOf: throwRegexMarker
	};

	if (typeof Symbol.toPrimitive === 'symbol') {
		badStringifier[Symbol.toPrimitive] = throwRegexMarker;
	}

	/** @type {import('.')} */
	// @ts-expect-error TS can't figure out that the $exec call always throws
	// eslint-disable-next-line consistent-return
	fn = function isRegex(value) {
		if (!value || typeof value !== 'object') {
			return false;
		}

		// eslint-disable-next-line no-extra-parens
		var descriptor = /** @type {NonNullable<typeof gOPD>} */ (gOPD)(/** @type {{ lastIndex?: unknown }} */ (value), 'lastIndex');
		var hasLastIndexDataProperty = descriptor && hasOwn(descriptor, 'value');
		if (!hasLastIndexDataProperty) {
			return false;
		}

		try {
			// eslint-disable-next-line no-extra-parens
			$exec(value, /** @type {string} */ (/** @type {unknown} */ (badStringifier)));
		} catch (e) {
			return e === isRegexMarker;
		}
	};
} else {
	/** @type {(receiver: ThisParameterType<typeof Object.prototype.toString>, ...args: Parameters<typeof Object.prototype.toString>) => ReturnType<typeof Object.prototype.toString>} */
	var $toString = callBound('Object.prototype.toString');
	/** @const @type {'[object RegExp]'} */
	var regexClass = '[object RegExp]';

	/** @type {import('.')} */
	fn = function isRegex(value) {
		// In older browsers, typeof regex incorrectly returns 'function'
		if (!value || (typeof value !== 'object' && typeof value !== 'function')) {
			return false;
		}

		return $toString(value) === regexClass;
	};
}

module.exports = fn;


}),
"./node_modules/.pnpm/is-typed-array@1.1.15/node_modules/is-typed-array/index.js": 
/*!***************************************************************************************!*\
  !*** ./node_modules/.pnpm/is-typed-array@1.1.15/node_modules/is-typed-array/index.js ***!
  \***************************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var whichTypedArray = __webpack_require__(/*! which-typed-array */ "./node_modules/.pnpm/which-typed-array@1.1.19/node_modules/which-typed-array/index.js");

/** @type {import('.')} */
module.exports = function isTypedArray(value) {
	return !!whichTypedArray(value);
};


}),
"./node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/abs.js": 
/*!**************************************************************************************!*\
  !*** ./node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/abs.js ***!
  \**************************************************************************************/
(function (module) {
"use strict";


/** @type {import('./abs')} */
module.exports = Math.abs;


}),
"./node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/floor.js": 
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/floor.js ***!
  \****************************************************************************************/
(function (module) {
"use strict";


/** @type {import('./floor')} */
module.exports = Math.floor;


}),
"./node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/isNaN.js": 
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/isNaN.js ***!
  \****************************************************************************************/
(function (module) {
"use strict";


/** @type {import('./isNaN')} */
module.exports = Number.isNaN || function isNaN(a) {
	return a !== a;
};


}),
"./node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/max.js": 
/*!**************************************************************************************!*\
  !*** ./node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/max.js ***!
  \**************************************************************************************/
(function (module) {
"use strict";


/** @type {import('./max')} */
module.exports = Math.max;


}),
"./node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/min.js": 
/*!**************************************************************************************!*\
  !*** ./node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/min.js ***!
  \**************************************************************************************/
(function (module) {
"use strict";


/** @type {import('./min')} */
module.exports = Math.min;


}),
"./node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/pow.js": 
/*!**************************************************************************************!*\
  !*** ./node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/pow.js ***!
  \**************************************************************************************/
(function (module) {
"use strict";


/** @type {import('./pow')} */
module.exports = Math.pow;


}),
"./node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/round.js": 
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/round.js ***!
  \****************************************************************************************/
(function (module) {
"use strict";


/** @type {import('./round')} */
module.exports = Math.round;


}),
"./node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/sign.js": 
/*!***************************************************************************************!*\
  !*** ./node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/sign.js ***!
  \***************************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var $isNaN = __webpack_require__(/*! ./isNaN */ "./node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/isNaN.js");

/** @type {import('./sign')} */
module.exports = function sign(number) {
	if ($isNaN(number) || number === 0) {
		return number;
	}
	return number < 0 ? -1 : +1;
};


}),
"./node_modules/.pnpm/object-is@1.1.6/node_modules/object-is/implementation.js": 
/*!*************************************************************************************!*\
  !*** ./node_modules/.pnpm/object-is@1.1.6/node_modules/object-is/implementation.js ***!
  \*************************************************************************************/
(function (module) {
"use strict";


var numberIsNaN = function (value) {
	return value !== value;
};

module.exports = function is(a, b) {
	if (a === 0 && b === 0) {
		return 1 / a === 1 / b;
	}
	if (a === b) {
		return true;
	}
	if (numberIsNaN(a) && numberIsNaN(b)) {
		return true;
	}
	return false;
};



}),
"./node_modules/.pnpm/object-is@1.1.6/node_modules/object-is/index.js": 
/*!****************************************************************************!*\
  !*** ./node_modules/.pnpm/object-is@1.1.6/node_modules/object-is/index.js ***!
  \****************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var define = __webpack_require__(/*! define-properties */ "./node_modules/.pnpm/define-properties@1.2.1/node_modules/define-properties/index.js");
var callBind = __webpack_require__(/*! call-bind */ "./node_modules/.pnpm/call-bind@1.0.8/node_modules/call-bind/index.js");

var implementation = __webpack_require__(/*! ./implementation */ "./node_modules/.pnpm/object-is@1.1.6/node_modules/object-is/implementation.js");
var getPolyfill = __webpack_require__(/*! ./polyfill */ "./node_modules/.pnpm/object-is@1.1.6/node_modules/object-is/polyfill.js");
var shim = __webpack_require__(/*! ./shim */ "./node_modules/.pnpm/object-is@1.1.6/node_modules/object-is/shim.js");

var polyfill = callBind(getPolyfill(), Object);

define(polyfill, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = polyfill;


}),
"./node_modules/.pnpm/object-is@1.1.6/node_modules/object-is/polyfill.js": 
/*!*******************************************************************************!*\
  !*** ./node_modules/.pnpm/object-is@1.1.6/node_modules/object-is/polyfill.js ***!
  \*******************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var implementation = __webpack_require__(/*! ./implementation */ "./node_modules/.pnpm/object-is@1.1.6/node_modules/object-is/implementation.js");

module.exports = function getPolyfill() {
	return typeof Object.is === 'function' ? Object.is : implementation;
};


}),
"./node_modules/.pnpm/object-is@1.1.6/node_modules/object-is/shim.js": 
/*!***************************************************************************!*\
  !*** ./node_modules/.pnpm/object-is@1.1.6/node_modules/object-is/shim.js ***!
  \***************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var getPolyfill = __webpack_require__(/*! ./polyfill */ "./node_modules/.pnpm/object-is@1.1.6/node_modules/object-is/polyfill.js");
var define = __webpack_require__(/*! define-properties */ "./node_modules/.pnpm/define-properties@1.2.1/node_modules/define-properties/index.js");

module.exports = function shimObjectIs() {
	var polyfill = getPolyfill();
	define(Object, { is: polyfill }, {
		is: function testObjectIs() {
			return Object.is !== polyfill;
		}
	});
	return polyfill;
};


}),
"./node_modules/.pnpm/object-keys@1.1.1/node_modules/object-keys/implementation.js": 
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/object-keys@1.1.1/node_modules/object-keys/implementation.js ***!
  \*****************************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var keysShim;
if (!Object.keys) {
	// modified from https://github.com/es-shims/es5-shim
	var has = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	var isArgs = __webpack_require__(/*! ./isArguments */ "./node_modules/.pnpm/object-keys@1.1.1/node_modules/object-keys/isArguments.js"); // eslint-disable-line global-require
	var isEnumerable = Object.prototype.propertyIsEnumerable;
	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
	var dontEnums = [
		'toString',
		'toLocaleString',
		'valueOf',
		'hasOwnProperty',
		'isPrototypeOf',
		'propertyIsEnumerable',
		'constructor'
	];
	var equalsConstructorPrototype = function (o) {
		var ctor = o.constructor;
		return ctor && ctor.prototype === o;
	};
	var excludedKeys = {
		$applicationCache: true,
		$console: true,
		$external: true,
		$frame: true,
		$frameElement: true,
		$frames: true,
		$innerHeight: true,
		$innerWidth: true,
		$onmozfullscreenchange: true,
		$onmozfullscreenerror: true,
		$outerHeight: true,
		$outerWidth: true,
		$pageXOffset: true,
		$pageYOffset: true,
		$parent: true,
		$scrollLeft: true,
		$scrollTop: true,
		$scrollX: true,
		$scrollY: true,
		$self: true,
		$webkitIndexedDB: true,
		$webkitStorageInfo: true,
		$window: true
	};
	var hasAutomationEqualityBug = (function () {
		/* global window */
		if (typeof window === 'undefined') { return false; }
		for (var k in window) {
			try {
				if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
					try {
						equalsConstructorPrototype(window[k]);
					} catch (e) {
						return true;
					}
				}
			} catch (e) {
				return true;
			}
		}
		return false;
	}());
	var equalsConstructorPrototypeIfNotBuggy = function (o) {
		/* global window */
		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
			return equalsConstructorPrototype(o);
		}
		try {
			return equalsConstructorPrototype(o);
		} catch (e) {
			return false;
		}
	};

	keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object';
		var isFunction = toStr.call(object) === '[object Function]';
		var isArguments = isArgs(object);
		var isString = isObject && toStr.call(object) === '[object String]';
		var theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError('Object.keys called on a non-object');
		}

		var skipProto = hasProtoEnumBug && isFunction;
		if (isString && object.length > 0 && !has.call(object, 0)) {
			for (var i = 0; i < object.length; ++i) {
				theKeys.push(String(i));
			}
		}

		if (isArguments && object.length > 0) {
			for (var j = 0; j < object.length; ++j) {
				theKeys.push(String(j));
			}
		} else {
			for (var name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(String(name));
				}
			}
		}

		if (hasDontEnumBug) {
			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

			for (var k = 0; k < dontEnums.length; ++k) {
				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
					theKeys.push(dontEnums[k]);
				}
			}
		}
		return theKeys;
	};
}
module.exports = keysShim;


}),
"./node_modules/.pnpm/object-keys@1.1.1/node_modules/object-keys/index.js": 
/*!********************************************************************************!*\
  !*** ./node_modules/.pnpm/object-keys@1.1.1/node_modules/object-keys/index.js ***!
  \********************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var slice = Array.prototype.slice;
var isArgs = __webpack_require__(/*! ./isArguments */ "./node_modules/.pnpm/object-keys@1.1.1/node_modules/object-keys/isArguments.js");

var origKeys = Object.keys;
var keysShim = origKeys ? function keys(o) { return origKeys(o); } : __webpack_require__(/*! ./implementation */ "./node_modules/.pnpm/object-keys@1.1.1/node_modules/object-keys/implementation.js");

var originalKeys = Object.keys;

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			var args = Object.keys(arguments);
			return args && args.length === arguments.length;
		}(1, 2));
		if (!keysWorksWithArguments) {
			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				}
				return originalKeys(object);
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;


}),
"./node_modules/.pnpm/object-keys@1.1.1/node_modules/object-keys/isArguments.js": 
/*!**************************************************************************************!*\
  !*** ./node_modules/.pnpm/object-keys@1.1.1/node_modules/object-keys/isArguments.js ***!
  \**************************************************************************************/
(function (module) {
"use strict";


var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};


}),
"./node_modules/.pnpm/object.assign@4.1.7/node_modules/object.assign/implementation.js": 
/*!*********************************************************************************************!*\
  !*** ./node_modules/.pnpm/object.assign@4.1.7/node_modules/object.assign/implementation.js ***!
  \*********************************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


// modified from https://github.com/es-shims/es6-shim
var objectKeys = __webpack_require__(/*! object-keys */ "./node_modules/.pnpm/object-keys@1.1.1/node_modules/object-keys/index.js");
var hasSymbols = __webpack_require__(/*! has-symbols/shams */ "./node_modules/.pnpm/has-symbols@1.1.0/node_modules/has-symbols/shams.js")();
var callBound = __webpack_require__(/*! call-bound */ "./node_modules/.pnpm/call-bound@1.0.4/node_modules/call-bound/index.js");
var $Object = __webpack_require__(/*! es-object-atoms */ "./node_modules/.pnpm/es-object-atoms@1.1.1/node_modules/es-object-atoms/index.js");
var $push = callBound('Array.prototype.push');
var $propIsEnumerable = callBound('Object.prototype.propertyIsEnumerable');
var originalGetSymbols = hasSymbols ? $Object.getOwnPropertySymbols : null;

// eslint-disable-next-line no-unused-vars
module.exports = function assign(target, source1) {
	if (target == null) { throw new TypeError('target must be an object'); }
	var to = $Object(target); // step 1
	if (arguments.length === 1) {
		return to; // step 2
	}
	for (var s = 1; s < arguments.length; ++s) {
		var from = $Object(arguments[s]); // step 3.a.i

		// step 3.a.ii:
		var keys = objectKeys(from);
		var getSymbols = hasSymbols && ($Object.getOwnPropertySymbols || originalGetSymbols);
		if (getSymbols) {
			var syms = getSymbols(from);
			for (var j = 0; j < syms.length; ++j) {
				var key = syms[j];
				if ($propIsEnumerable(from, key)) {
					$push(keys, key);
				}
			}
		}

		// step 3.a.iii:
		for (var i = 0; i < keys.length; ++i) {
			var nextKey = keys[i];
			if ($propIsEnumerable(from, nextKey)) { // step 3.a.iii.2
				var propValue = from[nextKey]; // step 3.a.iii.2.a
				to[nextKey] = propValue; // step 3.a.iii.2.b
			}
		}
	}

	return to; // step 4
};


}),
"./node_modules/.pnpm/object.assign@4.1.7/node_modules/object.assign/polyfill.js": 
/*!***************************************************************************************!*\
  !*** ./node_modules/.pnpm/object.assign@4.1.7/node_modules/object.assign/polyfill.js ***!
  \***************************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var implementation = __webpack_require__(/*! ./implementation */ "./node_modules/.pnpm/object.assign@4.1.7/node_modules/object.assign/implementation.js");

var lacksProperEnumerationOrder = function () {
	if (!Object.assign) {
		return false;
	}
	/*
	 * v8, specifically in node 4.x, has a bug with incorrect property enumeration order
	 * note: this does not detect the bug unless there's 20 characters
	 */
	var str = 'abcdefghijklmnopqrst';
	var letters = str.split('');
	var map = {};
	for (var i = 0; i < letters.length; ++i) {
		map[letters[i]] = letters[i];
	}
	var obj = Object.assign({}, map);
	var actual = '';
	for (var k in obj) {
		actual += k;
	}
	return str !== actual;
};

var assignHasPendingExceptions = function () {
	if (!Object.assign || !Object.preventExtensions) {
		return false;
	}
	/*
	 * Firefox 37 still has "pending exception" logic in its Object.assign implementation,
	 * which is 72% slower than our shim, and Firefox 40's native implementation.
	 */
	var thrower = Object.preventExtensions({ 1: 2 });
	try {
		Object.assign(thrower, 'xy');
	} catch (e) {
		return thrower[1] === 'y';
	}
	return false;
};

module.exports = function getPolyfill() {
	if (!Object.assign) {
		return implementation;
	}
	if (lacksProperEnumerationOrder()) {
		return implementation;
	}
	if (assignHasPendingExceptions()) {
		return implementation;
	}
	return Object.assign;
};


}),
"./node_modules/.pnpm/possible-typed-array-names@1.1.0/node_modules/possible-typed-array-names/index.js": 
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/possible-typed-array-names@1.1.0/node_modules/possible-typed-array-names/index.js ***!
  \**************************************************************************************************************/
(function (module) {
"use strict";


/** @type {import('.')} */
module.exports = [
	'Float16Array',
	'Float32Array',
	'Float64Array',
	'Int8Array',
	'Int16Array',
	'Int32Array',
	'Uint8Array',
	'Uint8ClampedArray',
	'Uint16Array',
	'Uint32Array',
	'BigInt64Array',
	'BigUint64Array'
];


}),
"./node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js": 
/*!****************************************************************************!*\
  !*** ./node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js ***!
  \****************************************************************************/
(function (module) {
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


}),
"./node_modules/.pnpm/safe-regex-test@1.1.0/node_modules/safe-regex-test/index.js": 
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/safe-regex-test@1.1.0/node_modules/safe-regex-test/index.js ***!
  \****************************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var callBound = __webpack_require__(/*! call-bound */ "./node_modules/.pnpm/call-bound@1.0.4/node_modules/call-bound/index.js");
var isRegex = __webpack_require__(/*! is-regex */ "./node_modules/.pnpm/is-regex@1.2.1/node_modules/is-regex/index.js");

var $exec = callBound('RegExp.prototype.exec');
var $TypeError = __webpack_require__(/*! es-errors/type */ "./node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/type.js");

/** @type {import('.')} */
module.exports = function regexTester(regex) {
	if (!isRegex(regex)) {
		throw new $TypeError('`regex` must be a RegExp');
	}
	return function test(s) {
		return $exec(regex, s) !== null;
	};
};


}),
"./node_modules/.pnpm/set-function-length@1.2.2/node_modules/set-function-length/index.js": 
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/set-function-length@1.2.2/node_modules/set-function-length/index.js ***!
  \************************************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "./node_modules/.pnpm/get-intrinsic@1.3.0/node_modules/get-intrinsic/index.js");
var define = __webpack_require__(/*! define-data-property */ "./node_modules/.pnpm/define-data-property@1.1.4/node_modules/define-data-property/index.js");
var hasDescriptors = __webpack_require__(/*! has-property-descriptors */ "./node_modules/.pnpm/has-property-descriptors@1.0.2/node_modules/has-property-descriptors/index.js")();
var gOPD = __webpack_require__(/*! gopd */ "./node_modules/.pnpm/gopd@1.2.0/node_modules/gopd/index.js");

var $TypeError = __webpack_require__(/*! es-errors/type */ "./node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/type.js");
var $floor = GetIntrinsic('%Math.floor%');

/** @type {import('.')} */
module.exports = function setFunctionLength(fn, length) {
	if (typeof fn !== 'function') {
		throw new $TypeError('`fn` is not a function');
	}
	if (typeof length !== 'number' || length < 0 || length > 0xFFFFFFFF || $floor(length) !== length) {
		throw new $TypeError('`length` must be a positive 32-bit integer');
	}

	var loose = arguments.length > 2 && !!arguments[2];

	var functionLengthIsConfigurable = true;
	var functionLengthIsWritable = true;
	if ('length' in fn && gOPD) {
		var desc = gOPD(fn, 'length');
		if (desc && !desc.configurable) {
			functionLengthIsConfigurable = false;
		}
		if (desc && !desc.writable) {
			functionLengthIsWritable = false;
		}
	}

	if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
		if (hasDescriptors) {
			define(/** @type {Parameters<define>[0]} */ (fn), 'length', length, true, true);
		} else {
			define(/** @type {Parameters<define>[0]} */ (fn), 'length', length);
		}
	}
	return fn;
};


}),
"./node_modules/.pnpm/util@0.12.5/node_modules/util/support/isBufferBrowser.js": 
/*!*************************************************************************************!*\
  !*** ./node_modules/.pnpm/util@0.12.5/node_modules/util/support/isBufferBrowser.js ***!
  \*************************************************************************************/
(function (module) {
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

}),
"./node_modules/.pnpm/util@0.12.5/node_modules/util/support/types.js": 
/*!***************************************************************************!*\
  !*** ./node_modules/.pnpm/util@0.12.5/node_modules/util/support/types.js ***!
  \***************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
// Currently in sync with Node.js lib/internal/util/types.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9



var isArgumentsObject = __webpack_require__(/*! is-arguments */ "./node_modules/.pnpm/is-arguments@1.2.0/node_modules/is-arguments/index.js");
var isGeneratorFunction = __webpack_require__(/*! is-generator-function */ "./node_modules/.pnpm/is-generator-function@1.1.0/node_modules/is-generator-function/index.js");
var whichTypedArray = __webpack_require__(/*! which-typed-array */ "./node_modules/.pnpm/which-typed-array@1.1.19/node_modules/which-typed-array/index.js");
var isTypedArray = __webpack_require__(/*! is-typed-array */ "./node_modules/.pnpm/is-typed-array@1.1.15/node_modules/is-typed-array/index.js");

function uncurryThis(f) {
  return f.call.bind(f);
}

var BigIntSupported = typeof BigInt !== 'undefined';
var SymbolSupported = typeof Symbol !== 'undefined';

var ObjectToString = uncurryThis(Object.prototype.toString);

var numberValue = uncurryThis(Number.prototype.valueOf);
var stringValue = uncurryThis(String.prototype.valueOf);
var booleanValue = uncurryThis(Boolean.prototype.valueOf);

if (BigIntSupported) {
  var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
}

if (SymbolSupported) {
  var symbolValue = uncurryThis(Symbol.prototype.valueOf);
}

function checkBoxedPrimitive(value, prototypeValueOf) {
  if (typeof value !== 'object') {
    return false;
  }
  try {
    prototypeValueOf(value);
    return true;
  } catch(e) {
    return false;
  }
}

exports.isArgumentsObject = isArgumentsObject;
exports.isGeneratorFunction = isGeneratorFunction;
exports.isTypedArray = isTypedArray;

// Taken from here and modified for better browser support
// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
function isPromise(input) {
	return (
		(
			typeof Promise !== 'undefined' &&
			input instanceof Promise
		) ||
		(
			input !== null &&
			typeof input === 'object' &&
			typeof input.then === 'function' &&
			typeof input.catch === 'function'
		)
	);
}
exports.isPromise = isPromise;

function isArrayBufferView(value) {
  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    return ArrayBuffer.isView(value);
  }

  return (
    isTypedArray(value) ||
    isDataView(value)
  );
}
exports.isArrayBufferView = isArrayBufferView;


function isUint8Array(value) {
  return whichTypedArray(value) === 'Uint8Array';
}
exports.isUint8Array = isUint8Array;

function isUint8ClampedArray(value) {
  return whichTypedArray(value) === 'Uint8ClampedArray';
}
exports.isUint8ClampedArray = isUint8ClampedArray;

function isUint16Array(value) {
  return whichTypedArray(value) === 'Uint16Array';
}
exports.isUint16Array = isUint16Array;

function isUint32Array(value) {
  return whichTypedArray(value) === 'Uint32Array';
}
exports.isUint32Array = isUint32Array;

function isInt8Array(value) {
  return whichTypedArray(value) === 'Int8Array';
}
exports.isInt8Array = isInt8Array;

function isInt16Array(value) {
  return whichTypedArray(value) === 'Int16Array';
}
exports.isInt16Array = isInt16Array;

function isInt32Array(value) {
  return whichTypedArray(value) === 'Int32Array';
}
exports.isInt32Array = isInt32Array;

function isFloat32Array(value) {
  return whichTypedArray(value) === 'Float32Array';
}
exports.isFloat32Array = isFloat32Array;

function isFloat64Array(value) {
  return whichTypedArray(value) === 'Float64Array';
}
exports.isFloat64Array = isFloat64Array;

function isBigInt64Array(value) {
  return whichTypedArray(value) === 'BigInt64Array';
}
exports.isBigInt64Array = isBigInt64Array;

function isBigUint64Array(value) {
  return whichTypedArray(value) === 'BigUint64Array';
}
exports.isBigUint64Array = isBigUint64Array;

function isMapToString(value) {
  return ObjectToString(value) === '[object Map]';
}
isMapToString.working = (
  typeof Map !== 'undefined' &&
  isMapToString(new Map())
);

function isMap(value) {
  if (typeof Map === 'undefined') {
    return false;
  }

  return isMapToString.working
    ? isMapToString(value)
    : value instanceof Map;
}
exports.isMap = isMap;

function isSetToString(value) {
  return ObjectToString(value) === '[object Set]';
}
isSetToString.working = (
  typeof Set !== 'undefined' &&
  isSetToString(new Set())
);
function isSet(value) {
  if (typeof Set === 'undefined') {
    return false;
  }

  return isSetToString.working
    ? isSetToString(value)
    : value instanceof Set;
}
exports.isSet = isSet;

function isWeakMapToString(value) {
  return ObjectToString(value) === '[object WeakMap]';
}
isWeakMapToString.working = (
  typeof WeakMap !== 'undefined' &&
  isWeakMapToString(new WeakMap())
);
function isWeakMap(value) {
  if (typeof WeakMap === 'undefined') {
    return false;
  }

  return isWeakMapToString.working
    ? isWeakMapToString(value)
    : value instanceof WeakMap;
}
exports.isWeakMap = isWeakMap;

function isWeakSetToString(value) {
  return ObjectToString(value) === '[object WeakSet]';
}
isWeakSetToString.working = (
  typeof WeakSet !== 'undefined' &&
  isWeakSetToString(new WeakSet())
);
function isWeakSet(value) {
  return isWeakSetToString(value);
}
exports.isWeakSet = isWeakSet;

function isArrayBufferToString(value) {
  return ObjectToString(value) === '[object ArrayBuffer]';
}
isArrayBufferToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  isArrayBufferToString(new ArrayBuffer())
);
function isArrayBuffer(value) {
  if (typeof ArrayBuffer === 'undefined') {
    return false;
  }

  return isArrayBufferToString.working
    ? isArrayBufferToString(value)
    : value instanceof ArrayBuffer;
}
exports.isArrayBuffer = isArrayBuffer;

function isDataViewToString(value) {
  return ObjectToString(value) === '[object DataView]';
}
isDataViewToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  typeof DataView !== 'undefined' &&
  isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1))
);
function isDataView(value) {
  if (typeof DataView === 'undefined') {
    return false;
  }

  return isDataViewToString.working
    ? isDataViewToString(value)
    : value instanceof DataView;
}
exports.isDataView = isDataView;

// Store a copy of SharedArrayBuffer in case it's deleted elsewhere
var SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;
function isSharedArrayBufferToString(value) {
  return ObjectToString(value) === '[object SharedArrayBuffer]';
}
function isSharedArrayBuffer(value) {
  if (typeof SharedArrayBufferCopy === 'undefined') {
    return false;
  }

  if (typeof isSharedArrayBufferToString.working === 'undefined') {
    isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
  }

  return isSharedArrayBufferToString.working
    ? isSharedArrayBufferToString(value)
    : value instanceof SharedArrayBufferCopy;
}
exports.isSharedArrayBuffer = isSharedArrayBuffer;

function isAsyncFunction(value) {
  return ObjectToString(value) === '[object AsyncFunction]';
}
exports.isAsyncFunction = isAsyncFunction;

function isMapIterator(value) {
  return ObjectToString(value) === '[object Map Iterator]';
}
exports.isMapIterator = isMapIterator;

function isSetIterator(value) {
  return ObjectToString(value) === '[object Set Iterator]';
}
exports.isSetIterator = isSetIterator;

function isGeneratorObject(value) {
  return ObjectToString(value) === '[object Generator]';
}
exports.isGeneratorObject = isGeneratorObject;

function isWebAssemblyCompiledModule(value) {
  return ObjectToString(value) === '[object WebAssembly.Module]';
}
exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;

function isNumberObject(value) {
  return checkBoxedPrimitive(value, numberValue);
}
exports.isNumberObject = isNumberObject;

function isStringObject(value) {
  return checkBoxedPrimitive(value, stringValue);
}
exports.isStringObject = isStringObject;

function isBooleanObject(value) {
  return checkBoxedPrimitive(value, booleanValue);
}
exports.isBooleanObject = isBooleanObject;

function isBigIntObject(value) {
  return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
}
exports.isBigIntObject = isBigIntObject;

function isSymbolObject(value) {
  return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
}
exports.isSymbolObject = isSymbolObject;

function isBoxedPrimitive(value) {
  return (
    isNumberObject(value) ||
    isStringObject(value) ||
    isBooleanObject(value) ||
    isBigIntObject(value) ||
    isSymbolObject(value)
  );
}
exports.isBoxedPrimitive = isBoxedPrimitive;

function isAnyArrayBuffer(value) {
  return typeof Uint8Array !== 'undefined' && (
    isArrayBuffer(value) ||
    isSharedArrayBuffer(value)
  );
}
exports.isAnyArrayBuffer = isAnyArrayBuffer;

['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function(method) {
  Object.defineProperty(exports, method, {
    enumerable: false,
    value: function() {
      throw new Error(method + ' is not supported in userland');
    }
  });
});


}),
"./node_modules/.pnpm/util@0.12.5/node_modules/util/util.js": 
/*!******************************************************************!*\
  !*** ./node_modules/.pnpm/util@0.12.5/node_modules/util/util.js ***!
  \******************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/* provided dependency */ var process = __webpack_require__(/*! ./node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js */ "./node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/.pnpm/console-browserify@1.2.0/node_modules/console-browserify/index.js */ "./node_modules/.pnpm/console-browserify@1.2.0/node_modules/console-browserify/index.js");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }

  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnvRegex = /^$/;

if (process.env.NODE_DEBUG) {
  var debugEnv = process.env.NODE_DEBUG;
  debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, '\\$&')
    .replace(/\*/g, '.*')
    .replace(/,/g, '$|^')
    .toUpperCase();
  debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');
}
exports.debuglog = function(set) {
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (debugEnvRegex.test(set)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').slice(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.slice(1, -1);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
exports.types = __webpack_require__(/*! ./support/types */ "./node_modules/.pnpm/util@0.12.5/node_modules/util/support/types.js");

function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;
exports.types.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;
exports.types.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;
exports.types.isNativeError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ "./node_modules/.pnpm/util@0.12.5/node_modules/util/support/isBufferBrowser.js");

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(/*! inherits */ "./node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js");

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}

exports.promisify.custom = kCustomPromisifiedSymbol

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { process.nextTick(cb.bind(null, null, ret)) },
            function(rej) { process.nextTick(callbackifyOnRejected.bind(null, rej, cb)) });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified,
                          getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;


}),
"./node_modules/.pnpm/which-typed-array@1.1.19/node_modules/which-typed-array/index.js": 
/*!*********************************************************************************************!*\
  !*** ./node_modules/.pnpm/which-typed-array@1.1.19/node_modules/which-typed-array/index.js ***!
  \*********************************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var forEach = __webpack_require__(/*! for-each */ "./node_modules/.pnpm/for-each@0.3.5/node_modules/for-each/index.js");
var availableTypedArrays = __webpack_require__(/*! available-typed-arrays */ "./node_modules/.pnpm/available-typed-arrays@1.0.7/node_modules/available-typed-arrays/index.js");
var callBind = __webpack_require__(/*! call-bind */ "./node_modules/.pnpm/call-bind@1.0.8/node_modules/call-bind/index.js");
var callBound = __webpack_require__(/*! call-bound */ "./node_modules/.pnpm/call-bound@1.0.4/node_modules/call-bound/index.js");
var gOPD = __webpack_require__(/*! gopd */ "./node_modules/.pnpm/gopd@1.2.0/node_modules/gopd/index.js");
var getProto = __webpack_require__(/*! get-proto */ "./node_modules/.pnpm/get-proto@1.0.1/node_modules/get-proto/index.js");

var $toString = callBound('Object.prototype.toString');
var hasToStringTag = __webpack_require__(/*! has-tostringtag/shams */ "./node_modules/.pnpm/has-tostringtag@1.0.2/node_modules/has-tostringtag/shams.js")();

var g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;
var typedArrays = availableTypedArrays();

var $slice = callBound('String.prototype.slice');

/** @type {<T = unknown>(array: readonly T[], value: unknown) => number} */
var $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {
	for (var i = 0; i < array.length; i += 1) {
		if (array[i] === value) {
			return i;
		}
	}
	return -1;
};

/** @typedef {import('./types').Getter} Getter */
/** @type {import('./types').Cache} */
var cache = { __proto__: null };
if (hasToStringTag && gOPD && getProto) {
	forEach(typedArrays, function (typedArray) {
		var arr = new g[typedArray]();
		if (Symbol.toStringTag in arr && getProto) {
			var proto = getProto(arr);
			// @ts-expect-error TS won't narrow inside a closure
			var descriptor = gOPD(proto, Symbol.toStringTag);
			if (!descriptor && proto) {
				var superProto = getProto(proto);
				// @ts-expect-error TS won't narrow inside a closure
				descriptor = gOPD(superProto, Symbol.toStringTag);
			}
			// @ts-expect-error TODO: fix
			cache['$' + typedArray] = callBind(descriptor.get);
		}
	});
} else {
	forEach(typedArrays, function (typedArray) {
		var arr = new g[typedArray]();
		var fn = arr.slice || arr.set;
		if (fn) {
			cache[
				/** @type {`$${import('.').TypedArrayName}`} */ ('$' + typedArray)
			] = /** @type {import('./types').BoundSlice | import('./types').BoundSet} */ (
				// @ts-expect-error TODO FIXME
				callBind(fn)
			);
		}
	});
}

/** @type {(value: object) => false | import('.').TypedArrayName} */
var tryTypedArrays = function tryAllTypedArrays(value) {
	/** @type {ReturnType<typeof tryAllTypedArrays>} */ var found = false;
	forEach(
		/** @type {Record<`\$${import('.').TypedArrayName}`, Getter>} */ (cache),
		/** @type {(getter: Getter, name: `\$${import('.').TypedArrayName}`) => void} */
		function (getter, typedArray) {
			if (!found) {
				try {
					// @ts-expect-error a throw is fine here
					if ('$' + getter(value) === typedArray) {
						found = /** @type {import('.').TypedArrayName} */ ($slice(typedArray, 1));
					}
				} catch (e) { /**/ }
			}
		}
	);
	return found;
};

/** @type {(value: object) => false | import('.').TypedArrayName} */
var trySlices = function tryAllSlices(value) {
	/** @type {ReturnType<typeof tryAllSlices>} */ var found = false;
	forEach(
		/** @type {Record<`\$${import('.').TypedArrayName}`, Getter>} */(cache),
		/** @type {(getter: Getter, name: `\$${import('.').TypedArrayName}`) => void} */ function (getter, name) {
			if (!found) {
				try {
					// @ts-expect-error a throw is fine here
					getter(value);
					found = /** @type {import('.').TypedArrayName} */ ($slice(name, 1));
				} catch (e) { /**/ }
			}
		}
	);
	return found;
};

/** @type {import('.')} */
module.exports = function whichTypedArray(value) {
	if (!value || typeof value !== 'object') { return false; }
	if (!hasToStringTag) {
		/** @type {string} */
		var tag = $slice($toString(value), 8, -1);
		if ($indexOf(typedArrays, tag) > -1) {
			return tag;
		}
		if (tag !== 'Object') {
			return false;
		}
		// node < 0.6 hits here on real Typed Arrays
		return trySlices(value);
	}
	if (!gOPD) { return null; } // unknown engine
	return tryTypedArrays(value);
};


}),
"./src/enums.ts": 
/*!**********************!*\
  !*** ./src/enums.ts ***!
  \**********************/
(function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  CustomMessageType: () => (CustomMessageType),
  Protocol: () => (Protocol)
});
var Protocol = /*#__PURE__*/ function(Protocol) {
    // Room-related (10~19)
    Protocol[Protocol["HANDSHAKE"] = 9] = "HANDSHAKE";
    Protocol[Protocol["JOIN_ROOM"] = 10] = "JOIN_ROOM";
    Protocol[Protocol["ERROR"] = 11] = "ERROR";
    Protocol[Protocol["LEAVE_ROOM"] = 12] = "LEAVE_ROOM";
    Protocol[Protocol["ROOM_DATA"] = 13] = "ROOM_DATA";
    Protocol[Protocol["ROOM_STATE"] = 14] = "ROOM_STATE";
    Protocol[Protocol["ROOM_STATE_PATCH"] = 15] = "ROOM_STATE_PATCH";
    Protocol[Protocol["ROOM_DATA_SCHEMA"] = 16] = "ROOM_DATA_SCHEMA";
    Protocol[Protocol["ROOM_DATA_BYTES"] = 17] = "ROOM_DATA_BYTES";
    return Protocol;
}({});
var CustomMessageType = /*#__PURE__*/ function(CustomMessageType) {
    CustomMessageType[CustomMessageType["PositionUpdate"] = 41] = "PositionUpdate";
    CustomMessageType[CustomMessageType["Chat"] = 71] = "Chat";
    CustomMessageType[CustomMessageType["SetGun"] = 88] = "SetGun";
    CustomMessageType[CustomMessageType["Shoot"] = 61] = "Shoot";
    CustomMessageType[CustomMessageType["ShotRejected"] = 39] = "ShotRejected";
    CustomMessageType[CustomMessageType["Explosion"] = 70] = "Explosion";
    CustomMessageType[CustomMessageType["RocketKilled"] = 87] = "RocketKilled";
    CustomMessageType[CustomMessageType["UserDataChanged"] = 81] = "UserDataChanged";
    CustomMessageType[CustomMessageType["Ping"] = 75] = "Ping";
    CustomMessageType[CustomMessageType["Pong"] = 78] = "Pong";
    CustomMessageType[CustomMessageType["RequestSpawn"] = 84] = "RequestSpawn";
    CustomMessageType[CustomMessageType["SceneLoaded"] = 83] = "SceneLoaded";
    CustomMessageType[CustomMessageType["GotShot"] = 69] = "GotShot";
    CustomMessageType[CustomMessageType["GameEnded"] = 35] = "GameEnded";
    CustomMessageType[CustomMessageType["TakeItem"] = 30] = "TakeItem";
    CustomMessageType[CustomMessageType["ThrowGrenade"] = 89] = "ThrowGrenade";
    CustomMessageType[CustomMessageType["GrenadePositionUpdate"] = 31] = "GrenadePositionUpdate";
    CustomMessageType[CustomMessageType["PickupFlag"] = 38] = "PickupFlag";
    CustomMessageType[CustomMessageType["CollectTag"] = 73] = "CollectTag";
    CustomMessageType[CustomMessageType["SubmitFlag"] = 32] = "SubmitFlag";
    CustomMessageType[CustomMessageType["Dash"] = 46] = "Dash";
    CustomMessageType[CustomMessageType["ShowClientNotification"] = 33] = "ShowClientNotification";
    CustomMessageType[CustomMessageType["Crouch"] = 59] = "Crouch";
    return CustomMessageType;
}({});


}),
"./src/schemas.ts": 
/*!************************!*\
  !*** ./src/schemas.ts ***!
  \************************/
(function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  CapturePoint: () => (CapturePoint),
  DroppedTag: () => (DroppedTag),
  Flag: () => (Flag),
  Grenade: () => (Grenade),
  MyRoomState: () => (MyRoomState),
  Player: () => (Player),
  PublicUserData: () => (PublicUserData),
  SpawnedItem: () => (SpawnedItem),
  Weapon: () => (Weapon)
});
/* ESM import */var _colyseus_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @colyseus/schema */ "./node_modules/.pnpm/@colyseus+schema@3.0.35/node_modules/@colyseus/schema/build/umd/index.js");
/* ESM import */var _colyseus_schema__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__);
function _assert_this_initialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function _call_super(_this, derived, args) {
    derived = _get_prototype_of(derived);
    return _possible_constructor_return(_this, _is_native_reflect_construct() ? Reflect.construct(derived, args || [], _get_prototype_of(_this).constructor) : derived.apply(_this, args));
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _get_prototype_of(o) {
    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _possible_constructor_return(self, call) {
    if (call && (_type_of(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assert_this_initialized(self);
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _is_native_reflect_construct() {
    try {
        var result = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
    } catch (_) {}
    return (_is_native_reflect_construct = function() {
        return !!result;
    })();
}
function _ts_decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

// remember to update alongside the game
var ColyVector3 = /*#__PURE__*/ function(Schema) {
    "use strict";
    _inherits(ColyVector3, Schema);
    function ColyVector3() {
        _class_call_check(this, ColyVector3);
        var _this;
        _this = _call_super(this, ColyVector3, arguments), _define_property(_this, "x", void 0), _define_property(_this, "y", void 0), _define_property(_this, "z", void 0);
        return _this;
    }
    return ColyVector3;
}(_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.Schema);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("number")
], ColyVector3.prototype, "x", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("number")
], ColyVector3.prototype, "y", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("number")
], ColyVector3.prototype, "z", void 0);
var ColyRigid = /*#__PURE__*/ function(Schema) {
    "use strict";
    _inherits(ColyRigid, Schema);
    function ColyRigid() {
        _class_call_check(this, ColyRigid);
        var _this;
        _this = _call_super(this, ColyRigid, arguments), _define_property(_this, "position", void 0), _define_property(_this, "rotationY", void 0), _define_property(_this, "air", void 0), _define_property(_this, "neck", void 0);
        return _this;
    }
    return ColyRigid;
}(_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.Schema);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)(ColyVector3)
], ColyRigid.prototype, "position", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("number")
], ColyRigid.prototype, "rotationY", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("boolean")
], ColyRigid.prototype, "air", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("int8")
], ColyRigid.prototype, "neck", void 0);
var Weapon = /*#__PURE__*/ function(Schema) {
    "use strict";
    _inherits(Weapon, Schema);
    function Weapon() {
        _class_call_check(this, Weapon);
        var _this;
        _this = _call_super(this, Weapon, arguments), _define_property(_this, "weaponId", void 0), _define_property(_this, "skinId", void 0);
        return _this;
    }
    return Weapon;
}(_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.Schema);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("int16")
], Weapon.prototype, "weaponId", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("int16")
], Weapon.prototype, "skinId", void 0);
var PublicUserData = /*#__PURE__*/ function(Schema) {
    "use strict";
    _inherits(PublicUserData, Schema);
    function PublicUserData() {
        _class_call_check(this, PublicUserData);
        var _this;
        _this = _call_super(this, PublicUserData, arguments), _define_property(_this, "username", void 0), _define_property(_this, "pfp", void 0), _define_property(_this, "createdAt", void 0);
        return _this;
    }
    return PublicUserData;
}(_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.Schema);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("string")
], PublicUserData.prototype, "username", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("string")
], PublicUserData.prototype, "pfp", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("string")
], PublicUserData.prototype, "createdAt", void 0);
var Shot = /*#__PURE__*/ function(Schema) {
    "use strict";
    _inherits(Shot, Schema);
    function Shot() {
        _class_call_check(this, Shot);
        var _this;
        _this = _call_super(this, Shot, arguments), _define_property(_this, "byId", void 0), _define_property(_this, "gunId", void 0);
        return _this;
    }
    return Shot;
}(_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.Schema);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("string")
], Shot.prototype, "byId", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("int8")
], Shot.prototype, "gunId", void 0);
var Player = /*#__PURE__*/ function(Schema) {
    "use strict";
    _inherits(Player, Schema);
    function Player() {
        _class_call_check(this, Player);
        var _this;
        _this = _call_super(this, Player, arguments), _define_property(_this, "selectedGunSkins", void 0), _define_property(_this, "playerId", void 0), _define_property(_this, "nickname", void 0), _define_property(_this, "score", void 0), _define_property(_this, "elo", void 0), _define_property(_this, "kills", void 0), _define_property(_this, "deaths", void 0), _define_property(_this, "skin", void 0), _define_property(_this, "hat", void 0), _define_property(_this, "back", void 0), _define_property(_this, "weaponsCollected", void 0), _define_property(_this, "maxKillStreak", void 0), _define_property(_this, "rigid", void 0), _define_property(_this, "health", void 0), _define_property(_this, "weaponClass", void 0), _define_property(_this, "spawned", void 0), _define_property(_this, "dashing", void 0), _define_property(_this, "crouching", void 0), _define_property(_this, "sceneLoaded", void 0), _define_property(_this, "localWeaponIndex", void 0), _define_property(_this, "team", void 0), _define_property(_this, "healthProtected", void 0), _define_property(_this, "inventory", void 0), _define_property(_this, "userId", void 0), _define_property(_this, "user", void 0), _define_property(_this, "lastGotShot", void 0), _define_property(_this, "currentKillStreak", void 0), _define_property(_this, "killsWithWeapon", void 0), _define_property(_this, "headshots", void 0), _define_property(_this, "startPlayTime", void 0), _define_property(_this, "lastShotTime", void 0), _define_property(_this, "lastShootTime", void 0);
        return _this;
    }
    return Player;
}(_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.Schema);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)({
        map: "int16"
    })
], Player.prototype, "selectedGunSkins", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("string")
], Player.prototype, "playerId", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("string")
], Player.prototype, "nickname", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("uint32")
], Player.prototype, "score", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("number")
], Player.prototype, "elo", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("uint16")
], Player.prototype, "kills", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("uint16")
], Player.prototype, "deaths", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("int16")
], Player.prototype, "skin", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("int16")
], Player.prototype, "hat", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("int16")
], Player.prototype, "back", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("uint16")
], Player.prototype, "weaponsCollected", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("uint16")
], Player.prototype, "maxKillStreak", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)(ColyRigid)
], Player.prototype, "rigid", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("uint8")
], Player.prototype, "health", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("uint8")
], Player.prototype, "weaponClass", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("boolean")
], Player.prototype, "spawned", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("boolean")
], Player.prototype, "dashing", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("boolean")
], Player.prototype, "crouching", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("boolean")
], Player.prototype, "sceneLoaded", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("int8")
], Player.prototype, "localWeaponIndex", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("int8")
], Player.prototype, "team", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("boolean")
], Player.prototype, "healthProtected", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)([
        Weapon
    ])
], Player.prototype, "inventory", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("string")
], Player.prototype, "userId", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)(PublicUserData)
], Player.prototype, "user", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)(Shot)
], Player.prototype, "lastGotShot", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("number")
], Player.prototype, "currentKillStreak", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)({
        map: "number"
    })
], Player.prototype, "killsWithWeapon", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("number")
], Player.prototype, "headshots", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("number")
], Player.prototype, "startPlayTime", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("number")
], Player.prototype, "lastShotTime", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("number")
], Player.prototype, "lastShootTime", void 0);
var SpawnedItem = /*#__PURE__*/ function(Schema) {
    "use strict";
    _inherits(SpawnedItem, Schema);
    function SpawnedItem() {
        _class_call_check(this, SpawnedItem);
        var _this;
        _this = _call_super(this, SpawnedItem, arguments), _define_property(_this, "x", void 0), _define_property(_this, "y", void 0), _define_property(_this, "z", void 0), _define_property(_this, "type", void 0), _define_property(_this, "rewardParam", void 0), _define_property(_this, "id", void 0);
        return _this;
    }
    return SpawnedItem;
}(_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.Schema);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("number")
], SpawnedItem.prototype, "x", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("number")
], SpawnedItem.prototype, "y", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("number")
], SpawnedItem.prototype, "z", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("string")
], SpawnedItem.prototype, "type", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("int8")
], SpawnedItem.prototype, "rewardParam", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("string")
], SpawnedItem.prototype, "id", void 0);
var Grenade = /*#__PURE__*/ function(Schema) {
    "use strict";
    _inherits(Grenade, Schema);
    function Grenade() {
        _class_call_check(this, Grenade);
        var _this;
        _this = _call_super(this, Grenade, arguments), _define_property(_this, "position", void 0), _define_property(_this, "rotation", void 0), _define_property(_this, "grenadeId", void 0), _define_property(_this, "weaponId", void 0), _define_property(_this, "ownerSessionId", void 0), _define_property(_this, "initialVelocity", void 0);
        return _this;
    }
    return Grenade;
}(_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.Schema);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)(ColyVector3)
], Grenade.prototype, "position", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)(ColyVector3)
], Grenade.prototype, "rotation", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("string")
], Grenade.prototype, "grenadeId", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("int16")
], Grenade.prototype, "weaponId", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("string")
], Grenade.prototype, "ownerSessionId", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)(ColyVector3)
], Grenade.prototype, "initialVelocity", void 0);
var CapturePoint = /*#__PURE__*/ function(Schema) {
    "use strict";
    _inherits(CapturePoint, Schema);
    function CapturePoint() {
        _class_call_check(this, CapturePoint);
        var _this;
        _this = _call_super(this, CapturePoint, arguments), _define_property(_this, "id", void 0), _define_property(_this, "position", void 0), _define_property(_this, "controllingTeam", void 0), _define_property(_this, "captureProgress", void 0), _define_property(_this, "progressPerSecond", void 0);
        return _this;
    }
    return CapturePoint;
}(_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.Schema);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("string")
], CapturePoint.prototype, "id", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)(ColyVector3)
], CapturePoint.prototype, "position", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("int8")
], CapturePoint.prototype, "controllingTeam", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("float32")
], CapturePoint.prototype, "captureProgress", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("float32")
], CapturePoint.prototype, "progressPerSecond", void 0);
var Flag = /*#__PURE__*/ function(Schema) {
    "use strict";
    _inherits(Flag, Schema);
    function Flag() {
        _class_call_check(this, Flag);
        var _this;
        _this = _call_super(this, Flag, arguments), _define_property(_this, "teamId", void 0), _define_property(_this, "isAtBase", void 0), _define_property(_this, "carriedBy", void 0), _define_property(_this, "position", void 0), _define_property(_this, "basePosition", void 0);
        return _this;
    }
    return Flag;
}(_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.Schema);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("int8")
], Flag.prototype, "teamId", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("boolean")
], Flag.prototype, "isAtBase", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("string")
], Flag.prototype, "carriedBy", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)(ColyVector3)
], Flag.prototype, "position", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)(ColyVector3)
], Flag.prototype, "basePosition", void 0);
var DroppedTag = /*#__PURE__*/ function(Schema) {
    "use strict";
    _inherits(DroppedTag, Schema);
    function DroppedTag() {
        _class_call_check(this, DroppedTag);
        var _this;
        _this = _call_super(this, DroppedTag, arguments), _define_property(_this, "id", void 0), _define_property(_this, "position", void 0), _define_property(_this, "teamId", void 0), _define_property(_this, "expireTime", void 0);
        return _this;
    }
    return DroppedTag;
}(_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.Schema);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("string")
], DroppedTag.prototype, "id", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)(ColyVector3)
], DroppedTag.prototype, "position", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("int8")
], DroppedTag.prototype, "teamId", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("number")
], DroppedTag.prototype, "expireTime", void 0);
var MyRoomState = /*#__PURE__*/ function(Schema) {
    "use strict";
    _inherits(MyRoomState, Schema);
    function MyRoomState() {
        _class_call_check(this, MyRoomState);
        var _this;
        _this = _call_super(this, MyRoomState, arguments), _define_property(_this, "avgElo", void 0), _define_property(_this, "players", void 0), _define_property(_this, "map", void 0), _define_property(_this, "light", void 0), _define_property(_this, "mode", void 0), _define_property(_this, "matchLength", void 0), _define_property(_this, "maxPlayers", void 0), _define_property(_this, "region", void 0), _define_property(_this, "startTime", void 0), _define_property(_this, "teamScores", void 0), _define_property(_this, "spawnedItems", void 0), _define_property(_this, "grenades", void 0), _define_property(_this, "capturePoints", void 0), _define_property(_this, "flags", void 0), _define_property(_this, "droppedTags", void 0), _define_property(_this, "aboutToShutdown", void 0);
        return _this;
    }
    return MyRoomState;
}(_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.Schema);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("float32")
], MyRoomState.prototype, "avgElo", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)({
        map: Player
    })
], MyRoomState.prototype, "players", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("int8")
], MyRoomState.prototype, "map", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("int8")
], MyRoomState.prototype, "light", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("int8")
], MyRoomState.prototype, "mode", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("int32")
], MyRoomState.prototype, "matchLength", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("int32")
], MyRoomState.prototype, "maxPlayers", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("int8")
], MyRoomState.prototype, "region", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("float64")
], MyRoomState.prototype, "startTime", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)({
        map: "int32"
    })
], MyRoomState.prototype, "teamScores", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)({
        map: SpawnedItem
    })
], MyRoomState.prototype, "spawnedItems", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)({
        map: Grenade
    })
], MyRoomState.prototype, "grenades", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)({
        map: CapturePoint
    })
], MyRoomState.prototype, "capturePoints", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)({
        map: Flag
    })
], MyRoomState.prototype, "flags", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)({
        map: DroppedTag
    })
], MyRoomState.prototype, "droppedTags", void 0);
_ts_decorate([
    (0,_colyseus_schema__WEBPACK_IMPORTED_MODULE_0__.type)("boolean")
], MyRoomState.prototype, "aboutToShutdown", void 0);


}),
"./node_modules/.pnpm/available-typed-arrays@1.0.7/node_modules/available-typed-arrays/index.js": 
/*!******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/available-typed-arrays@1.0.7/node_modules/available-typed-arrays/index.js ***!
  \******************************************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var possibleNames = __webpack_require__(/*! possible-typed-array-names */ "./node_modules/.pnpm/possible-typed-array-names@1.1.0/node_modules/possible-typed-array-names/index.js");

var g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;

/** @type {import('.')} */
module.exports = function availableTypedArrays() {
	var /** @type {ReturnType<typeof availableTypedArrays>} */ out = [];
	for (var i = 0; i < possibleNames.length; i++) {
		if (typeof g[possibleNames[i]] === 'function') {
			// @ts-expect-error
			out[out.length] = possibleNames[i];
		}
	}
	return out;
};


}),
"./node_modules/.pnpm/@colyseus+msgpackr@1.11.2/node_modules/@colyseus/msgpackr/index.js": 
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@colyseus+msgpackr@1.11.2/node_modules/@colyseus/msgpackr/index.js ***!
  \***********************************************************************************************/
(function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ALWAYS: () => (/* reexport safe */ _pack_js__WEBPACK_IMPORTED_MODULE_0__.ALWAYS),
  C1: () => (/* reexport safe */ _unpack_js__WEBPACK_IMPORTED_MODULE_1__.C1),
  DECIMAL_FIT: () => (/* reexport safe */ _pack_js__WEBPACK_IMPORTED_MODULE_0__.DECIMAL_FIT),
  DECIMAL_ROUND: () => (/* reexport safe */ _pack_js__WEBPACK_IMPORTED_MODULE_0__.DECIMAL_ROUND),
  Decoder: () => (/* reexport safe */ _unpack_js__WEBPACK_IMPORTED_MODULE_1__.Decoder),
  Encoder: () => (/* reexport safe */ _pack_js__WEBPACK_IMPORTED_MODULE_0__.Encoder),
  FLOAT32_OPTIONS: () => (/* reexport safe */ _unpack_js__WEBPACK_IMPORTED_MODULE_1__.FLOAT32_OPTIONS),
  NEVER: () => (/* reexport safe */ _pack_js__WEBPACK_IMPORTED_MODULE_0__.NEVER),
  Packr: () => (/* reexport safe */ _pack_js__WEBPACK_IMPORTED_MODULE_0__.Packr),
  RESERVE_START_SPACE: () => (/* reexport safe */ _pack_js__WEBPACK_IMPORTED_MODULE_0__.RESERVE_START_SPACE),
  RESET_BUFFER_MODE: () => (/* reexport safe */ _pack_js__WEBPACK_IMPORTED_MODULE_0__.RESET_BUFFER_MODE),
  REUSE_BUFFER_MODE: () => (/* reexport safe */ _pack_js__WEBPACK_IMPORTED_MODULE_0__.REUSE_BUFFER_MODE),
  Unpackr: () => (/* reexport safe */ _unpack_js__WEBPACK_IMPORTED_MODULE_1__.Unpackr),
  addExtension: () => (/* reexport safe */ _pack_js__WEBPACK_IMPORTED_MODULE_0__.addExtension),
  clearSource: () => (/* reexport safe */ _unpack_js__WEBPACK_IMPORTED_MODULE_1__.clearSource),
  decode: () => (/* reexport safe */ _unpack_js__WEBPACK_IMPORTED_MODULE_1__.decode),
  decodeIter: () => (/* reexport safe */ _iterators_js__WEBPACK_IMPORTED_MODULE_2__.decodeIter),
  encode: () => (/* reexport safe */ _pack_js__WEBPACK_IMPORTED_MODULE_0__.encode),
  encodeIter: () => (/* reexport safe */ _iterators_js__WEBPACK_IMPORTED_MODULE_2__.encodeIter),
  isNativeAccelerationEnabled: () => (/* reexport safe */ _unpack_js__WEBPACK_IMPORTED_MODULE_1__.isNativeAccelerationEnabled),
  mapsAsObjects: () => (mapsAsObjects),
  pack: () => (/* reexport safe */ _pack_js__WEBPACK_IMPORTED_MODULE_0__.pack),
  roundFloat32: () => (/* reexport safe */ _unpack_js__WEBPACK_IMPORTED_MODULE_1__.roundFloat32),
  unpack: () => (/* reexport safe */ _unpack_js__WEBPACK_IMPORTED_MODULE_1__.unpack),
  unpackMultiple: () => (/* reexport safe */ _unpack_js__WEBPACK_IMPORTED_MODULE_1__.unpackMultiple),
  useRecords: () => (useRecords)
});
/* ESM import */var _pack_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pack.js */ "./node_modules/.pnpm/@colyseus+msgpackr@1.11.2/node_modules/@colyseus/msgpackr/pack.js");
/* ESM import */var _unpack_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./unpack.js */ "./node_modules/.pnpm/@colyseus+msgpackr@1.11.2/node_modules/@colyseus/msgpackr/unpack.js");
/* ESM import */var _iterators_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./iterators.js */ "./node_modules/.pnpm/@colyseus+msgpackr@1.11.2/node_modules/@colyseus/msgpackr/iterators.js");



const useRecords = false
const mapsAsObjects = true


}),
"./node_modules/.pnpm/@colyseus+msgpackr@1.11.2/node_modules/@colyseus/msgpackr/iterators.js": 
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@colyseus+msgpackr@1.11.2/node_modules/@colyseus/msgpackr/iterators.js ***!
  \***************************************************************************************************/
(function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  decodeIter: () => (decodeIter),
  encodeIter: () => (encodeIter),
  packIter: () => (packIter),
  unpackIter: () => (unpackIter)
});
/* ESM import */var _pack_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pack.js */ "./node_modules/.pnpm/@colyseus+msgpackr@1.11.2/node_modules/@colyseus/msgpackr/pack.js");
/* ESM import */var _unpack_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./unpack.js */ "./node_modules/.pnpm/@colyseus+msgpackr@1.11.2/node_modules/@colyseus/msgpackr/unpack.js");
/* provided dependency */ var Buffer = __webpack_require__(/*! ./node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js */ "./node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js")["Buffer"];



/**
 * Given an Iterable first argument, returns an Iterable where each value is packed as a Buffer
 * If the argument is only Async Iterable, the return value will be an Async Iterable.
 * @param {Iterable|Iterator|AsyncIterable|AsyncIterator} objectIterator - iterable source, like a Readable object stream, an array, Set, or custom object
 * @param {options} [options] - msgpackr pack options
 * @returns {IterableIterator|Promise.<AsyncIterableIterator>}
 */
function packIter (objectIterator, options = {}) {
  if (!objectIterator || typeof objectIterator !== 'object') {
    throw new Error('first argument must be an Iterable, Async Iterable, or a Promise for an Async Iterable')
  } else if (typeof objectIterator[Symbol.iterator] === 'function') {
    return packIterSync(objectIterator, options)
  } else if (typeof objectIterator.then === 'function' || typeof objectIterator[Symbol.asyncIterator] === 'function') {
    return packIterAsync(objectIterator, options)
  } else {
    throw new Error('first argument must be an Iterable, Async Iterable, Iterator, Async Iterator, or a Promise')
  }
}

function * packIterSync (objectIterator, options) {
  const packr = new _pack_js__WEBPACK_IMPORTED_MODULE_0__.Packr(options)
  for (const value of objectIterator) {
    yield packr.pack(value)
  }
}

async function * packIterAsync (objectIterator, options) {
  const packr = new _pack_js__WEBPACK_IMPORTED_MODULE_0__.Packr(options)
  for await (const value of objectIterator) {
    yield packr.pack(value)
  }
}

/**
 * Given an Iterable/Iterator input which yields buffers, returns an IterableIterator which yields sync decoded objects
 * Or, given an Async Iterable/Iterator which yields promises resolving in buffers, returns an AsyncIterableIterator.
 * @param {Iterable|Iterator|AsyncIterable|AsyncIterableIterator} bufferIterator
 * @param {object} [options] - unpackr options
 * @returns {IterableIterator|Promise.<AsyncIterableIterator}
 */
function unpackIter (bufferIterator, options = {}) {
  if (!bufferIterator || typeof bufferIterator !== 'object') {
    throw new Error('first argument must be an Iterable, Async Iterable, Iterator, Async Iterator, or a promise')
  }

  const unpackr = new _unpack_js__WEBPACK_IMPORTED_MODULE_1__.Unpackr(options)
  let incomplete
  const parser = (chunk) => {
    let yields
    // if there's incomplete data from previous chunk, concatinate and try again
    if (incomplete) {
      chunk = Buffer.concat([incomplete, chunk])
      incomplete = undefined
    }

    try {
      yields = unpackr.unpackMultiple(chunk)
    } catch (err) {
      if (err.incomplete) {
        incomplete = chunk.slice(err.lastPosition)
        yields = err.values
      } else {
        throw err
      }
    }
    return yields
  }

  if (typeof bufferIterator[Symbol.iterator] === 'function') {
    return (function * iter () {
      for (const value of bufferIterator) {
        yield * parser(value)
      }
    })()
  } else if (typeof bufferIterator[Symbol.asyncIterator] === 'function') {
    return (async function * iter () {
      for await (const value of bufferIterator) {
        yield * parser(value)
      }
    })()
  }
}
const decodeIter = unpackIter
const encodeIter = packIter

}),
"./node_modules/.pnpm/@colyseus+msgpackr@1.11.2/node_modules/@colyseus/msgpackr/pack.js": 
/*!**********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@colyseus+msgpackr@1.11.2/node_modules/@colyseus/msgpackr/pack.js ***!
  \**********************************************************************************************/
(function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ALWAYS: () => (ALWAYS),
  DECIMAL_FIT: () => (DECIMAL_FIT),
  DECIMAL_ROUND: () => (DECIMAL_ROUND),
  Encoder: () => (Encoder),
  FLOAT32_OPTIONS: () => (/* reexport safe */ _unpack_js__WEBPACK_IMPORTED_MODULE_0__.FLOAT32_OPTIONS),
  NEVER: () => (NEVER),
  Packr: () => (Packr),
  RECORD_SYMBOL: () => (RECORD_SYMBOL),
  RESERVE_START_SPACE: () => (RESERVE_START_SPACE),
  RESET_BUFFER_MODE: () => (RESET_BUFFER_MODE),
  REUSE_BUFFER_MODE: () => (REUSE_BUFFER_MODE),
  addExtension: () => (addExtension),
  encode: () => (encode),
  pack: () => (pack),
  setWriteStructSlots: () => (setWriteStructSlots)
});
/* ESM import */var _unpack_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./unpack.js */ "./node_modules/.pnpm/@colyseus+msgpackr@1.11.2/node_modules/@colyseus/msgpackr/unpack.js");
/* provided dependency */ var Buffer = __webpack_require__(/*! ./node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js */ "./node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js")["Buffer"];

let textEncoder
try {
	textEncoder = new TextEncoder()
} catch (error) {}
let extensions, extensionClasses
const hasNodeBuffer = typeof Buffer !== 'undefined'
const ByteArrayAllocate = hasNodeBuffer ?
	function(length) { return Buffer.allocUnsafeSlow(length) } : Uint8Array
const ByteArray = hasNodeBuffer ? Buffer : Uint8Array
const MAX_BUFFER_SIZE = hasNodeBuffer ? 0x100000000 : 0x7fd00000
let target, keysTarget
let targetView
let position = 0
let safeEnd
let bundledStrings = null
let writeStructSlots
const MAX_BUNDLE_SIZE = 0x5500 // maximum characters such that the encoded bytes fits in 16 bits.
const hasNonLatin = /[\u0080-\uFFFF]/
const RECORD_SYMBOL = Symbol('record-id')
class Packr extends _unpack_js__WEBPACK_IMPORTED_MODULE_0__.Unpackr {
	constructor(options) {
		super(options)
		this.offset = 0
		let typeBuffer
		let start
		let hasSharedUpdate
		let structures
		let referenceMap
		let encodeUtf8 = ByteArray.prototype.utf8Write ? function(string, position) {
			return target.utf8Write(string, position, target.byteLength - position)
		} : (textEncoder && textEncoder.encodeInto) ?
			function(string, position) {
				return textEncoder.encodeInto(string, target.subarray(position)).written
			} : false

		let packr = this
		if (!options)
			options = {}
		let isSequential = options && options.sequential
		let hasSharedStructures = options.structures || options.saveStructures
		let maxSharedStructures = options.maxSharedStructures
		if (maxSharedStructures == null)
			maxSharedStructures = hasSharedStructures ? 32 : 0
		if (maxSharedStructures > 8160)
			throw new Error('Maximum maxSharedStructure is 8160')
		if (options.structuredClone && options.moreTypes == undefined) {
			this.moreTypes = true
		}
		let maxOwnStructures = options.maxOwnStructures
		if (maxOwnStructures == null)
			maxOwnStructures = hasSharedStructures ? 32 : 64
		if (!this.structures && options.useRecords != false)
			this.structures = []
		// two byte record ids for shared structures
		let useTwoByteRecords = maxSharedStructures > 32 || (maxOwnStructures + maxSharedStructures > 64)
		let sharedLimitId = maxSharedStructures + 0x40
		let maxStructureId = maxSharedStructures + maxOwnStructures + 0x40
		if (maxStructureId > 8256) {
			throw new Error('Maximum maxSharedStructure + maxOwnStructure is 8192')
		}
		let recordIdsToRemove = []
		let transitionsCount = 0
		let serializationsSinceTransitionRebuild = 0

		this.pack = this.encode = function(value, encodeOptions) {
			if (!target) {
				target = new ByteArrayAllocate(8192)
				targetView = target.dataView || (target.dataView = new DataView(target.buffer, 0, 8192))
				position = 0
			}
			safeEnd = target.length - 10
			if (safeEnd - position < 0x800) {
				// don't start too close to the end,
				target = new ByteArrayAllocate(target.length)
				targetView = target.dataView || (target.dataView = new DataView(target.buffer, 0, target.length))
				safeEnd = target.length - 10
				position = 0
			} else
				position = (position + 7) & 0x7ffffff8 // Word align to make any future copying of this buffer faster
			start = position
			if (encodeOptions & RESERVE_START_SPACE) position += (encodeOptions & 0xff)
			referenceMap = packr.structuredClone ? new Map() : null
			if (packr.bundleStrings && typeof value !== 'string') {
				bundledStrings = []
				bundledStrings.size = Infinity // force a new bundle start on first string
			} else
				bundledStrings = null
			structures = packr.structures
			if (structures) {
				if (structures.uninitialized)
					structures = packr._mergeStructures(packr.getStructures())
				let sharedLength = structures.sharedLength || 0
				if (sharedLength > maxSharedStructures) {
					//if (maxSharedStructures <= 32 && structures.sharedLength > 32) // TODO: could support this, but would need to update the limit ids
					throw new Error('Shared structures is larger than maximum shared structures, try increasing maxSharedStructures to ' + structures.sharedLength)
				}
				if (!structures.transitions) {
					// rebuild our structure transitions
					structures.transitions = Object.create(null)
					for (let i = 0; i < sharedLength; i++) {
						let keys = structures[i]
						if (!keys)
							continue
						let nextTransition, transition = structures.transitions
						for (let j = 0, l = keys.length; j < l; j++) {
							let key = keys[j]
							nextTransition = transition[key]
							if (!nextTransition) {
								nextTransition = transition[key] = Object.create(null)
							}
							transition = nextTransition
						}
						transition[RECORD_SYMBOL] = i + 0x40
					}
					this.lastNamedStructuresLength = sharedLength
				}
				if (!isSequential) {
					structures.nextId = sharedLength + 0x40
				}
			}
			if (hasSharedUpdate)
				hasSharedUpdate = false
			let encodingError;
			try {
				if (packr.randomAccessStructure && value && value.constructor && value.constructor === Object)
					writeStruct(value);
				else
					pack(value)
				let lastBundle = bundledStrings;
				if (bundledStrings)
					writeBundles(start, pack, 0)
				if (referenceMap && referenceMap.idsToInsert) {
					let idsToInsert = referenceMap.idsToInsert.sort((a, b) => a.offset > b.offset ? 1 : -1);
					let i = idsToInsert.length;
					let incrementPosition = -1;
					while (lastBundle && i > 0) {
						let insertionPoint = idsToInsert[--i].offset + start;
						if (insertionPoint < (lastBundle.stringsPosition + start) && incrementPosition === -1)
							incrementPosition = 0;
						if (insertionPoint > (lastBundle.position + start)) {
							if (incrementPosition >= 0)
								incrementPosition += 6;
						} else {
							if (incrementPosition >= 0) {
								// update the bundle reference now
								targetView.setUint32(lastBundle.position + start,
									targetView.getUint32(lastBundle.position + start) + incrementPosition)
								incrementPosition = -1; // reset
							}
							lastBundle = lastBundle.previous;
							i++;
						}
					}
					if (incrementPosition >= 0 && lastBundle) {
						// update the bundle reference now
						targetView.setUint32(lastBundle.position + start,
							targetView.getUint32(lastBundle.position + start) + incrementPosition)
					}
					position += idsToInsert.length * 6;
					if (position > safeEnd)
						makeRoom(position)
					packr.offset = position
					let serialized = insertIds(target.subarray(start, position), idsToInsert)
					referenceMap = null
					return serialized
				}
				packr.offset = position // update the offset so next serialization doesn't write over our buffer, but can continue writing to same buffer sequentially
				if (encodeOptions & REUSE_BUFFER_MODE) {
					target.start = start
					target.end = position
					return target
				}
				return target.subarray(start, position) // position can change if we call pack again in saveStructures, so we get the buffer now
			} catch(error) {
				encodingError = error;
				throw error;
			} finally {
				if (structures) {
					resetStructures();
					if (hasSharedUpdate && packr.saveStructures) {
						let sharedLength = structures.sharedLength || 0
						// we can't rely on start/end with REUSE_BUFFER_MODE since they will (probably) change when we save
						let returnBuffer = target.subarray(start, position)
						let newSharedData = prepareStructures(structures, packr);
						if (!encodingError) { // TODO: If there is an encoding error, should make the structures as uninitialized so they get rebuilt next time
							if (packr.saveStructures(newSharedData, newSharedData.isCompatible) === false) {
								// get updated structures and try again if the update failed
								return packr.pack(value, encodeOptions)
							}
							packr.lastNamedStructuresLength = sharedLength
							// don't keep large buffers around
							if (target.length > 0x40000000) target = null
							return returnBuffer
						}
					}
				}
				// don't keep large buffers around, they take too much memory and cause problems (limit at 1GB)
				if (target.length > 0x40000000) target = null
				if (encodeOptions & RESET_BUFFER_MODE)
					position = start
			}
		}
		const resetStructures = () => {
			if (serializationsSinceTransitionRebuild < 10)
				serializationsSinceTransitionRebuild++
			let sharedLength = structures.sharedLength || 0
			if (structures.length > sharedLength && !isSequential)
				structures.length = sharedLength
			if (transitionsCount > 10000) {
				// force a rebuild occasionally after a lot of transitions so it can get cleaned up
				structures.transitions = null
				serializationsSinceTransitionRebuild = 0
				transitionsCount = 0
				if (recordIdsToRemove.length > 0)
					recordIdsToRemove = []
			} else if (recordIdsToRemove.length > 0 && !isSequential) {
				for (let i = 0, l = recordIdsToRemove.length; i < l; i++) {
					recordIdsToRemove[i][RECORD_SYMBOL] = 0
				}
				recordIdsToRemove = []
			}
		}
		const packArray = (value) => {
			var length = value.length
			if (length < 0x10) {
				target[position++] = 0x90 | length
			} else if (length < 0x10000) {
				target[position++] = 0xdc
				target[position++] = length >> 8
				target[position++] = length & 0xff
			} else {
				target[position++] = 0xdd
				targetView.setUint32(position, length)
				position += 4
			}
			for (let i = 0; i < length; i++) {
				pack(value[i])
			}
		}
		const pack = (value) => {
			if (position > safeEnd)
				target = makeRoom(position)

			var type = typeof value
			var length
			if (type === 'string') {
				let strLength = value.length
				if (bundledStrings && strLength >= 4 && strLength < 0x1000) {
					if ((bundledStrings.size += strLength) > MAX_BUNDLE_SIZE) {
						let extStart
						let maxBytes = (bundledStrings[0] ? bundledStrings[0].length * 3 + bundledStrings[1].length : 0) + 10
						if (position + maxBytes > safeEnd)
							target = makeRoom(position + maxBytes)
						let lastBundle
						if (bundledStrings.position) { // here we use the 0x62 extension to write the last bundle and reserve space for the reference pointer to the next/current bundle
							lastBundle = bundledStrings
							target[position] = 0xc8 // ext 16
							position += 3 // reserve for the writing bundle size
							target[position++] = 0x62 // 'b'
							extStart = position - start
							position += 4 // reserve for writing bundle reference
							writeBundles(start, pack, 0) // write the last bundles
							targetView.setUint16(extStart + start - 3, position - start - extStart)
						} else { // here we use the 0x62 extension just to reserve the space for the reference pointer to the bundle (will be updated once the bundle is written)
							target[position++] = 0xd6 // fixext 4
							target[position++] = 0x62 // 'b'
							extStart = position - start
							position += 4 // reserve for writing bundle reference
						}
						bundledStrings = ['', ''] // create new ones
						bundledStrings.previous = lastBundle;
						bundledStrings.size = 0
						bundledStrings.position = extStart
					}
					let twoByte = hasNonLatin.test(value)
					bundledStrings[twoByte ? 0 : 1] += value
					target[position++] = 0xc1
					pack(twoByte ? -strLength : strLength);
					return
				}
				let headerSize
				// first we estimate the header size, so we can write to the correct location
				if (strLength < 0x20) {
					headerSize = 1
				} else if (strLength < 0x100) {
					headerSize = 2
				} else if (strLength < 0x10000) {
					headerSize = 3
				} else {
					headerSize = 5
				}
				let maxBytes = strLength * 3
				if (position + maxBytes > safeEnd)
					target = makeRoom(position + maxBytes)

				if (strLength < 0x40 || !encodeUtf8) {
					let i, c1, c2, strPosition = position + headerSize
					for (i = 0; i < strLength; i++) {
						c1 = value.charCodeAt(i)
						if (c1 < 0x80) {
							target[strPosition++] = c1
						} else if (c1 < 0x800) {
							target[strPosition++] = c1 >> 6 | 0xc0
							target[strPosition++] = c1 & 0x3f | 0x80
						} else if (
							(c1 & 0xfc00) === 0xd800 &&
							((c2 = value.charCodeAt(i + 1)) & 0xfc00) === 0xdc00
						) {
							c1 = 0x10000 + ((c1 & 0x03ff) << 10) + (c2 & 0x03ff)
							i++
							target[strPosition++] = c1 >> 18 | 0xf0
							target[strPosition++] = c1 >> 12 & 0x3f | 0x80
							target[strPosition++] = c1 >> 6 & 0x3f | 0x80
							target[strPosition++] = c1 & 0x3f | 0x80
						} else {
							target[strPosition++] = c1 >> 12 | 0xe0
							target[strPosition++] = c1 >> 6 & 0x3f | 0x80
							target[strPosition++] = c1 & 0x3f | 0x80
						}
					}
					length = strPosition - position - headerSize
				} else {
					length = encodeUtf8(value, position + headerSize)
				}

				if (length < 0x20) {
					target[position++] = 0xa0 | length
				} else if (length < 0x100) {
					if (headerSize < 2) {
						target.copyWithin(position + 2, position + 1, position + 1 + length)
					}
					target[position++] = 0xd9
					target[position++] = length
				} else if (length < 0x10000) {
					if (headerSize < 3) {
						target.copyWithin(position + 3, position + 2, position + 2 + length)
					}
					target[position++] = 0xda
					target[position++] = length >> 8
					target[position++] = length & 0xff
				} else {
					if (headerSize < 5) {
						target.copyWithin(position + 5, position + 3, position + 3 + length)
					}
					target[position++] = 0xdb
					targetView.setUint32(position, length)
					position += 4
				}
				position += length
			} else if (type === 'number') {
				if (value >>> 0 === value) {// positive integer, 32-bit or less
					// positive uint
					if (value < 0x20 || (value < 0x80 && this.useRecords === false) || (value < 0x40 && !this.randomAccessStructure)) {
						target[position++] = value
					} else if (value < 0x100) {
						target[position++] = 0xcc
						target[position++] = value
					} else if (value < 0x10000) {
						target[position++] = 0xcd
						target[position++] = value >> 8
						target[position++] = value & 0xff
					} else {
						target[position++] = 0xce
						targetView.setUint32(position, value)
						position += 4
					}
				} else if (value >> 0 === value) { // negative integer
					if (value >= -0x20) {
						target[position++] = 0x100 + value
					} else if (value >= -0x80) {
						target[position++] = 0xd0
						target[position++] = value + 0x100
					} else if (value >= -0x8000) {
						target[position++] = 0xd1
						targetView.setInt16(position, value)
						position += 2
					} else {
						target[position++] = 0xd2
						targetView.setInt32(position, value)
						position += 4
					}
				} else {
					let useFloat32
					if ((useFloat32 = this.useFloat32) > 0 && value < 0x100000000 && value >= -0x80000000) {
						target[position++] = 0xca
						targetView.setFloat32(position, value)
						let xShifted
						if (useFloat32 < 4 ||
								// this checks for rounding of numbers that were encoded in 32-bit float to nearest significant decimal digit that could be preserved
								((xShifted = value * _unpack_js__WEBPACK_IMPORTED_MODULE_0__.mult10[((target[position] & 0x7f) << 1) | (target[position + 1] >> 7)]) >> 0) === xShifted) {
							position += 4
							return
						} else
							position-- // move back into position for writing a double
					}
					target[position++] = 0xcb
					targetView.setFloat64(position, value)
					position += 8
				}
			} else if (type === 'object' || type === 'function') {
				if (!value)
					target[position++] = 0xc0
				else {
					if (referenceMap) {
						let referee = referenceMap.get(value)
						if (referee) {
							if (!referee.id) {
								let idsToInsert = referenceMap.idsToInsert || (referenceMap.idsToInsert = [])
								referee.id = idsToInsert.push(referee)
							}
							target[position++] = 0xd6 // fixext 4
							target[position++] = 0x70 // "p" for pointer
							targetView.setUint32(position, referee.id)
							position += 4
							return
						} else
							referenceMap.set(value, { offset: position - start })
					}
					let constructor = value.constructor
					if (constructor === Object) {
						writeObject(value)
					} else if (constructor === Array) {
						packArray(value)
					} else if (constructor === Map) {
						if (this.mapAsEmptyObject) target[position++] = 0x80
						else {
							length = value.size
							if (length < 0x10) {
								target[position++] = 0x80 | length
							} else if (length < 0x10000) {
								target[position++] = 0xde
								target[position++] = length >> 8
								target[position++] = length & 0xff
							} else {
								target[position++] = 0xdf
								targetView.setUint32(position, length)
								position += 4
							}
							for (let [key, entryValue] of value) {
								pack(key)
								pack(entryValue)
							}
						}
					} else {
						for (let i = 0, l = extensions.length; i < l; i++) {
							let extensionClass = extensionClasses[i]
							if (value instanceof extensionClass) {
								let extension = extensions[i]
								if (extension.write) {
									if (extension.type) {
										target[position++] = 0xd4 // one byte "tag" extension
										target[position++] = extension.type
										target[position++] = 0
									}
									let writeResult = extension.write.call(this, value)
									if (writeResult === value) { // avoid infinite recursion
										if (Array.isArray(value)) {
											packArray(value)
										} else {
											writeObject(value)
										}
									} else {
										pack(writeResult)
									}
									return
								}
								let currentTarget = target
								let currentTargetView = targetView
								let currentPosition = position
								target = null
								let result
								try {
									result = extension.pack.call(this, value, (size) => {
										// restore target and use it
										target = currentTarget
										currentTarget = null
										position += size
										if (position > safeEnd)
											makeRoom(position)
										return {
											target, targetView, position: position - size
										}
									}, pack)
								} finally {
									// restore current target information (unless already restored)
									if (currentTarget) {
										target = currentTarget
										targetView = currentTargetView
										position = currentPosition
										safeEnd = target.length - 10
									}
								}
								if (result) {
									if (result.length + position > safeEnd)
										makeRoom(result.length + position)
									position = writeExtensionData(result, target, position, extension.type)
								}
								return
							}
						}
						// check isArray after extensions, because extensions can extend Array
						if (Array.isArray(value)) {
							packArray(value)
						} else {
							// use this as an alternate mechanism for expressing how to serialize
							if (value.toJSON) {
								const json = value.toJSON()
								// if for some reason value.toJSON returns itself it'll loop forever
								if (json !== value)
									return pack(json)
							}

							// if there is a writeFunction, use it, otherwise just encode as undefined
							if (type === 'function')
								return pack(this.writeFunction && this.writeFunction(value));

							// no extension found, write as plain object
							writeObject(value)
						}
					}
				}
			} else if (type === 'boolean') {
				target[position++] = value ? 0xc3 : 0xc2
			} else if (type === 'bigint') {
				if (value < (BigInt(1)<<BigInt(63)) && value >= -(BigInt(1)<<BigInt(63))) {
					// use a signed int as long as it fits
					target[position++] = 0xd3
					targetView.setBigInt64(position, value)
				} else if (value < (BigInt(1)<<BigInt(64)) && value > 0) {
					// if we can fit an unsigned int, use that
					target[position++] = 0xcf
					targetView.setBigUint64(position, value)
				} else {
					// overflow
					if (this.largeBigIntToFloat) {
						target[position++] = 0xcb
						targetView.setFloat64(position, Number(value))
					} else if (this.largeBigIntToString) {
						return pack(value.toString());
					} else if (this.useBigIntExtension && value < BigInt(2)**BigInt(1023) && value > -(BigInt(2)**BigInt(1023))) {
						target[position++] = 0xc7
						position++;
						target[position++] = 0x42 // "B" for BigInt
						let bytes = [];
						let alignedSign;
						do {
							let byte = value & BigInt(0xff);
							alignedSign = (byte & BigInt(0x80)) === (value < BigInt(0) ? BigInt(0x80) : BigInt(0));
							bytes.push(byte);
							value >>= BigInt(8);
						} while (!((value === BigInt(0) || value === BigInt(-1)) && alignedSign));
						target[position-2] = bytes.length;
						for (let i = bytes.length; i > 0;) {
							target[position++] = Number(bytes[--i]);
						}
						return
					} else {
						throw new RangeError(value + ' was too large to fit in MessagePack 64-bit integer format, use' +
							' useBigIntExtension, or set largeBigIntToFloat to convert to float-64, or set' +
							' largeBigIntToString to convert to string')
					}
				}
				position += 8
			} else if (type === 'undefined') {
				if (this.encodeUndefinedAsNil)
					target[position++] = 0xc0
				else {
					target[position++] = 0xd4 // a number of implementations use fixext1 with type 0, data 0 to denote undefined, so we follow suite
					target[position++] = 0
					target[position++] = 0
				}
			} else {
				throw new Error('Unknown type: ' + type)
			}
		}

		const writePlainObject = (this.variableMapSize || this.coercibleKeyAsNumber || this.skipValues) ? (object) => {
			// this method is slightly slower, but generates "preferred serialization" (optimally small for smaller objects)
			let keys;
			if (this.skipValues) {
				keys = [];
				for (let key in object) {
					if ((typeof object.hasOwnProperty !== 'function' || object.hasOwnProperty(key)) &&
						!this.skipValues.includes(object[key]))
						keys.push(key);
				}
			} else {
				keys = Object.keys(object)
			}
			let length = keys.length
			if (length < 0x10) {
				target[position++] = 0x80 | length
			} else if (length < 0x10000) {
				target[position++] = 0xde
				target[position++] = length >> 8
				target[position++] = length & 0xff
			} else {
				target[position++] = 0xdf
				targetView.setUint32(position, length)
				position += 4
			}
			let key
			if (this.coercibleKeyAsNumber) {
				for (let i = 0; i < length; i++) {
					key = keys[i]
					let num = Number(key)
					pack(isNaN(num) ? key : num)
					pack(object[key])
				}

			} else {
				for (let i = 0; i < length; i++) {
					pack(key = keys[i])
					pack(object[key])
				}
			}
		} :
		(object) => {
			target[position++] = 0xde // always using map 16, so we can preallocate and set the length afterwards
			let objectOffset = position - start
			position += 2
			let size = 0
			for (let key in object) {
				if (typeof object.hasOwnProperty !== 'function' || object.hasOwnProperty(key)) {
					pack(key)
					pack(object[key])
					size++
				}
			}
			if (size > 0xffff) {
				throw new Error('Object is too large to serialize with fast 16-bit map size,' +
				' use the "variableMapSize" option to serialize this object');
			}
			target[objectOffset++ + start] = size >> 8
			target[objectOffset + start] = size & 0xff
		}

		const writeRecord = this.useRecords === false ? writePlainObject :
		(options.progressiveRecords && !useTwoByteRecords) ?  // this is about 2% faster for highly stable structures, since it only requires one for-in loop (but much more expensive when new structure needs to be written)
		(object) => {
			let nextTransition, transition = structures.transitions || (structures.transitions = Object.create(null))
			let objectOffset = position++ - start
			let wroteKeys
			for (let key in object) {
				if (typeof object.hasOwnProperty !== 'function' || object.hasOwnProperty(key)) {
					nextTransition = transition[key]
					if (nextTransition)
						transition = nextTransition
					else {
						// record doesn't exist, create full new record and insert it
						let keys = Object.keys(object)
						let lastTransition = transition
						transition = structures.transitions
						let newTransitions = 0
						for (let i = 0, l = keys.length; i < l; i++) {
							let key = keys[i]
							nextTransition = transition[key]
							if (!nextTransition) {
								nextTransition = transition[key] = Object.create(null)
								newTransitions++
							}
							transition = nextTransition
						}
						if (objectOffset + start + 1 == position) {
							// first key, so we don't need to insert, we can just write record directly
							position--
							newRecord(transition, keys, newTransitions)
						} else // otherwise we need to insert the record, moving existing data after the record
							insertNewRecord(transition, keys, objectOffset, newTransitions)
						wroteKeys = true
						transition = lastTransition[key]
					}
					pack(object[key])
				}
			}
			if (!wroteKeys) {
				let recordId = transition[RECORD_SYMBOL]
				if (recordId)
					target[objectOffset + start] = recordId
				else
					insertNewRecord(transition, Object.keys(object), objectOffset, 0)
			}
		} :
		(object) => {
			let nextTransition, transition = structures.transitions || (structures.transitions = Object.create(null))
			let newTransitions = 0
			for (let key in object) if (typeof object.hasOwnProperty !== 'function' || object.hasOwnProperty(key)) {
				nextTransition = transition[key]
				if (!nextTransition) {
					nextTransition = transition[key] = Object.create(null)
					newTransitions++
				}
				transition = nextTransition
			}
			let recordId = transition[RECORD_SYMBOL]
			if (recordId) {
				if (recordId >= 0x60 && useTwoByteRecords) {
					target[position++] = ((recordId -= 0x60) & 0x1f) + 0x60
					target[position++] = recordId >> 5
				} else
					target[position++] = recordId
			} else {
				newRecord(transition, transition.__keys__ || Object.keys(object), newTransitions)
			}
			// now write the values
			for (let key in object)
				if (typeof object.hasOwnProperty !== 'function' || object.hasOwnProperty(key)) {
					pack(object[key])
				}
		}

		// create reference to useRecords if useRecords is a function
		const checkUseRecords = typeof this.useRecords == 'function' && this.useRecords;

		const writeObject = checkUseRecords ? (object) => {
			checkUseRecords(object) ? writeRecord(object) : writePlainObject(object)
		} : writeRecord

		const makeRoom = (end) => {
			let newSize
			if (end > 0x1000000) {
				// special handling for really large buffers
				if ((end - start) > MAX_BUFFER_SIZE)
					throw new Error('Packed buffer would be larger than maximum buffer size')
				newSize = Math.min(MAX_BUFFER_SIZE,
					Math.round(Math.max((end - start) * (end > 0x4000000 ? 1.25 : 2), 0x400000) / 0x1000) * 0x1000)
			} else // faster handling for smaller buffers
				newSize = ((Math.max((end - start) << 2, target.length - 1) >> 12) + 1) << 12
			let newBuffer = new ByteArrayAllocate(newSize)
			targetView = newBuffer.dataView || (newBuffer.dataView = new DataView(newBuffer.buffer, 0, newSize))
			end = Math.min(end, target.length)
			if (target.copy)
				target.copy(newBuffer, 0, start, end)
			else
				newBuffer.set(target.slice(start, end))
			position -= start
			start = 0
			safeEnd = newBuffer.length - 10
			return target = newBuffer
		}
		const newRecord = (transition, keys, newTransitions) => {
			let recordId = structures.nextId
			if (!recordId)
				recordId = 0x40
			if (recordId < sharedLimitId && this.shouldShareStructure && !this.shouldShareStructure(keys)) {
				recordId = structures.nextOwnId
				if (!(recordId < maxStructureId))
					recordId = sharedLimitId
				structures.nextOwnId = recordId + 1
			} else {
				if (recordId >= maxStructureId)// cycle back around
					recordId = sharedLimitId
				structures.nextId = recordId + 1
			}
			let highByte = keys.highByte = recordId >= 0x60 && useTwoByteRecords ? (recordId - 0x60) >> 5 : -1
			transition[RECORD_SYMBOL] = recordId
			transition.__keys__ = keys
			structures[recordId - 0x40] = keys

			if (recordId < sharedLimitId) {
				keys.isShared = true
				structures.sharedLength = recordId - 0x3f
				hasSharedUpdate = true
				if (highByte >= 0) {
					target[position++] = (recordId & 0x1f) + 0x60
					target[position++] = highByte
				} else {
					target[position++] = recordId
				}
			} else {
				if (highByte >= 0) {
					target[position++] = 0xd5 // fixext 2
					target[position++] = 0x72 // "r" record defintion extension type
					target[position++] = (recordId & 0x1f) + 0x60
					target[position++] = highByte
				} else {
					target[position++] = 0xd4 // fixext 1
					target[position++] = 0x72 // "r" record defintion extension type
					target[position++] = recordId
				}

				if (newTransitions)
					transitionsCount += serializationsSinceTransitionRebuild * newTransitions
				// record the removal of the id, we can maintain our shared structure
				if (recordIdsToRemove.length >= maxOwnStructures)
					recordIdsToRemove.shift()[RECORD_SYMBOL] = 0 // we are cycling back through, and have to remove old ones
				recordIdsToRemove.push(transition)
				pack(keys)
			}
		}
		const insertNewRecord = (transition, keys, insertionOffset, newTransitions) => {
			let mainTarget = target
			let mainPosition = position
			let mainSafeEnd = safeEnd
			let mainStart = start
			target = keysTarget
			position = 0
			start = 0
			if (!target)
				keysTarget = target = new ByteArrayAllocate(8192)
			safeEnd = target.length - 10
			newRecord(transition, keys, newTransitions)
			keysTarget = target
			let keysPosition = position
			target = mainTarget
			position = mainPosition
			safeEnd = mainSafeEnd
			start = mainStart
			if (keysPosition > 1) {
				let newEnd = position + keysPosition - 1
				if (newEnd > safeEnd)
					makeRoom(newEnd)
				let insertionPosition = insertionOffset + start
				target.copyWithin(insertionPosition + keysPosition, insertionPosition + 1, position)
				target.set(keysTarget.slice(0, keysPosition), insertionPosition)
				position = newEnd
			} else {
				target[insertionOffset + start] = keysTarget[0]
			}
		}
		const writeStruct = (object) => {
			let newPosition = writeStructSlots(object, target, start, position, structures, makeRoom, (value, newPosition, notifySharedUpdate) => {
				if (notifySharedUpdate)
					return hasSharedUpdate = true;
				position = newPosition;
				let startTarget = target;
				pack(value);
				resetStructures();
				if (startTarget !== target) {
					return { position, targetView, target }; // indicate the buffer was re-allocated
				}
				return position;
			}, this);
			if (newPosition === 0) // bail and go to a msgpack object
				return writeObject(object);
			position = newPosition;
		}
	}
	useBuffer(buffer) {
		// this means we are finished using our own buffer and we can write over it safely
		target = buffer
		target.dataView || (target.dataView = new DataView(target.buffer, target.byteOffset, target.byteLength))
		position = 0
	}
	set position (value) {
		position = value;
	}
	get position() {
		return position;
	}
	set buffer (buffer) {
		target = buffer;
	}
	get buffer () {
		return target;
	}
	clearSharedData() {
		if (this.structures)
			this.structures = []
		if (this.typedStructs)
			this.typedStructs = []
	}
}

extensionClasses = [ Date, Set, Error, RegExp, ArrayBuffer, Object.getPrototypeOf(Uint8Array.prototype).constructor /*TypedArray*/, _unpack_js__WEBPACK_IMPORTED_MODULE_0__.C1Type ]
extensions = [{
	pack(date, allocateForWrite, pack) {
		let seconds = date.getTime() / 1000
		if ((this.useTimestamp32 || date.getMilliseconds() === 0) && seconds >= 0 && seconds < 0x100000000) {
			// Timestamp 32
			let { target, targetView, position} = allocateForWrite(6)
			target[position++] = 0xd6
			target[position++] = 0xff
			targetView.setUint32(position, seconds)
		} else if (seconds > 0 && seconds < 0x100000000) {
			// Timestamp 64
			let { target, targetView, position} = allocateForWrite(10)
			target[position++] = 0xd7
			target[position++] = 0xff
			targetView.setUint32(position, date.getMilliseconds() * 4000000 + ((seconds / 1000 / 0x100000000) >> 0))
			targetView.setUint32(position + 4, seconds)
		} else if (isNaN(seconds)) {
			if (this.onInvalidDate) {
				allocateForWrite(0)
				return pack(this.onInvalidDate())
			}
			// Intentionally invalid timestamp
			let { target, targetView, position} = allocateForWrite(3)
			target[position++] = 0xd4
			target[position++] = 0xff
			target[position++] = 0xff
		} else {
			// Timestamp 96
			let { target, targetView, position} = allocateForWrite(15)
			target[position++] = 0xc7
			target[position++] = 12
			target[position++] = 0xff
			targetView.setUint32(position, date.getMilliseconds() * 1000000)
			targetView.setBigInt64(position + 4, BigInt(Math.floor(seconds)))
		}
	}
}, {
	pack(set, allocateForWrite, pack) {
		if (this.setAsEmptyObject) {
			allocateForWrite(0);
			return pack({})
		}
		let array = Array.from(set)
		let { target, position} = allocateForWrite(this.moreTypes ? 3 : 0)
		if (this.moreTypes) {
			target[position++] = 0xd4
			target[position++] = 0x73 // 's' for Set
			target[position++] = 0
		}
		pack(array)
	}
}, {
	pack(error, allocateForWrite, pack) {
		let { target, position} = allocateForWrite(this.moreTypes ? 3 : 0)
		if (this.moreTypes) {
			target[position++] = 0xd4
			target[position++] = 0x65 // 'e' for error
			target[position++] = 0
		}
		pack([ error.name, error.message, error.cause ])
	}
}, {
	pack(regex, allocateForWrite, pack) {
		let { target, position} = allocateForWrite(this.moreTypes ? 3 : 0)
		if (this.moreTypes) {
			target[position++] = 0xd4
			target[position++] = 0x78 // 'x' for regeXp
			target[position++] = 0
		}
		pack([ regex.source, regex.flags ])
	}
}, {
	pack(arrayBuffer, allocateForWrite) {
		if (this.moreTypes)
			writeExtBuffer(arrayBuffer, 0x10, allocateForWrite)
		else
			writeBuffer(hasNodeBuffer ? Buffer.from(arrayBuffer) : new Uint8Array(arrayBuffer), allocateForWrite)
	}
}, {
	pack(typedArray, allocateForWrite) {
		let constructor = typedArray.constructor
		if (constructor !== ByteArray && this.moreTypes)
			writeExtBuffer(typedArray, _unpack_js__WEBPACK_IMPORTED_MODULE_0__.typedArrays.indexOf(constructor.name), allocateForWrite)
		else
			writeBuffer(typedArray, allocateForWrite)
	}
}, {
	pack(c1, allocateForWrite) { // specific 0xC1 object
		let { target, position} = allocateForWrite(1)
		target[position] = 0xc1
	}
}]

function writeExtBuffer(typedArray, type, allocateForWrite, encode) {
	let length = typedArray.byteLength
	if (length + 1 < 0x100) {
		var { target, position } = allocateForWrite(4 + length)
		target[position++] = 0xc7
		target[position++] = length + 1
	} else if (length + 1 < 0x10000) {
		var { target, position } = allocateForWrite(5 + length)
		target[position++] = 0xc8
		target[position++] = (length + 1) >> 8
		target[position++] = (length + 1) & 0xff
	} else {
		var { target, position, targetView } = allocateForWrite(7 + length)
		target[position++] = 0xc9
		targetView.setUint32(position, length + 1) // plus one for the type byte
		position += 4
	}
	target[position++] = 0x74 // "t" for typed array
	target[position++] = type
	if (!typedArray.buffer) typedArray = new Uint8Array(typedArray)
	target.set(new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength), position)
}
function writeBuffer(buffer, allocateForWrite) {
	let length = buffer.byteLength
	var target, position
	if (length < 0x100) {
		var { target, position } = allocateForWrite(length + 2)
		target[position++] = 0xc4
		target[position++] = length
	} else if (length < 0x10000) {
		var { target, position } = allocateForWrite(length + 3)
		target[position++] = 0xc5
		target[position++] = length >> 8
		target[position++] = length & 0xff
	} else {
		var { target, position, targetView } = allocateForWrite(length + 5)
		target[position++] = 0xc6
		targetView.setUint32(position, length)
		position += 4
	}
	target.set(buffer, position)
}

function writeExtensionData(result, target, position, type) {
	let length = result.length
	switch (length) {
		case 1:
			target[position++] = 0xd4
			break
		case 2:
			target[position++] = 0xd5
			break
		case 4:
			target[position++] = 0xd6
			break
		case 8:
			target[position++] = 0xd7
			break
		case 16:
			target[position++] = 0xd8
			break
		default:
			if (length < 0x100) {
				target[position++] = 0xc7
				target[position++] = length
			} else if (length < 0x10000) {
				target[position++] = 0xc8
				target[position++] = length >> 8
				target[position++] = length & 0xff
			} else {
				target[position++] = 0xc9
				target[position++] = length >> 24
				target[position++] = (length >> 16) & 0xff
				target[position++] = (length >> 8) & 0xff
				target[position++] = length & 0xff
			}
	}
	target[position++] = type
	target.set(result, position)
	position += length
	return position
}

function insertIds(serialized, idsToInsert) {
	// insert the ids that need to be referenced for structured clones
	let nextId
	let distanceToMove = idsToInsert.length * 6
	let lastEnd = serialized.length - distanceToMove
	while (nextId = idsToInsert.pop()) {
		let offset = nextId.offset
		let id = nextId.id
		serialized.copyWithin(offset + distanceToMove, offset, lastEnd)
		distanceToMove -= 6
		let position = offset + distanceToMove
		serialized[position++] = 0xd6
		serialized[position++] = 0x69 // 'i'
		serialized[position++] = id >> 24
		serialized[position++] = (id >> 16) & 0xff
		serialized[position++] = (id >> 8) & 0xff
		serialized[position++] = id & 0xff
		lastEnd = offset
	}
	return serialized
}

function writeBundles(start, pack, incrementPosition) {
	if (bundledStrings.length > 0) {
		targetView.setUint32(bundledStrings.position + start, position + incrementPosition - bundledStrings.position - start)
		bundledStrings.stringsPosition = position - start;
		let writeStrings = bundledStrings
		bundledStrings = null
		pack(writeStrings[0])
		pack(writeStrings[1])
	}
}

function addExtension(extension) {
	if (extension.Class) {
		if (!extension.pack && !extension.write)
			throw new Error('Extension has no pack or write function')
		if (extension.pack && !extension.type)
			throw new Error('Extension has no type (numeric code to identify the extension)')
		extensionClasses.unshift(extension.Class)
		extensions.unshift(extension)
	}
	(0,_unpack_js__WEBPACK_IMPORTED_MODULE_0__.addExtension)(extension)
}
function prepareStructures(structures, packr) {
	structures.isCompatible = (existingStructures) => {
		let compatible = !existingStructures || ((packr.lastNamedStructuresLength || 0) === existingStructures.length)
		if (!compatible) // we want to merge these existing structures immediately since we already have it and we are in the right transaction
			packr._mergeStructures(existingStructures);
		return compatible;
	}
	return structures
}
function setWriteStructSlots(writeSlots, makeStructures) {
	writeStructSlots = writeSlots;
	prepareStructures = makeStructures;
}

let defaultPackr = new Packr({ useRecords: false })
const pack = defaultPackr.pack
const encode = defaultPackr.pack
const Encoder = Packr

;
const { NEVER, ALWAYS, DECIMAL_ROUND, DECIMAL_FIT } = _unpack_js__WEBPACK_IMPORTED_MODULE_0__.FLOAT32_OPTIONS
const REUSE_BUFFER_MODE = 512
const RESET_BUFFER_MODE = 1024
const RESERVE_START_SPACE = 2048


}),
"./node_modules/.pnpm/@colyseus+msgpackr@1.11.2/node_modules/@colyseus/msgpackr/unpack.js": 
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@colyseus+msgpackr@1.11.2/node_modules/@colyseus/msgpackr/unpack.js ***!
  \************************************************************************************************/
(function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  C1: () => (C1),
  C1Type: () => (C1Type),
  Decoder: () => (Decoder),
  FLOAT32_OPTIONS: () => (FLOAT32_OPTIONS),
  Unpackr: () => (Unpackr),
  addExtension: () => (addExtension),
  checkedRead: () => (checkedRead),
  clearSource: () => (clearSource),
  decode: () => (decode),
  getPosition: () => (getPosition),
  isNativeAccelerationEnabled: () => (isNativeAccelerationEnabled),
  loadStructures: () => (loadStructures),
  mult10: () => (mult10),
  read: () => (read),
  readString: () => (readString),
  roundFloat32: () => (roundFloat32),
  setExtractor: () => (setExtractor),
  setReadStruct: () => (setReadStruct),
  typedArrays: () => (typedArrays),
  unpack: () => (unpack),
  unpackMultiple: () => (unpackMultiple)
});
/* provided dependency */ var Buffer = __webpack_require__(/*! ./node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js */ "./node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js")["Buffer"];
var decoder
try {
	decoder = new TextDecoder()
} catch(error) {}
var src
var srcEnd
var position = 0
var alreadySet
const EMPTY_ARRAY = []
var strings = EMPTY_ARRAY
var stringPosition = 0
var currentUnpackr = {}
var currentStructures
var srcString
var srcStringStart = 0
var srcStringEnd = 0
var bundledStrings
var referenceMap
var currentExtensions = []
var dataView
var defaultOptions = {
	useRecords: false,
	mapsAsObjects: true
}
class C1Type {}
const C1 = new C1Type()
C1.name = 'MessagePack 0xC1'
var sequentialMode = false
var inlineObjectReadThreshold = 2
var readStruct, onLoadedStructures, onSaveState
var BlockedFunction // we use search and replace to change the next call to BlockedFunction to avoid CSP issues for
// no-eval build
try {
	new Function('')
} catch(error) {
	// if eval variants are not supported, do not create inline object readers ever
	inlineObjectReadThreshold = Infinity
}

class Unpackr {
	constructor(options) {
		if (options) {
			if (options.useRecords === false && options.mapsAsObjects === undefined)
				options.mapsAsObjects = true
			if (options.sequential && options.trusted !== false) {
				options.trusted = true;
				if (!options.structures && options.useRecords != false) {
					options.structures = []
					if (!options.maxSharedStructures)
						options.maxSharedStructures = 0
				}
			}
			if (options.structures)
				options.structures.sharedLength = options.structures.length
			else if (options.getStructures) {
				(options.structures = []).uninitialized = true // this is what we use to denote an uninitialized structures
				options.structures.sharedLength = 0
			}
			if (options.int64AsNumber) {
				options.int64AsType = 'number'
			}
		}
		Object.assign(this, options)
	}
	unpack(source, options) {
		if (src) {
			// re-entrant execution, save the state and restore it after we do this unpack
			return saveState(() => {
				clearSource()
				return this ? this.unpack(source, options) : Unpackr.prototype.unpack.call(defaultOptions, source, options)
			})
		}
		if (!source.buffer && source.constructor === ArrayBuffer)
			source = typeof Buffer !== 'undefined' ? Buffer.from(source) : new Uint8Array(source);
		if (typeof options === 'object') {
			srcEnd = options.end || source.length
			position = options.start || 0
		} else {
			position = 0
			srcEnd = options > -1 ? options : source.length
		}
		stringPosition = 0
		srcStringEnd = 0
		srcString = null
		strings = EMPTY_ARRAY
		bundledStrings = null
		src = source
		// this provides cached access to the data view for a buffer if it is getting reused, which is a recommend
		// technique for getting data from a database where it can be copied into an existing buffer instead of creating
		// new ones
		try {
			dataView = source.dataView || (source.dataView = new DataView(source.buffer, source.byteOffset, source.byteLength))
		} catch(error) {
			// if it doesn't have a buffer, maybe it is the wrong type of object
			src = null
			if (source instanceof Uint8Array)
				throw error
			throw new Error('Source must be a Uint8Array or Buffer but was a ' + ((source && typeof source == 'object') ? source.constructor.name : typeof source))
		}
		if (this instanceof Unpackr) {
			currentUnpackr = this
			if (this.structures) {
				currentStructures = this.structures
				return checkedRead(options)
			} else if (!currentStructures || currentStructures.length > 0) {
				currentStructures = []
			}
		} else {
			currentUnpackr = defaultOptions
			if (!currentStructures || currentStructures.length > 0)
				currentStructures = []
		}
		return checkedRead(options)
	}
	unpackMultiple(source, forEach) {
		let values, lastPosition = 0
		try {
			sequentialMode = true
			let size = source.length
			let value = this ? this.unpack(source, size) : defaultUnpackr.unpack(source, size)
			if (forEach) {
				if (forEach(value, lastPosition, position) === false) return;
				while(position < size) {
					lastPosition = position
					if (forEach(checkedRead(), lastPosition, position) === false) {
						return
					}
				}
			}
			else {
				values = [ value ]
				while(position < size) {
					lastPosition = position
					values.push(checkedRead())
				}
				return values
			}
		} catch(error) {
			error.lastPosition = lastPosition
			error.values = values
			throw error
		} finally {
			sequentialMode = false
			clearSource()
		}
	}
	_mergeStructures(loadedStructures, existingStructures) {
		if (onLoadedStructures)
			loadedStructures = onLoadedStructures.call(this, loadedStructures);
		loadedStructures = loadedStructures || []
		if (Object.isFrozen(loadedStructures))
			loadedStructures = loadedStructures.map(structure => structure.slice(0))
		for (let i = 0, l = loadedStructures.length; i < l; i++) {
			let structure = loadedStructures[i]
			if (structure) {
				structure.isShared = true
				if (i >= 32)
					structure.highByte = (i - 32) >> 5
			}
		}
		loadedStructures.sharedLength = loadedStructures.length
		for (let id in existingStructures || []) {
			if (id >= 0) {
				let structure = loadedStructures[id]
				let existing = existingStructures[id]
				if (existing) {
					if (structure)
						(loadedStructures.restoreStructures || (loadedStructures.restoreStructures = []))[id] = structure
					loadedStructures[id] = existing
				}
			}
		}
		return this.structures = loadedStructures
	}
	decode(source, options) {
		return this.unpack(source, options)
	}
}
function getPosition() {
	return position
}
function checkedRead(options) {
	try {
		if (!currentUnpackr.trusted && !sequentialMode) {
			let sharedLength = currentStructures.sharedLength || 0
			if (sharedLength < currentStructures.length)
				currentStructures.length = sharedLength
		}
		let result
		if (currentUnpackr.randomAccessStructure && src[position] < 0x40 && src[position] >= 0x20 && readStruct) {
			result = readStruct(src, position, srcEnd, currentUnpackr)
			src = null // dispose of this so that recursive unpack calls don't save state
			if (!(options && options.lazy) && result)
				result = result.toJSON()
			position = srcEnd
		} else
			result = read()
		if (bundledStrings) { // bundled strings to skip past
			position = bundledStrings.postBundlePosition
			bundledStrings = null
		}
		if (sequentialMode)
			// we only need to restore the structures if there was an error, but if we completed a read,
			// we can clear this out and keep the structures we read
			currentStructures.restoreStructures = null

		if (position == srcEnd) {
			// finished reading this source, cleanup references
			if (currentStructures && currentStructures.restoreStructures)
				restoreStructures()
			currentStructures = null
			src = null
			if (referenceMap)
				referenceMap = null
		} else if (position > srcEnd) {
			// over read
			throw new Error('Unexpected end of MessagePack data')
		} else if (!sequentialMode) {
			let jsonView;
			try {
				jsonView = JSON.stringify(result, (_, value) => typeof value === "bigint" ? `${value}n` : value).slice(0, 100)
			} catch(error) {
				jsonView = '(JSON view not available ' + error + ')'
			}
			throw new Error('Data read, but end of buffer not reached ' + jsonView)
		}
		// else more to read, but we are reading sequentially, so don't clear source yet
		return result
	} catch(error) {
		if (currentStructures && currentStructures.restoreStructures)
			restoreStructures()
		clearSource()
		if (error instanceof RangeError || error.message.startsWith('Unexpected end of buffer') || position > srcEnd) {
			error.incomplete = true
		}
		throw error
	}
}

function restoreStructures() {
	for (let id in currentStructures.restoreStructures) {
		currentStructures[id] = currentStructures.restoreStructures[id]
	}
	currentStructures.restoreStructures = null
}

function read() {
	let token = src[position++]
	if (token < 0xa0) {
		if (token < 0x80) {
			if (token < 0x40)
				return token
			else {
				let structure = currentStructures[token & 0x3f] ||
					currentUnpackr.getStructures && loadStructures()[token & 0x3f]
				if (structure) {
					if (!structure.read) {
						structure.read = createStructureReader(structure, token & 0x3f)
					}
					return structure.read()
				} else
					return token
			}
		} else if (token < 0x90) {
			// map
			token -= 0x80
			if (currentUnpackr.mapsAsObjects) {
				let object = {}
				for (let i = 0; i < token; i++) {
					let key = readKey()
					if (key === '__proto__')
						key = '__proto_'
					object[key] = read()
				}
				return object
			} else {
				let map = new Map()
				for (let i = 0; i < token; i++) {
					map.set(read(), read())
				}
				return map
			}
		} else {
			token -= 0x90
			let array = new Array(token)
			for (let i = 0; i < token; i++) {
				array[i] = read()
			}
			if (currentUnpackr.freezeData)
				return Object.freeze(array)
			return array
		}
	} else if (token < 0xc0) {
		// fixstr
		let length = token - 0xa0
		if (srcStringEnd >= position) {
			return srcString.slice(position - srcStringStart, (position += length) - srcStringStart)
		}
		if (srcStringEnd == 0 && srcEnd < 140) {
			// for small blocks, avoiding the overhead of the extract call is helpful
			let string = length < 16 ? shortStringInJS(length) : longStringInJS(length)
			if (string != null)
				return string
		}
		return readFixedString(length)
	} else {
		let value
		switch (token) {
			case 0xc0: return null
			case 0xc1:
				if (bundledStrings) {
					value = read() // followed by the length of the string in characters (not bytes!)
					if (value > 0)
						return bundledStrings[1].slice(bundledStrings.position1, bundledStrings.position1 += value)
					else
						return bundledStrings[0].slice(bundledStrings.position0, bundledStrings.position0 -= value)
				}
				return C1; // "never-used", return special object to denote that
			case 0xc2: return false
			case 0xc3: return true
			case 0xc4:
				// bin 8
				value = src[position++]
				if (value === undefined)
					throw new Error('Unexpected end of buffer')
				return readBin(value)
			case 0xc5:
				// bin 16
				value = dataView.getUint16(position)
				position += 2
				return readBin(value)
			case 0xc6:
				// bin 32
				value = dataView.getUint32(position)
				position += 4
				return readBin(value)
			case 0xc7:
				// ext 8
				return readExt(src[position++])
			case 0xc8:
				// ext 16
				value = dataView.getUint16(position)
				position += 2
				return readExt(value)
			case 0xc9:
				// ext 32
				value = dataView.getUint32(position)
				position += 4
				return readExt(value)
			case 0xca:
				value = dataView.getFloat32(position)
				if (currentUnpackr.useFloat32 > 2) {
					// this does rounding of numbers that were encoded in 32-bit float to nearest significant decimal digit that could be preserved
					let multiplier = mult10[((src[position] & 0x7f) << 1) | (src[position + 1] >> 7)]
					position += 4
					return ((multiplier * value + (value > 0 ? 0.5 : -0.5)) >> 0) / multiplier
				}
				position += 4
				return value
			case 0xcb:
				value = dataView.getFloat64(position)
				position += 8
				return value
			// uint handlers
			case 0xcc:
				return src[position++]
			case 0xcd:
				value = dataView.getUint16(position)
				position += 2
				return value
			case 0xce:
				value = dataView.getUint32(position)
				position += 4
				return value
			case 0xcf:
				if (currentUnpackr.int64AsType === 'number') {
					value = dataView.getUint32(position) * 0x100000000
					value += dataView.getUint32(position + 4)
				} else if (currentUnpackr.int64AsType === 'string') {
					value = dataView.getBigUint64(position).toString()
				} else if (currentUnpackr.int64AsType === 'auto') {
					value = dataView.getBigUint64(position)
					if (value<=BigInt(2)<<BigInt(52)) value=Number(value)
				} else
					value = dataView.getBigUint64(position)
				position += 8
				return value

			// int handlers
			case 0xd0:
				return dataView.getInt8(position++)
			case 0xd1:
				value = dataView.getInt16(position)
				position += 2
				return value
			case 0xd2:
				value = dataView.getInt32(position)
				position += 4
				return value
			case 0xd3:
				if (currentUnpackr.int64AsType === 'number') {
					value = dataView.getInt32(position) * 0x100000000
					value += dataView.getUint32(position + 4)
				} else if (currentUnpackr.int64AsType === 'string') {
					value = dataView.getBigInt64(position).toString()
				} else if (currentUnpackr.int64AsType === 'auto') {
					value = dataView.getBigInt64(position)
					if (value>=BigInt(-2)<<BigInt(52)&&value<=BigInt(2)<<BigInt(52)) value=Number(value)
				} else
					value = dataView.getBigInt64(position)
				position += 8
				return value

			case 0xd4:
				// fixext 1
				value = src[position++]
				if (value == 0x72) {
					return recordDefinition(src[position++] & 0x3f)
				} else {
					let extension = currentExtensions[value]
					if (extension) {
						if (extension.read) {
							position++ // skip filler byte
							return extension.read(read())
						} else if (extension.noBuffer) {
							position++ // skip filler byte
							return extension()
						} else
							return extension(src.subarray(position, ++position))
					} else
						throw new Error('Unknown extension ' + value)
				}
			case 0xd5:
				// fixext 2
				value = src[position]
				if (value == 0x72) {
					position++
					return recordDefinition(src[position++] & 0x3f, src[position++])
				} else
					return readExt(2)
			case 0xd6:
				// fixext 4
				return readExt(4)
			case 0xd7:
				// fixext 8
				return readExt(8)
			case 0xd8:
				// fixext 16
				return readExt(16)
			case 0xd9:
			// str 8
				value = src[position++]
				if (srcStringEnd >= position) {
					return srcString.slice(position - srcStringStart, (position += value) - srcStringStart)
				}
				return readString8(value)
			case 0xda:
			// str 16
				value = dataView.getUint16(position)
				position += 2
				if (srcStringEnd >= position) {
					return srcString.slice(position - srcStringStart, (position += value) - srcStringStart)
				}
				return readString16(value)
			case 0xdb:
			// str 32
				value = dataView.getUint32(position)
				position += 4
				if (srcStringEnd >= position) {
					return srcString.slice(position - srcStringStart, (position += value) - srcStringStart)
				}
				return readString32(value)
			case 0xdc:
			// array 16
				value = dataView.getUint16(position)
				position += 2
				return readArray(value)
			case 0xdd:
			// array 32
				value = dataView.getUint32(position)
				position += 4
				return readArray(value)
			case 0xde:
			// map 16
				value = dataView.getUint16(position)
				position += 2
				return readMap(value)
			case 0xdf:
			// map 32
				value = dataView.getUint32(position)
				position += 4
				return readMap(value)
			default: // negative int
				if (token >= 0xe0)
					return token - 0x100
				if (token === undefined) {
					let error = new Error('Unexpected end of MessagePack data')
					error.incomplete = true
					throw error
				}
				throw new Error('Unknown MessagePack token ' + token)

		}
	}
}
const validName = /^[a-zA-Z_$][a-zA-Z\d_$]*$/
function createStructureReader(structure, firstId) {
	function readObject() {
		// This initial function is quick to instantiate, but runs slower. After several iterations pay the cost to build the faster function
		if (readObject.count++ > inlineObjectReadThreshold) {
			let readObject = structure.read = (new Function('r', 'return function(){return ' + (currentUnpackr.freezeData ? 'Object.freeze' : '') +
				'({' + structure.map(key => key === '__proto__' ? '__proto_:r()' : validName.test(key) ? key + ':r()' : ('[' + JSON.stringify(key) + ']:r()')).join(',') + '})}'))(read)
			if (structure.highByte === 0)
				structure.read = createSecondByteReader(firstId, structure.read)
			return readObject() // second byte is already read, if there is one so immediately read object
		}
		let object = {}
		for (let i = 0, l = structure.length; i < l; i++) {
			let key = structure[i]
			if (key === '__proto__')
				key = '__proto_'
			object[key] = read()
		}
		if (currentUnpackr.freezeData)
			return Object.freeze(object);
		return object
	}
	readObject.count = 0
	if (structure.highByte === 0) {
		return createSecondByteReader(firstId, readObject)
	}
	return readObject
}

const createSecondByteReader = (firstId, read0) => {
	return function() {
		let highByte = src[position++]
		if (highByte === 0)
			return read0()
		let id = firstId < 32 ? -(firstId + (highByte << 5)) : firstId + (highByte << 5)
		let structure = currentStructures[id] || loadStructures()[id]
		if (!structure) {
			throw new Error('Record id is not defined for ' + id)
		}
		if (!structure.read)
			structure.read = createStructureReader(structure, firstId)
		return structure.read()
	}
}

function loadStructures() {
	let loadedStructures = saveState(() => {
		// save the state in case getStructures modifies our buffer
		src = null
		return currentUnpackr.getStructures()
	})
	return currentStructures = currentUnpackr._mergeStructures(loadedStructures, currentStructures)
}

var readFixedString = readStringJS
var readString8 = readStringJS
var readString16 = readStringJS
var readString32 = readStringJS
let isNativeAccelerationEnabled = false

function setExtractor(extractStrings) {
	isNativeAccelerationEnabled = true
	readFixedString = readString(1)
	readString8 = readString(2)
	readString16 = readString(3)
	readString32 = readString(5)
	function readString(headerLength) {
		return function readString(length) {
			let string = strings[stringPosition++]
			if (string == null) {
				if (bundledStrings)
					return readStringJS(length)
				let byteOffset = src.byteOffset
				let extraction = extractStrings(position - headerLength + byteOffset, srcEnd + byteOffset, src.buffer)
				if (typeof extraction == 'string') {
					string = extraction
					strings = EMPTY_ARRAY
				} else {
					strings = extraction
					stringPosition = 1
					srcStringEnd = 1 // even if a utf-8 string was decoded, must indicate we are in the midst of extracted strings and can't skip strings
					string = strings[0]
					if (string === undefined)
						throw new Error('Unexpected end of buffer')
				}
			}
			let srcStringLength = string.length
			if (srcStringLength <= length) {
				position += length
				return string
			}
			srcString = string
			srcStringStart = position
			srcStringEnd = position + srcStringLength
			position += length
			return string.slice(0, length) // we know we just want the beginning
		}
	}
}
function readStringJS(length) {
	let result
	if (length < 16) {
		if (result = shortStringInJS(length))
			return result
	}
	if (length > 64 && decoder)
		return decoder.decode(src.subarray(position, position += length))
	const end = position + length
	const units = []
	result = ''
	while (position < end) {
		const byte1 = src[position++]
		if ((byte1 & 0x80) === 0) {
			// 1 byte
			units.push(byte1)
		} else if ((byte1 & 0xe0) === 0xc0) {
			// 2 bytes
			const byte2 = src[position++] & 0x3f
			units.push(((byte1 & 0x1f) << 6) | byte2)
		} else if ((byte1 & 0xf0) === 0xe0) {
			// 3 bytes
			const byte2 = src[position++] & 0x3f
			const byte3 = src[position++] & 0x3f
			units.push(((byte1 & 0x1f) << 12) | (byte2 << 6) | byte3)
		} else if ((byte1 & 0xf8) === 0xf0) {
			// 4 bytes
			const byte2 = src[position++] & 0x3f
			const byte3 = src[position++] & 0x3f
			const byte4 = src[position++] & 0x3f
			let unit = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4
			if (unit > 0xffff) {
				unit -= 0x10000
				units.push(((unit >>> 10) & 0x3ff) | 0xd800)
				unit = 0xdc00 | (unit & 0x3ff)
			}
			units.push(unit)
		} else {
			units.push(byte1)
		}

		if (units.length >= 0x1000) {
			result += fromCharCode.apply(String, units)
			units.length = 0
		}
	}

	if (units.length > 0) {
		result += fromCharCode.apply(String, units)
	}

	return result
}
function readString(source, start, length) {
	let existingSrc = src;
	src = source;
	position = start;
	try {
		return readStringJS(length);
	} finally {
		src = existingSrc;
	}
}

function readArray(length) {
	let array = new Array(length)
	for (let i = 0; i < length; i++) {
		array[i] = read()
	}
	if (currentUnpackr.freezeData)
		return Object.freeze(array)
	return array
}

function readMap(length) {
	if (currentUnpackr.mapsAsObjects) {
		let object = {}
		for (let i = 0; i < length; i++) {
			let key = readKey()
			if (key === '__proto__')
				key = '__proto_';
			object[key] = read()
		}
		return object
	} else {
		let map = new Map()
		for (let i = 0; i < length; i++) {
			map.set(read(), read())
		}
		return map
	}
}

var fromCharCode = String.fromCharCode
function longStringInJS(length) {
	let start = position
	let bytes = new Array(length)
	for (let i = 0; i < length; i++) {
		const byte = src[position++];
		if ((byte & 0x80) > 0) {
				position = start
				return
			}
			bytes[i] = byte
		}
		return fromCharCode.apply(String, bytes)
}
function shortStringInJS(length) {
	if (length < 4) {
		if (length < 2) {
			if (length === 0)
				return ''
			else {
				let a = src[position++]
				if ((a & 0x80) > 1) {
					position -= 1
					return
				}
				return fromCharCode(a)
			}
		} else {
			let a = src[position++]
			let b = src[position++]
			if ((a & 0x80) > 0 || (b & 0x80) > 0) {
				position -= 2
				return
			}
			if (length < 3)
				return fromCharCode(a, b)
			let c = src[position++]
			if ((c & 0x80) > 0) {
				position -= 3
				return
			}
			return fromCharCode(a, b, c)
		}
	} else {
		let a = src[position++]
		let b = src[position++]
		let c = src[position++]
		let d = src[position++]
		if ((a & 0x80) > 0 || (b & 0x80) > 0 || (c & 0x80) > 0 || (d & 0x80) > 0) {
			position -= 4
			return
		}
		if (length < 6) {
			if (length === 4)
				return fromCharCode(a, b, c, d)
			else {
				let e = src[position++]
				if ((e & 0x80) > 0) {
					position -= 5
					return
				}
				return fromCharCode(a, b, c, d, e)
			}
		} else if (length < 8) {
			let e = src[position++]
			let f = src[position++]
			if ((e & 0x80) > 0 || (f & 0x80) > 0) {
				position -= 6
				return
			}
			if (length < 7)
				return fromCharCode(a, b, c, d, e, f)
			let g = src[position++]
			if ((g & 0x80) > 0) {
				position -= 7
				return
			}
			return fromCharCode(a, b, c, d, e, f, g)
		} else {
			let e = src[position++]
			let f = src[position++]
			let g = src[position++]
			let h = src[position++]
			if ((e & 0x80) > 0 || (f & 0x80) > 0 || (g & 0x80) > 0 || (h & 0x80) > 0) {
				position -= 8
				return
			}
			if (length < 10) {
				if (length === 8)
					return fromCharCode(a, b, c, d, e, f, g, h)
				else {
					let i = src[position++]
					if ((i & 0x80) > 0) {
						position -= 9
						return
					}
					return fromCharCode(a, b, c, d, e, f, g, h, i)
				}
			} else if (length < 12) {
				let i = src[position++]
				let j = src[position++]
				if ((i & 0x80) > 0 || (j & 0x80) > 0) {
					position -= 10
					return
				}
				if (length < 11)
					return fromCharCode(a, b, c, d, e, f, g, h, i, j)
				let k = src[position++]
				if ((k & 0x80) > 0) {
					position -= 11
					return
				}
				return fromCharCode(a, b, c, d, e, f, g, h, i, j, k)
			} else {
				let i = src[position++]
				let j = src[position++]
				let k = src[position++]
				let l = src[position++]
				if ((i & 0x80) > 0 || (j & 0x80) > 0 || (k & 0x80) > 0 || (l & 0x80) > 0) {
					position -= 12
					return
				}
				if (length < 14) {
					if (length === 12)
						return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l)
					else {
						let m = src[position++]
						if ((m & 0x80) > 0) {
							position -= 13
							return
						}
						return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m)
					}
				} else {
					let m = src[position++]
					let n = src[position++]
					if ((m & 0x80) > 0 || (n & 0x80) > 0) {
						position -= 14
						return
					}
					if (length < 15)
						return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m, n)
					let o = src[position++]
					if ((o & 0x80) > 0) {
						position -= 15
						return
					}
					return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
				}
			}
		}
	}
}

function readOnlyJSString() {
	let token = src[position++]
	let length
	if (token < 0xc0) {
		// fixstr
		length = token - 0xa0
	} else {
		switch(token) {
			case 0xd9:
			// str 8
				length = src[position++]
				break
			case 0xda:
			// str 16
				length = dataView.getUint16(position)
				position += 2
				break
			case 0xdb:
			// str 32
				length = dataView.getUint32(position)
				position += 4
				break
			default:
				throw new Error('Expected string')
		}
	}
	return readStringJS(length)
}


function readBin(length) {
	return currentUnpackr.copyBuffers ?
		// specifically use the copying slice (not the node one)
		Uint8Array.prototype.slice.call(src, position, position += length) :
		src.subarray(position, position += length)
}
function readExt(length) {
	let type = src[position++]
	if (currentExtensions[type]) {
		let end
		return currentExtensions[type](src.subarray(position, end = (position += length)), (readPosition) => {
			position = readPosition;
			try {
				return read();
			} finally {
				position = end;
			}
		})
	}
	else
		throw new Error('Unknown extension type ' + type)
}

var keyCache = new Array(4096)
function readKey() {
	let length = src[position++]
	if (length >= 0xa0 && length < 0xc0) {
		// fixstr, potentially use key cache
		length = length - 0xa0
		if (srcStringEnd >= position) // if it has been extracted, must use it (and faster anyway)
			return srcString.slice(position - srcStringStart, (position += length) - srcStringStart)
		else if (!(srcStringEnd == 0 && srcEnd < 180))
			return readFixedString(length)
	} else { // not cacheable, go back and do a standard read
		position--
		return asSafeString(read())
	}
	let key = ((length << 5) ^ (length > 1 ? dataView.getUint16(position) : length > 0 ? src[position] : 0)) & 0xfff
	let entry = keyCache[key]
	let checkPosition = position
	let end = position + length - 3
	let chunk
	let i = 0
	if (entry && entry.bytes == length) {
		while (checkPosition < end) {
			chunk = dataView.getUint32(checkPosition)
			if (chunk != entry[i++]) {
				checkPosition = 0x70000000
				break
			}
			checkPosition += 4
		}
		end += 3
		while (checkPosition < end) {
			chunk = src[checkPosition++]
			if (chunk != entry[i++]) {
				checkPosition = 0x70000000
				break
			}
		}
		if (checkPosition === end) {
			position = checkPosition
			return entry.string
		}
		end -= 3
		checkPosition = position
	}
	entry = []
	keyCache[key] = entry
	entry.bytes = length
	while (checkPosition < end) {
		chunk = dataView.getUint32(checkPosition)
		entry.push(chunk)
		checkPosition += 4
	}
	end += 3
	while (checkPosition < end) {
		chunk = src[checkPosition++]
		entry.push(chunk)
	}
	// for small blocks, avoiding the overhead of the extract call is helpful
	let string = length < 16 ? shortStringInJS(length) : longStringInJS(length)
	if (string != null)
		return entry.string = string
	return entry.string = readFixedString(length)
}

function asSafeString(property) {
	// protect against expensive (DoS) string conversions
	if (typeof property === 'string') return property;
	if (typeof property === 'number' || typeof property === 'boolean' || typeof property === 'bigint') return property.toString();
	if (property == null) return property + '';
	if (currentUnpackr.allowArraysInMapKeys && Array.isArray(property) && property.flat().every(item => ['string', 'number', 'boolean', 'bigint'].includes(typeof item))) {
		return property.flat().toString();
	}
	throw new Error(`Invalid property type for record: ${typeof property}`);
}
// the registration of the record definition extension (as "r")
const recordDefinition = (id, highByte) => {
	let structure = read().map(asSafeString) // ensure that all keys are strings and
	// that the array is mutable
	let firstByte = id
	if (highByte !== undefined) {
		id = id < 32 ? -((highByte << 5) + id) : ((highByte << 5) + id)
		structure.highByte = highByte
	}
	let existingStructure = currentStructures[id]
	// If it is a shared structure, we need to restore any changes after reading.
	// Also in sequential mode, we may get incomplete reads and thus errors, and we need to restore
	// to the state prior to an incomplete read in order to properly resume.
	if (existingStructure && (existingStructure.isShared || sequentialMode)) {
		(currentStructures.restoreStructures || (currentStructures.restoreStructures = []))[id] = existingStructure
	}
	currentStructures[id] = structure
	structure.read = createStructureReader(structure, firstByte)
	return structure.read()
}
currentExtensions[0] = () => {} // notepack defines extension 0 to mean undefined, so use that as the default here
currentExtensions[0].noBuffer = true

currentExtensions[0x42] = (data) => {
	// decode bigint
	let length = data.length;
	let value = BigInt(data[0] & 0x80 ? data[0] - 0x100 : data[0]);
	for (let i = 1; i < length; i++) {
		value <<= BigInt(8);
		value += BigInt(data[i]);
	}
	return value;
}

let errors = { Error, TypeError, ReferenceError };
currentExtensions[0x65] = () => {
	let data = read()
	return (errors[data[0]] || Error)(data[1], { cause: data[2] })
}

currentExtensions[0x69] = (data) => {
	// id extension (for structured clones)
	if (currentUnpackr.structuredClone === false) throw new Error('Structured clone extension is disabled')
	let id = dataView.getUint32(position - 4)
	if (!referenceMap)
		referenceMap = new Map()
	let token = src[position]
	let target
	// TODO: handle Maps, Sets, and other types that can cycle; this is complicated, because you potentially need to read
	// ahead past references to record structure definitions
	if (token >= 0x90 && token < 0xa0 || token == 0xdc || token == 0xdd)
		target = []
	else
		target = {}

	let refEntry = { target } // a placeholder object
	referenceMap.set(id, refEntry)
	let targetProperties = read() // read the next value as the target object to id
	if (refEntry.used) // there is a cycle, so we have to assign properties to original target
		return Object.assign(target, targetProperties)
	refEntry.target = targetProperties // the placeholder wasn't used, replace with the deserialized one
	return targetProperties // no cycle, can just use the returned read object
}

currentExtensions[0x70] = (data) => {
	// pointer extension (for structured clones)
	if (currentUnpackr.structuredClone === false) throw new Error('Structured clone extension is disabled')
	let id = dataView.getUint32(position - 4)
	let refEntry = referenceMap.get(id)
	refEntry.used = true
	return refEntry.target
}

currentExtensions[0x73] = () => new Set(read())

const typedArrays = ['Int8','Uint8','Uint8Clamped','Int16','Uint16','Int32','Uint32','Float32','Float64','BigInt64','BigUint64'].map(type => type + 'Array')

let glbl = typeof globalThis === 'object' ? globalThis : window;
currentExtensions[0x74] = (data) => {
	let typeCode = data[0]
	let typedArrayName = typedArrays[typeCode]
	if (!typedArrayName) {
		if (typeCode === 16) {
			let ab = new ArrayBuffer(data.length - 1)
			let u8 = new Uint8Array(ab)
			u8.set(data.subarray(1))
			return ab;
		}
		throw new Error('Could not find typed array for code ' + typeCode)
	}
	// we have to always slice/copy here to get a new ArrayBuffer that is word/byte aligned
	return new glbl[typedArrayName](Uint8Array.prototype.slice.call(data, 1).buffer)
}
currentExtensions[0x78] = () => {
	let data = read()
	return new RegExp(data[0], data[1])
}
const TEMP_BUNDLE = []
currentExtensions[0x62] = (data) => {
	let dataSize = (data[0] << 24) + (data[1] << 16) + (data[2] << 8) + data[3]
	let dataPosition = position
	position += dataSize - data.length
	bundledStrings = TEMP_BUNDLE
	bundledStrings = [readOnlyJSString(), readOnlyJSString()]
	bundledStrings.position0 = 0
	bundledStrings.position1 = 0
	bundledStrings.postBundlePosition = position
	position = dataPosition
	return read()
}

currentExtensions[0xff] = (data) => {
	// 32-bit date extension
	if (data.length == 4)
		return new Date((data[0] * 0x1000000 + (data[1] << 16) + (data[2] << 8) + data[3]) * 1000)
	else if (data.length == 8)
		return new Date(
			((data[0] << 22) + (data[1] << 14) + (data[2] << 6) + (data[3] >> 2)) / 1000000 +
			((data[3] & 0x3) * 0x100000000 + data[4] * 0x1000000 + (data[5] << 16) + (data[6] << 8) + data[7]) * 1000)
	else if (data.length == 12)// TODO: Implement support for negative
		return new Date(
			((data[0] << 24) + (data[1] << 16) + (data[2] << 8) + data[3]) / 1000000 +
			(((data[4] & 0x80) ? -0x1000000000000 : 0) + data[6] * 0x10000000000 + data[7] * 0x100000000 + data[8] * 0x1000000 + (data[9] << 16) + (data[10] << 8) + data[11]) * 1000)
	else
		return new Date('invalid')
} // notepack defines extension 0 to mean undefined, so use that as the default here
// registration of bulk record definition?
// currentExtensions[0x52] = () =>

function saveState(callback) {
	if (onSaveState)
		onSaveState();
	let savedSrcEnd = srcEnd
	let savedPosition = position
	let savedStringPosition = stringPosition
	let savedSrcStringStart = srcStringStart
	let savedSrcStringEnd = srcStringEnd
	let savedSrcString = srcString
	let savedStrings = strings
	let savedReferenceMap = referenceMap
	let savedBundledStrings = bundledStrings

	// TODO: We may need to revisit this if we do more external calls to user code (since it could be slow)
	let savedSrc = new Uint8Array(src.slice(0, srcEnd)) // we copy the data in case it changes while external data is processed
	let savedStructures = currentStructures
	let savedStructuresContents = currentStructures.slice(0, currentStructures.length)
	let savedPackr = currentUnpackr
	let savedSequentialMode = sequentialMode
	let value = callback()
	srcEnd = savedSrcEnd
	position = savedPosition
	stringPosition = savedStringPosition
	srcStringStart = savedSrcStringStart
	srcStringEnd = savedSrcStringEnd
	srcString = savedSrcString
	strings = savedStrings
	referenceMap = savedReferenceMap
	bundledStrings = savedBundledStrings
	src = savedSrc
	sequentialMode = savedSequentialMode
	currentStructures = savedStructures
	currentStructures.splice(0, currentStructures.length, ...savedStructuresContents)
	currentUnpackr = savedPackr
	dataView = new DataView(src.buffer, src.byteOffset, src.byteLength)
	return value
}
function clearSource() {
	src = null
	referenceMap = null
	currentStructures = null
}

function addExtension(extension) {
	if (extension.unpack)
		currentExtensions[extension.type] = extension.unpack
	else
		currentExtensions[extension.type] = extension
}

const mult10 = new Array(147) // this is a table matching binary exponents to the multiplier to determine significant digit rounding
for (let i = 0; i < 256; i++) {
	mult10[i] = +('1e' + Math.floor(45.15 - i * 0.30103))
}
const Decoder = Unpackr
var defaultUnpackr = new Unpackr({ useRecords: false })
const unpack = defaultUnpackr.unpack
const unpackMultiple = defaultUnpackr.unpackMultiple
const decode = defaultUnpackr.unpack
const FLOAT32_OPTIONS = {
	NEVER: 0,
	ALWAYS: 1,
	DECIMAL_ROUND: 3,
	DECIMAL_FIT: 4
}
let f32Array = new Float32Array(1)
let u8Array = new Uint8Array(f32Array.buffer, 0, 4)
function roundFloat32(float32Number) {
	f32Array[0] = float32Number
	let multiplier = mult10[((u8Array[3] & 0x7f) << 1) | (u8Array[2] >> 7)]
	return ((multiplier * float32Number + (float32Number > 0 ? 0.5 : -0.5)) >> 0) / multiplier
}
function setReadStruct(updatedReadStruct, loadedStructs, saveState) {
	readStruct = updatedReadStruct;
	onLoadedStructures = loadedStructs;
	onSaveState = saveState;
}


}),

});
/************************************************************************/
// The module cache
var __webpack_module_cache__ = {};

// The require function
function __webpack_require__(moduleId) {

// Check if module is in cache
var cachedModule = __webpack_module_cache__[moduleId];
if (cachedModule !== undefined) {
return cachedModule.exports;
}
// Create a new module (and put it into the cache)
var module = (__webpack_module_cache__[moduleId] = {
exports: {}
});
// Execute the module function
__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);

// Return the exports of the module
return module.exports;

}

/************************************************************************/
// webpack/runtime/compat_get_default_export
(() => {
// getDefaultExport function for compatibility with non-ESM modules
__webpack_require__.n = (module) => {
	var getter = module && module.__esModule ?
		() => (module['default']) :
		() => (module);
	__webpack_require__.d(getter, { a: getter });
	return getter;
};

})();
// webpack/runtime/define_property_getters
(() => {
__webpack_require__.d = (exports, definition) => {
	for(var key in definition) {
        if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
            Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
        }
    }
};
})();
// webpack/runtime/global
(() => {
__webpack_require__.g = (() => {
	if (typeof globalThis === 'object') return globalThis;
	try {
		return this || new Function('return this')();
	} catch (e) {
		if (typeof window === 'object') return window;
	}
})();
})();
// webpack/runtime/has_own_property
(() => {
__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
})();
// webpack/runtime/make_namespace_object
(() => {
// define __esModule on exports
__webpack_require__.r = (exports) => {
	if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
		Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
	}
	Object.defineProperty(exports, '__esModule', { value: true });
};
})();
// webpack/runtime/rspack_version
(() => {
__webpack_require__.rv = () => ("1.3.8")
})();
// webpack/runtime/rspack_unique_id
(() => {
__webpack_require__.ruid = "bundler=rspack@1.3.8";

})();
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be in strict mode.
(() => {
"use strict";

/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* ESM import */var _colyseus_msgpackr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @colyseus/msgpackr */ "./node_modules/.pnpm/@colyseus+msgpackr@1.11.2/node_modules/@colyseus/msgpackr/index.js");
/* ESM import */var _colyseus_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @colyseus/schema */ "./node_modules/.pnpm/@colyseus+schema@3.0.35/node_modules/@colyseus/schema/build/umd/index.js");
/* ESM import */var _colyseus_schema__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_colyseus_schema__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var _schemas_ts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./schemas.ts */ "./src/schemas.ts");
/* ESM import */var _enums_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./enums.ts */ "./src/enums.ts");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/.pnpm/console-browserify@1.2.0/node_modules/console-browserify/index.js */ "./node_modules/.pnpm/console-browserify@1.2.0/node_modules/console-browserify/index.js");
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _assert_this_initialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function _call_super(_this, derived, args) {
    derived = _get_prototype_of(derived);
    return _possible_constructor_return(_this, _is_native_reflect_construct() ? Reflect.construct(derived, args || [], _get_prototype_of(_this).constructor) : derived.apply(_this, args));
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
        _get = Reflect.get;
    } else {
        _get = function get(target, property, receiver) {
            var base = _super_prop_base(target, property);
            if (!base) return;
            var desc = Object.getOwnPropertyDescriptor(base, property);
            if (desc.get) {
                return desc.get.call(receiver || target);
            }
            return desc.value;
        };
    }
    return _get(target, property, receiver || target);
}
function _get_prototype_of(o) {
    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _possible_constructor_return(self, call) {
    if (call && (_type_of(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assert_this_initialized(self);
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _super_prop_base(object, property) {
    while(!Object.prototype.hasOwnProperty.call(object, property)){
        object = _get_prototype_of(object);
        if (object === null) break;
    }
    return object;
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function _is_native_reflect_construct() {
    try {
        var result = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
    } catch (_) {}
    return (_is_native_reflect_construct = function() {
        return !!result;
    })();
}




var filteredMessages = [
    "Ping",
    "Pong",
    "PositionUpdate"
];
// @ts-ignore
var origWS = unsafeWindow.WebSocket;
var state = new _schemas_ts__WEBPACK_IMPORTED_MODULE_2__.MyRoomState();
var decoder = new _colyseus_schema__WEBPACK_IMPORTED_MODULE_1__.Decoder(state);
window.state = state;
// @ts-ignore
unsafeWindow.decoder = decoder;
function processPacket(buffer, source) {
    var it = {
        offset: 1
    };
    var code = buffer[0];
    if (code === _enums_ts__WEBPACK_IMPORTED_MODULE_3__.Protocol.JOIN_ROOM) {
        return [
            code,
            "joining!"
        ];
    } else if (code === _enums_ts__WEBPACK_IMPORTED_MODULE_3__.Protocol.ROOM_DATA) {
        var type = _colyseus_schema__WEBPACK_IMPORTED_MODULE_1__.decode.stringCheck(buffer, it) ? _colyseus_schema__WEBPACK_IMPORTED_MODULE_1__.decode.string(buffer, it) : _colyseus_schema__WEBPACK_IMPORTED_MODULE_1__.decode.number(buffer, it);
        var message = buffer.byteLength > it.offset ? (0,_colyseus_msgpackr__WEBPACK_IMPORTED_MODULE_0__.unpack)(buffer, {
            start: it.offset
        }) : undefined;
        var _CustomMessageType_type;
        if (filteredMessages.indexOf(_enums_ts__WEBPACK_IMPORTED_MODULE_3__.CustomMessageType[type]) === -1) console.log(source === "r" ? "recv" : "send", (_CustomMessageType_type = _enums_ts__WEBPACK_IMPORTED_MODULE_3__.CustomMessageType[type]) !== null && _CustomMessageType_type !== void 0 ? _CustomMessageType_type : type, message !== null && message !== void 0 ? message : "empty");
        return [
            code,
            _enums_ts__WEBPACK_IMPORTED_MODULE_3__.CustomMessageType[type],
            message
        ];
    } else if (code === _enums_ts__WEBPACK_IMPORTED_MODULE_3__.Protocol.ROOM_STATE) {
        return decoder.decode(buffer, it);
    } else if (code === _enums_ts__WEBPACK_IMPORTED_MODULE_3__.Protocol.ROOM_STATE_PATCH) {
        return decoder.decode(buffer, it);
    } else if (code === _enums_ts__WEBPACK_IMPORTED_MODULE_3__.Protocol.LEAVE_ROOM) {
        return [
            code,
            "Leaving room!"
        ];
    } else {
        return [
            code,
            "?"
        ];
    }
}
function encodeRoomData(type, message) {
    var it = {
        offset: 1
    };
    var packr = new _colyseus_msgpackr__WEBPACK_IMPORTED_MODULE_0__.Packr();
    packr.encode(undefined);
    packr.buffer[0] = _enums_ts__WEBPACK_IMPORTED_MODULE_3__.Protocol.ROOM_DATA;
    if (typeof type === "string") {
        _colyseus_schema__WEBPACK_IMPORTED_MODULE_1__.encode.string(packr.buffer, type, it);
    } else {
        _colyseus_schema__WEBPACK_IMPORTED_MODULE_1__.encode.number(packr.buffer, type, it);
    }
    packr.position = 0;
    return message !== undefined ? packr.pack(message, 2048 + it.offset) // 2048 = RESERVE_START_SPACE
     : packr.buffer.subarray(0, it.offset);
}
// @ts-ignore
unsafeWindow.sendCustom = function(type, message) {
    var // @ts-ignore
    _unsafeWindow_currentSocket;
    var buf = encodeRoomData(type, message);
    (_unsafeWindow_currentSocket = unsafeWindow.currentSocket) === null || _unsafeWindow_currentSocket === void 0 ? void 0 : _unsafeWindow_currentSocket.send(buf);
};
var HookedWS = /*#__PURE__*/ function(origWS) {
    "use strict";
    _inherits(HookedWS, origWS);
    function HookedWS() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        _class_call_check(this, HookedWS);
        var _this;
        console.log("connecting to ".concat(args[0]));
        _this = _call_super(this, HookedWS, _to_consumable_array(args));
        // @ts-ignore
        unsafeWindow.currentSocket = _this;
        // @ts-ignore
        _this.send = function(packet) {
            var buffer = new Uint8Array(packet);
            try {
                var resp = processPacket(buffer, "s");
            } catch (e) {}
            return _get((_assert_this_initialized(_this), _get_prototype_of(HookedWS.prototype)), "send", _this).call(_this, packet);
        };
        // @ts-ignore
        _this.addEventListener("message", function(evt) {
            var buffer = new Uint8Array(evt.data);
            try {
                processPacket(buffer, "r");
            } catch (e) {}
        });
        return _this;
    }
    return HookedWS;
}(origWS);
// @ts-ignore
unsafeWindow.WebSocket = HookedWS;

})();

})()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

